
AMS_SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009530  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  080096f0  080096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cd0  08009cd0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009cd0  08009cd0  00019cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cd8  08009cd8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd8  08009cd8  00019cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cdc  08009cdc  00019cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026ec  20000088  08009d68  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20002774  08009d68  00022774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd1d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003314  00000000  00000000  0003cdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000400f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00041100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c016  00000000  00000000  00041fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017238  00000000  00000000  0006dfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102f58  00000000  00000000  00085226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018817e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  001881d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080096d8 	.word	0x080096d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	080096d8 	.word	0x080096d8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <getBitmapHeader>:
#include "bitmap_driver.h"
#include "string.h"

uint8_t readBuffer[512];

BitmapHeader getBitmapHeader(FIL* file, char* fileName){
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	b0a3      	sub	sp, #140	; 0x8c
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	memset(readBuffer,0,512);
 80005b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b8:	2100      	movs	r1, #0
 80005ba:	4839      	ldr	r0, [pc, #228]	; (80006a0 <getBitmapHeader+0xf8>)
 80005bc:	f008 fc56 	bl	8008e6c <memset>
	uint32_t bytesRead;
	FRESULT res;
	res = f_open(file, fileName, FA_READ);
 80005c0:	2201      	movs	r2, #1
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	68b8      	ldr	r0, [r7, #8]
 80005c6:	f007 fb63 	bl	8007c90 <f_open>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	res = f_read(file, readBuffer, 14 + 40, (UINT*)&bytesRead);
 80005d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005d4:	2236      	movs	r2, #54	; 0x36
 80005d6:	4932      	ldr	r1, [pc, #200]	; (80006a0 <getBitmapHeader+0xf8>)
 80005d8:	68b8      	ldr	r0, [r7, #8]
 80005da:	f007 fd25 	bl	8008028 <f_read>
 80005de:	4603      	mov	r3, r0
 80005e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	BitmapFileHeader bmfh = *(BitmapFileHeader*)&readBuffer[0x00];
 80005e4:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <getBitmapHeader+0xf8>)
 80005e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ea:	4614      	mov	r4, r2
 80005ec:	6820      	ldr	r0, [r4, #0]
 80005ee:	6861      	ldr	r1, [r4, #4]
 80005f0:	68a2      	ldr	r2, [r4, #8]
 80005f2:	c307      	stmia	r3!, {r0, r1, r2}
 80005f4:	89a2      	ldrh	r2, [r4, #12]
 80005f6:	801a      	strh	r2, [r3, #0]
	BitmapInfoHeader bmih = *(BitmapInfoHeader*)&readBuffer[0x0E];
 80005f8:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <getBitmapHeader+0xfc>)
 80005fa:	461c      	mov	r4, r3
 80005fc:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8000600:	f104 0c20 	add.w	ip, r4, #32
 8000604:	4635      	mov	r5, r6
 8000606:	4623      	mov	r3, r4
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	6859      	ldr	r1, [r3, #4]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000612:	3410      	adds	r4, #16
 8000614:	3610      	adds	r6, #16
 8000616:	4564      	cmp	r4, ip
 8000618:	d1f4      	bne.n	8000604 <getBitmapHeader+0x5c>
 800061a:	4633      	mov	r3, r6
 800061c:	4622      	mov	r2, r4
 800061e:	6810      	ldr	r0, [r2, #0]
 8000620:	6851      	ldr	r1, [r2, #4]
 8000622:	c303      	stmia	r3!, {r0, r1}

	f_close(file);
 8000624:	68b8      	ldr	r0, [r7, #8]
 8000626:	f007 fedc 	bl	80083e2 <f_close>

	BitmapHeader bmh = {bmfh,bmih};
 800062a:	f107 0410 	add.w	r4, r7, #16
 800062e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000634:	c407      	stmia	r4!, {r0, r1, r2}
 8000636:	8023      	strh	r3, [r4, #0]
 8000638:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800063c:	f107 0c1e 	add.w	ip, r7, #30
 8000640:	f104 0e20 	add.w	lr, r4, #32
 8000644:	4665      	mov	r5, ip
 8000646:	4626      	mov	r6, r4
 8000648:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800064a:	6028      	str	r0, [r5, #0]
 800064c:	6069      	str	r1, [r5, #4]
 800064e:	60aa      	str	r2, [r5, #8]
 8000650:	60eb      	str	r3, [r5, #12]
 8000652:	3410      	adds	r4, #16
 8000654:	f10c 0c10 	add.w	ip, ip, #16
 8000658:	4574      	cmp	r4, lr
 800065a:	d1f3      	bne.n	8000644 <getBitmapHeader+0x9c>
 800065c:	4662      	mov	r2, ip
 800065e:	4623      	mov	r3, r4
 8000660:	cb03      	ldmia	r3!, {r0, r1}
 8000662:	6010      	str	r0, [r2, #0]
 8000664:	6051      	str	r1, [r2, #4]
	return bmh;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f107 0410 	add.w	r4, r7, #16
 800066c:	469c      	mov	ip, r3
 800066e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000672:	4665      	mov	r5, ip
 8000674:	4626      	mov	r6, r4
 8000676:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000678:	6028      	str	r0, [r5, #0]
 800067a:	6069      	str	r1, [r5, #4]
 800067c:	60aa      	str	r2, [r5, #8]
 800067e:	60eb      	str	r3, [r5, #12]
 8000680:	3410      	adds	r4, #16
 8000682:	f10c 0c10 	add.w	ip, ip, #16
 8000686:	4574      	cmp	r4, lr
 8000688:	d1f3      	bne.n	8000672 <getBitmapHeader+0xca>
 800068a:	4663      	mov	r3, ip
 800068c:	4622      	mov	r2, r4
 800068e:	6810      	ldr	r0, [r2, #0]
 8000690:	6018      	str	r0, [r3, #0]
 8000692:	8892      	ldrh	r2, [r2, #4]
 8000694:	809a      	strh	r2, [r3, #4]
}
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	378c      	adds	r7, #140	; 0x8c
 800069a:	46bd      	mov	sp, r7
 800069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069e:	bf00      	nop
 80006a0:	200002e8 	.word	0x200002e8
 80006a4:	200002f6 	.word	0x200002f6

080006a8 <getImageData>:

uint32_t getImageData(FIL* file, char* fileName, uint32_t offset, uint32_t Npixels, uint8_t* buffer){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
	//memset(readBuffer,0,512);
	uint32_t bytesRead;
	FRESULT res;
	res = f_open(file, fileName, FA_READ);
 80006b6:	2201      	movs	r2, #1
 80006b8:	68b9      	ldr	r1, [r7, #8]
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f007 fae8 	bl	8007c90 <f_open>
 80006c0:	4603      	mov	r3, r0
 80006c2:	75fb      	strb	r3, [r7, #23]
	res = f_lseek(file, 14 + 40 + offset);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3336      	adds	r3, #54	; 0x36
 80006c8:	4619      	mov	r1, r3
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f007 feb3 	bl	8008436 <f_lseek>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
	res = f_read(file, buffer, Npixels * 3, &bytesRead);
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	441a      	add	r2, r3
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	6a39      	ldr	r1, [r7, #32]
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f007 fca0 	bl	8008028 <f_read>
 80006e8:	4603      	mov	r3, r0
 80006ea:	75fb      	strb	r3, [r7, #23]
	f_close(file);
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f007 fe78 	bl	80083e2 <f_close>

	return bytesRead;
 80006f2:	693b      	ldr	r3, [r7, #16]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <fillImageBuffer>:

void fillImageBuffer(FIL* file, char* fileName, uint8_t* buffer){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b096      	sub	sp, #88	; 0x58
 8000700:	af02      	add	r7, sp, #8
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	BitmapHeader header = getBitmapHeader(file,fileName);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	68f9      	ldr	r1, [r7, #12]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff49 	bl	80005a8 <getBitmapHeader>
	for (int i = header.bmih.height-1; i >= 0; i--){
 8000716:	f8d7 302a 	ldr.w	r3, [r7, #42]	; 0x2a
 800071a:	3b01      	subs	r3, #1
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800071e:	e01e      	b.n	800075e <fillImageBuffer+0x62>
		getImageData(file,fileName, i * header.bmih.width * 3, header.bmih.width , buffer);
 8000720:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 8000724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000726:	fb02 f203 	mul.w	r2, r2, r3
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	461a      	mov	r2, r3
 8000732:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 8000736:	4619      	mov	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	460b      	mov	r3, r1
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff ffb1 	bl	80006a8 <getImageData>
		buffer += header.bmih.width*3;
 8000746:	f8d7 2026 	ldr.w	r2, [r7, #38]	; 0x26
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
	for (int i = header.bmih.height-1; i >= 0; i--){
 8000758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800075a:	3b01      	subs	r3, #1
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800075e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000760:	2b00      	cmp	r3, #0
 8000762:	dadd      	bge.n	8000720 <fillImageBuffer+0x24>
	}
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <clearUartBuffer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char uartbuffer[128];

void clearUartBuffer(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	memset(uartbuffer,0,128);
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	2100      	movs	r1, #0
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <clearUartBuffer+0x14>)
 800077a:	f008 fb77 	bl	8008e6c <memset>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000066c 	.word	0x2000066c

08000788 <send_uart>:

void send_uart(char* string){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fd35 	bl	8000200 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&hlpuart1, string, len, 1000);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	b29a      	uxth	r2, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <send_uart+0x30>)
 80007a6:	f003 ff3d 	bl	8004624 <HAL_UART_Transmit>
	clearUartBuffer();
 80007aa:	f7ff ffe1 	bl	8000770 <clearUartBuffer>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000578 	.word	0x20000578

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	f5ad 4d35 	sub.w	sp, sp, #46336	; 0xb500
 80007c2:	b08f      	sub	sp, #60	; 0x3c
 80007c4:	af00      	add	r7, sp, #0
	DWORD fre_clu;
	BitmapHeader bmh;

	uint8_t pixelBuffer[37632];

	memset(pixelBuffer,0,37632);
 80007c6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80007ca:	3bb0      	subs	r3, #176	; 0xb0
 80007cc:	f44f 4213 	mov.w	r2, #37632	; 0x9300
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f008 fb4a 	bl	8008e6c <memset>
	memset(&bmh,0,sizeof(BitmapHeader));
 80007d8:	f507 4314 	add.w	r3, r7, #37888	; 0x9400
 80007dc:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80007e0:	3b30      	subs	r3, #48	; 0x30
 80007e2:	2236      	movs	r2, #54	; 0x36
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f008 fb40 	bl	8008e6c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f001 f92d 	bl	8001a4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f90c 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 fa32 	bl	8000c5c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80007f8:	f000 f95a 	bl	8000ab0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80007fc:	f000 f9a4 	bl	8000b48 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000800:	f000 f9ee 	bl	8000be0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000804:	f004 fd26 	bl	8005254 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */



  res = f_mount(&fs,"0", 0);
 8000808:	f507 4314 	add.w	r3, r7, #37888	; 0x9400
 800080c:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 8000810:	3b34      	subs	r3, #52	; 0x34
 8000812:	2200      	movs	r2, #0
 8000814:	4972      	ldr	r1, [pc, #456]	; (80009e0 <main+0x224>)
 8000816:	4618      	mov	r0, r3
 8000818:	f007 f9f4 	bl	8007c04 <f_mount>
 800081c:	4603      	mov	r3, r0
 800081e:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 8000822:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000826:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK){
 8000828:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 800082c:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d003      	beq.n	800083e <main+0x82>
	  send_uart("Error mounting filesystem\n");
 8000836:	486b      	ldr	r0, [pc, #428]	; (80009e4 <main+0x228>)
 8000838:	f7ff ffa6 	bl	8000788 <send_uart>
 800083c:	e002      	b.n	8000844 <main+0x88>
  } else {
	  send_uart("filesystem mounted\n");
 800083e:	486a      	ldr	r0, [pc, #424]	; (80009e8 <main+0x22c>)
 8000840:	f7ff ffa2 	bl	8000788 <send_uart>
  }
  res = f_getfree("0", &fre_clu, &fs);
 8000844:	f507 4214 	add.w	r2, r7, #37888	; 0x9400
 8000848:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 800084c:	3a34      	subs	r2, #52	; 0x34
 800084e:	f507 4314 	add.w	r3, r7, #37888	; 0x9400
 8000852:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 8000856:	3b38      	subs	r3, #56	; 0x38
 8000858:	4619      	mov	r1, r3
 800085a:	4861      	ldr	r0, [pc, #388]	; (80009e0 <main+0x224>)
 800085c:	f008 f905 	bl	8008a6a <f_getfree>
 8000860:	4603      	mov	r3, r0
 8000862:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 8000866:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800086a:	7013      	strb	r3, [r2, #0]
  sprintf(uartbuffer, "f_getfree result: %d\n",res);
 800086c:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 8000870:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	495c      	ldr	r1, [pc, #368]	; (80009ec <main+0x230>)
 800087a:	485d      	ldr	r0, [pc, #372]	; (80009f0 <main+0x234>)
 800087c:	f008 fafe 	bl	8008e7c <siprintf>
  send_uart(uartbuffer);
 8000880:	485b      	ldr	r0, [pc, #364]	; (80009f0 <main+0x234>)
 8000882:	f7ff ff81 	bl	8000788 <send_uart>
  total = (fs.n_fatent - 2) * fs.csize;
 8000886:	f507 4314 	add.w	r3, r7, #37888	; 0x9400
 800088a:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 800088e:	3b34      	subs	r3, #52	; 0x34
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	1e9a      	subs	r2, r3, #2
 8000894:	f507 4314 	add.w	r3, r7, #37888	; 0x9400
 8000898:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 800089c:	3b34      	subs	r3, #52	; 0x34
 800089e:	895b      	ldrh	r3, [r3, #10]
 80008a0:	fb03 f302 	mul.w	r3, r3, r2
 80008a4:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80008a8:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80008ac:	6013      	str	r3, [r2, #0]
  free_space = fre_clu * fs.csize;
 80008ae:	f507 4314 	add.w	r3, r7, #37888	; 0x9400
 80008b2:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 80008b6:	3b34      	subs	r3, #52	; 0x34
 80008b8:	895b      	ldrh	r3, [r3, #10]
 80008ba:	461a      	mov	r2, r3
 80008bc:	f507 4314 	add.w	r3, r7, #37888	; 0x9400
 80008c0:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 80008c4:	3b38      	subs	r3, #56	; 0x38
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	fb03 f302 	mul.w	r3, r3, r2
 80008cc:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80008d0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80008d4:	6013      	str	r3, [r2, #0]
  sprintf(uartbuffer, "%10lu KiB total drive space.\n%10lu KiB available.\n", total / 2, free_space / 2);
 80008d6:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 80008da:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	085a      	lsrs	r2, r3, #1
 80008e2:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 80008e6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	4941      	ldr	r1, [pc, #260]	; (80009f4 <main+0x238>)
 80008f0:	483f      	ldr	r0, [pc, #252]	; (80009f0 <main+0x234>)
 80008f2:	f008 fac3 	bl	8008e7c <siprintf>
  send_uart(uartbuffer);
 80008f6:	483e      	ldr	r0, [pc, #248]	; (80009f0 <main+0x234>)
 80008f8:	f7ff ff46 	bl	8000788 <send_uart>

  res = f_mount(&fs,"0", 0);
 80008fc:	f507 4314 	add.w	r3, r7, #37888	; 0x9400
 8000900:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 8000904:	3b34      	subs	r3, #52	; 0x34
 8000906:	2200      	movs	r2, #0
 8000908:	4935      	ldr	r1, [pc, #212]	; (80009e0 <main+0x224>)
 800090a:	4618      	mov	r0, r3
 800090c:	f007 f97a 	bl	8007c04 <f_mount>
 8000910:	4603      	mov	r3, r0
 8000912:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 8000916:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800091a:	7013      	strb	r3, [r2, #0]
  bmh = getBitmapHeader(&file, "MonkaS.bmp");
 800091c:	f507 4514 	add.w	r5, r7, #37888	; 0x9400
 8000920:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
 8000924:	3d30      	subs	r5, #48	; 0x30
 8000926:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800092a:	3b38      	subs	r3, #56	; 0x38
 800092c:	f507 4125 	add.w	r1, r7, #42240	; 0xa500
 8000930:	f101 0118 	add.w	r1, r1, #24
 8000934:	391c      	subs	r1, #28
 8000936:	4a30      	ldr	r2, [pc, #192]	; (80009f8 <main+0x23c>)
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe35 	bl	80005a8 <getBitmapHeader>
 800093e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000942:	3b38      	subs	r3, #56	; 0x38
 8000944:	461c      	mov	r4, r3
 8000946:	462e      	mov	r6, r5
 8000948:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800094c:	4635      	mov	r5, r6
 800094e:	4623      	mov	r3, r4
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	6859      	ldr	r1, [r3, #4]
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800095a:	3410      	adds	r4, #16
 800095c:	3610      	adds	r6, #16
 800095e:	4564      	cmp	r4, ip
 8000960:	d1f4      	bne.n	800094c <main+0x190>
 8000962:	4633      	mov	r3, r6
 8000964:	4622      	mov	r2, r4
 8000966:	6810      	ldr	r0, [r2, #0]
 8000968:	6018      	str	r0, [r3, #0]
 800096a:	8892      	ldrh	r2, [r2, #4]
 800096c:	809a      	strh	r2, [r3, #4]

  //res = getImageData(&file, "MonkaS.bmp", 0, 128, (uint8_t*)pixelBuffer);
  fillImageBuffer(&file, "MonkaS.bmp",pixelBuffer);
 800096e:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8000972:	3ab0      	subs	r2, #176	; 0xb0
 8000974:	f507 4325 	add.w	r3, r7, #42240	; 0xa500
 8000978:	f103 0318 	add.w	r3, r3, #24
 800097c:	3b1c      	subs	r3, #28
 800097e:	491e      	ldr	r1, [pc, #120]	; (80009f8 <main+0x23c>)
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff febb 	bl	80006fc <fillImageBuffer>


  DIR dj;
  FILINFO fno;
  res = f_findfirst(&dj, &fno, "", "*.bmp");
 8000986:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800098a:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800098e:	38e8      	subs	r0, #232	; 0xe8
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <main+0x240>)
 8000992:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <main+0x244>)
 8000994:	f008 f84b 	bl	8008a2e <f_findfirst>
 8000998:	4603      	mov	r3, r0
 800099a:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 800099e:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80009a2:	7013      	strb	r3, [r2, #0]
  sprintf(uartbuffer, "f_findfirst result: %d\n",res);
 80009a4:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 80009a8:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4914      	ldr	r1, [pc, #80]	; (8000a04 <main+0x248>)
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <main+0x234>)
 80009b4:	f008 fa62 	bl	8008e7c <siprintf>
  send_uart(uartbuffer);
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <main+0x234>)
 80009ba:	f7ff fee5 	bl	8000788 <send_uart>
  sprintf(uartbuffer,"%s\n", fno.fname);
 80009be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c2:	3316      	adds	r3, #22
 80009c4:	461a      	mov	r2, r3
 80009c6:	4910      	ldr	r1, [pc, #64]	; (8000a08 <main+0x24c>)
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <main+0x234>)
 80009ca:	f008 fa57 	bl	8008e7c <siprintf>
  send_uart(uartbuffer);
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <main+0x234>)
 80009d0:	f7ff feda 	bl	8000788 <send_uart>

  f_mount(NULL, "0", 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	4902      	ldr	r1, [pc, #8]	; (80009e0 <main+0x224>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f007 f913 	bl	8007c04 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009de:	e7fe      	b.n	80009de <main+0x222>
 80009e0:	080096f0 	.word	0x080096f0
 80009e4:	080096f4 	.word	0x080096f4
 80009e8:	08009710 	.word	0x08009710
 80009ec:	08009724 	.word	0x08009724
 80009f0:	2000066c 	.word	0x2000066c
 80009f4:	0800973c 	.word	0x0800973c
 80009f8:	08009770 	.word	0x08009770
 80009fc:	0800977c 	.word	0x0800977c
 8000a00:	08009784 	.word	0x08009784
 8000a04:	08009788 	.word	0x08009788
 8000a08:	080097a0 	.word	0x080097a0

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b096      	sub	sp, #88	; 0x58
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2244      	movs	r2, #68	; 0x44
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f008 fa26 	bl	8008e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f001 fb6e 	bl	8002110 <HAL_PWREx_ControlVoltageScaling>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a3a:	f000 f9d3 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a50:	2302      	movs	r3, #2
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a58:	231e      	movs	r3, #30
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fc03 	bl	8002278 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000a78:	f000 f9b4 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2303      	movs	r3, #3
 8000a82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	2105      	movs	r1, #5
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 f814 	bl	8002ac4 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aa2:	f000 f99f 	bl	8000de4 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3758      	adds	r7, #88	; 0x58
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <MX_LPUART1_UART_Init+0x94>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000af8:	4811      	ldr	r0, [pc, #68]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000afa:	f003 fd43 	bl	8004584 <HAL_UART_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 f96e 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000b0c:	f004 fad8 	bl	80050c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b16:	f000 f965 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000b1e:	f004 fb0d 	bl	800513c <HAL_UARTEx_SetRxFifoThreshold>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f000 f95c 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_LPUART1_UART_Init+0x90>)
 8000b2e:	f004 fa8e 	bl	800504e <HAL_UARTEx_DisableFifoMode>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b38:	f000 f954 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000578 	.word	0x20000578
 8000b44:	40008000 	.word	0x40008000

08000b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <MX_USART3_UART_Init+0x94>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b90:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000b92:	f003 fcf7 	bl	8004584 <HAL_UART_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b9c:	f000 f922 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000ba4:	f004 fa8c 	bl	80050c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bae:	f000 f919 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000bb6:	f004 fac1 	bl	800513c <HAL_UARTEx_SetRxFifoThreshold>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc0:	f000 f910 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_USART3_UART_Init+0x90>)
 8000bc6:	f004 fa42 	bl	800504e <HAL_UARTEx_DisableFifoMode>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd0:	f000 f908 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200004e8 	.word	0x200004e8
 8000bdc:	40004800 	.word	0x40004800

08000be0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000be6:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <MX_SPI1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000bfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c16:	2220      	movs	r2, #32
 8000c18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c2e:	2207      	movs	r2, #7
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_SPI1_Init+0x74>)
 8000c40:	f002 ff0a 	bl	8003a58 <HAL_SPI_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 f8cb 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000608 	.word	0x20000608
 8000c58:	40013000 	.word	0x40013000

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a57      	ldr	r2, [pc, #348]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a51      	ldr	r2, [pc, #324]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b4f      	ldr	r3, [pc, #316]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a4b      	ldr	r2, [pc, #300]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cea:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a39      	ldr	r2, [pc, #228]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000d02:	f001 faa9 	bl	8002258 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d0c:	4832      	ldr	r0, [pc, #200]	; (8000dd8 <MX_GPIO_Init+0x17c>)
 8000d0e:	f001 f9ad 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2120      	movs	r1, #32
 8000d16:	4831      	ldr	r0, [pc, #196]	; (8000ddc <MX_GPIO_Init+0x180>)
 8000d18:	f001 f9a8 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	482b      	ldr	r0, [pc, #172]	; (8000de0 <MX_GPIO_Init+0x184>)
 8000d34:	f001 f808 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d38:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4821      	ldr	r0, [pc, #132]	; (8000dd8 <MX_GPIO_Init+0x17c>)
 8000d52:	f000 fff9 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d56:	2320      	movs	r3, #32
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <MX_GPIO_Init+0x180>)
 8000d6e:	f000 ffeb 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d72:	2340      	movs	r3, #64	; 0x40
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4815      	ldr	r0, [pc, #84]	; (8000ddc <MX_GPIO_Init+0x180>)
 8000d86:	f000 ffdf 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d8a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d9c:	230a      	movs	r3, #10
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 ffcd 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f000 ffbf 	bl	8001d48 <HAL_GPIO_Init>

}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	48001800 	.word	0x48001800
 8000de0:	48000800 	.word	0x48000800

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <Error_Handler+0x1c>)
 8000df0:	f001 f954 	bl	800209c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df8:	f000 fe9c 	bl	8001b34 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000dfc:	e7f6      	b.n	8000dec <Error_Handler+0x8>
 8000dfe:	bf00      	nop
 8000e00:	48000400 	.word	0x48000400

08000e04 <select>:
static volatile uint8_t PowerFlag = 0;
static uint8_t CardType;
volatile uint8_t SDHC_flag;


static void select(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f001 f92c 	bl	800206c <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <deselect>:

static void deselect(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2104      	movs	r1, #4
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f001 f922 	bl	800206c <HAL_GPIO_WritePin>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <spi_txByte>:

static HAL_StatusTypeDef spi_txByte(uint8_t data){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]

	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000e36:	bf00      	nop
 8000e38:	4808      	ldr	r0, [pc, #32]	; (8000e5c <spi_txByte+0x30>)
 8000e3a:	f003 fa31 	bl	80042a0 <HAL_SPI_GetState>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d1f9      	bne.n	8000e38 <spi_txByte+0xc>
	return HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <spi_txByte+0x30>)
 8000e4e:	f002 fea6 	bl	8003b9e <HAL_SPI_Transmit>
 8000e52:	4603      	mov	r3, r0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000608 	.word	0x20000608

08000e60 <spi_rxByte>:

static uint8_t spi_rxByte(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 8000e6a:	23ff      	movs	r3, #255	; 0xff
 8000e6c:	71bb      	strb	r3, [r7, #6]
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000e6e:	bf00      	nop
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <spi_rxByte+0x38>)
 8000e72:	f003 fa15 	bl	80042a0 <HAL_SPI_GetState>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d1f9      	bne.n	8000e70 <spi_rxByte+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000e7c:	1dfa      	adds	r2, r7, #7
 8000e7e:	1db9      	adds	r1, r7, #6
 8000e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <spi_rxByte+0x38>)
 8000e8a:	f002 fff6 	bl	8003e7a <HAL_SPI_TransmitReceive>
	return data;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000608 	.word	0x20000608

08000e9c <SD_ReadyWait>:

static uint8_t SD_ReadyWait(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  uint8_t res;
  spi_rxByte();
 8000ea2:	f7ff ffdd 	bl	8000e60 <spi_rxByte>

  do
  {
    res = spi_rxByte();
 8000ea6:	f7ff ffdb 	bl	8000e60 <spi_rxByte>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2bff      	cmp	r3, #255	; 0xff
 8000eb2:	d1f8      	bne.n	8000ea6 <SD_ReadyWait+0xa>

  return res;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <SD_sendCommand>:

static uint8_t SD_sendCommand(uint8_t cmd, uint32_t arg){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t resp;

	if(cmd == CMD17 || cmd == CMD18 || cmd == CMD24 || cmd == CMD25 || cmd == CMD32 || cmd == CMD33) {
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b51      	cmp	r3, #81	; 0x51
 8000ed0:	d00e      	beq.n	8000ef0 <SD_sendCommand+0x30>
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b52      	cmp	r3, #82	; 0x52
 8000ed6:	d00b      	beq.n	8000ef0 <SD_sendCommand+0x30>
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b58      	cmp	r3, #88	; 0x58
 8000edc:	d008      	beq.n	8000ef0 <SD_sendCommand+0x30>
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b59      	cmp	r3, #89	; 0x59
 8000ee2:	d005      	beq.n	8000ef0 <SD_sendCommand+0x30>
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b60      	cmp	r3, #96	; 0x60
 8000ee8:	d002      	beq.n	8000ef0 <SD_sendCommand+0x30>
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b61      	cmp	r3, #97	; 0x61
 8000eee:	d102      	bne.n	8000ef6 <SD_sendCommand+0x36>
		arg = arg << 9;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	025b      	lsls	r3, r3, #9
 8000ef4:	603b      	str	r3, [r7, #0]
	}

	select();
 8000ef6:	f7ff ff85 	bl	8000e04 <select>
	spi_txByte(cmd | 0b01000000);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff92 	bl	8000e2c <spi_txByte>
	spi_txByte(arg >> 24);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	0e1b      	lsrs	r3, r3, #24
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff8c 	bl	8000e2c <spi_txByte>
	spi_txByte(arg >> 16);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff86 	bl	8000e2c <spi_txByte>
	spi_txByte(arg >> 8);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff80 	bl	8000e2c <spi_txByte>
	spi_txByte(arg >> 0);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff7b 	bl	8000e2c <spi_txByte>

	if(cmd == CMD8){
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b48      	cmp	r3, #72	; 0x48
 8000f3a:	d103      	bne.n	8000f44 <SD_sendCommand+0x84>
		spi_txByte(0x87);
 8000f3c:	2087      	movs	r0, #135	; 0x87
 8000f3e:	f7ff ff75 	bl	8000e2c <spi_txByte>
 8000f42:	e002      	b.n	8000f4a <SD_sendCommand+0x8a>
	} else {
		spi_txByte(0x95);
 8000f44:	2095      	movs	r0, #149	; 0x95
 8000f46:	f7ff ff71 	bl	8000e2c <spi_txByte>
	}

	while ((resp = spi_rxByte()) == 0xff){}
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ff88 	bl	8000e60 <spi_rxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d0f8      	beq.n	8000f4c <SD_sendCommand+0x8c>
		if (resp == 0 && cmd == CMD58){
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d116      	bne.n	8000f8e <SD_sendCommand+0xce>
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b7a      	cmp	r3, #122	; 0x7a
 8000f64:	d113      	bne.n	8000f8e <SD_sendCommand+0xce>
			uint8_t status = spi_rxByte();
 8000f66:	f7ff ff7b 	bl	8000e60 <spi_rxByte>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73bb      	strb	r3, [r7, #14]
			if(status == 0x40){
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	2b40      	cmp	r3, #64	; 0x40
 8000f72:	d103      	bne.n	8000f7c <SD_sendCommand+0xbc>
				SDHC_flag = 1;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <SD_sendCommand+0xf4>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e002      	b.n	8000f82 <SD_sendCommand+0xc2>
			} else {
				SDHC_flag = 0;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <SD_sendCommand+0xf4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
			}
			spi_rxByte();
 8000f82:	f7ff ff6d 	bl	8000e60 <spi_rxByte>
			spi_rxByte();
 8000f86:	f7ff ff6b 	bl	8000e60 <spi_rxByte>
			spi_rxByte();
 8000f8a:	f7ff ff69 	bl	8000e60 <spi_rxByte>
		}

	if(cmd == CMD38){
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b66      	cmp	r3, #102	; 0x66
 8000f92:	d105      	bne.n	8000fa0 <SD_sendCommand+0xe0>
		while (spi_rxByte() == 0);
 8000f94:	bf00      	nop
 8000f96:	f7ff ff63 	bl	8000e60 <spi_rxByte>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0fa      	beq.n	8000f96 <SD_sendCommand+0xd6>
	}
	spi_rxByte();
 8000fa0:	f7ff ff5e 	bl	8000e60 <spi_rxByte>
	deselect();
 8000fa4:	f7ff ff38 	bl	8000e18 <deselect>
	return resp;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200006ec 	.word	0x200006ec

08000fb8 <SD_getCSD>:

//get the Card-specifier data register, used for IOCTL for disk
DSTATUS SD_getCSD(BYTE pdrv, uint8_t* csd){
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
	uint8_t resp = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	72fb      	strb	r3, [r7, #11]

	resp = SD_sendCommand(CMD9, 0);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2049      	movs	r0, #73	; 0x49
 8000fcc:	f7ff ff78 	bl	8000ec0 <SD_sendCommand>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	72fb      	strb	r3, [r7, #11]

	if(resp != 0){
 8000fd4:	7afb      	ldrb	r3, [r7, #11]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SD_getCSD+0x26>
		return resp;
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	e020      	b.n	8001020 <SD_getCSD+0x68>
	}

	select();
 8000fde:	f7ff ff11 	bl	8000e04 <select>

	while(spi_rxByte() != TOKEN);
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ff3c 	bl	8000e60 <spi_rxByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2bfe      	cmp	r3, #254	; 0xfe
 8000fec:	d1fa      	bne.n	8000fe4 <SD_getCSD+0x2c>

	for(int i = 0 ; i<16; i++){
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e009      	b.n	8001008 <SD_getCSD+0x50>
		csd[i] = spi_rxByte();
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	18d4      	adds	r4, r2, r3
 8000ffa:	f7ff ff31 	bl	8000e60 <spi_rxByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
	for(int i = 0 ; i<16; i++){
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	ddf2      	ble.n	8000ff4 <SD_getCSD+0x3c>
	}

	spi_rxByte();
 800100e:	f7ff ff27 	bl	8000e60 <spi_rxByte>
	spi_rxByte();
 8001012:	f7ff ff25 	bl	8000e60 <spi_rxByte>
	spi_rxByte();
 8001016:	f7ff ff23 	bl	8000e60 <spi_rxByte>

	deselect();
 800101a:	f7ff fefd 	bl	8000e18 <deselect>

	return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <SD_PowerOn>:

static void SD_PowerOn(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800102e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001032:	617b      	str	r3, [r7, #20]

  deselect();
 8001034:	f7ff fef0 	bl	8000e18 <deselect>

  for(int i = 0; i < 10; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	e005      	b.n	800104a <SD_PowerOn+0x22>
  {
	  spi_txByte(0xFF);
 800103e:	20ff      	movs	r0, #255	; 0xff
 8001040:	f7ff fef4 	bl	8000e2c <spi_txByte>
  for(int i = 0; i < 10; i++)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	3301      	adds	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b09      	cmp	r3, #9
 800104e:	ddf6      	ble.n	800103e <SD_PowerOn+0x16>
  }

  select();
 8001050:	f7ff fed8 	bl	8000e04 <select>

  cmd_arg[0] = (CMD0 | 0x40);
 8001054:	2340      	movs	r3, #64	; 0x40
 8001056:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001068:	2395      	movs	r3, #149	; 0x95
 800106a:	727b      	strb	r3, [r7, #9]

  for (int i = 0; i < 6; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e009      	b.n	8001086 <SD_PowerOn+0x5e>
  {
	  spi_txByte(cmd_arg[i]);
 8001072:	1d3a      	adds	r2, r7, #4
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fed6 	bl	8000e2c <spi_txByte>
  for (int i = 0; i < 6; i++)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b05      	cmp	r3, #5
 800108a:	ddf2      	ble.n	8001072 <SD_PowerOn+0x4a>
  }

  while ((spi_rxByte() != 0x01) && Count)
 800108c:	e002      	b.n	8001094 <SD_PowerOn+0x6c>
  {
    Count--;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3b01      	subs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  while ((spi_rxByte() != 0x01) && Count)
 8001094:	f7ff fee4 	bl	8000e60 <spi_rxByte>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d002      	beq.n	80010a4 <SD_PowerOn+0x7c>
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f4      	bne.n	800108e <SD_PowerOn+0x66>
  }

  deselect();
 80010a4:	f7ff feb8 	bl	8000e18 <deselect>
  spi_txByte(0XFF);
 80010a8:	20ff      	movs	r0, #255	; 0xff
 80010aa:	f7ff febf 	bl	8000e2c <spi_txByte>

  PowerFlag = 1;
 80010ae:	4b03      	ldr	r3, [pc, #12]	; (80010bc <SD_PowerOn+0x94>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000a4 	.word	0x200000a4

080010c0 <SD_PowerOff>:

static void SD_PowerOff(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <SD_PowerOff+0x14>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	200000a4 	.word	0x200000a4

080010d8 <SD_init>:

DSTATUS SD_init(BYTE drv) {
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	BYTE n, success, ocr[4];

	// drv > 0 is multiple drives and not supported
	if (drv)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SD_init+0x14>
		return STA_NOINIT;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0ca      	b.n	8001282 <SD_init+0x1aa>

	SD_PowerOn();
 80010ec:	f7ff ff9c 	bl	8001028 <SD_PowerOn>

	select();
 80010f0:	f7ff fe88 	bl	8000e04 <select>
	success = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73bb      	strb	r3, [r7, #14]
	//try and go into idle state
	if (SD_sendCommand(CMD0, 0) == 1) {
 80010f8:	2100      	movs	r1, #0
 80010fa:	2040      	movs	r0, #64	; 0x40
 80010fc:	f7ff fee0 	bl	8000ec0 <SD_sendCommand>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	f040 80a5 	bne.w	8001252 <SD_init+0x17a>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <SD_init+0x1b4>)
 800110a:	2264      	movs	r2, #100	; 0x64
 800110c:	701a      	strb	r2, [r3, #0]
		if (SD_sendCommand(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 800110e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001112:	2048      	movs	r0, #72	; 0x48
 8001114:	f7ff fed4 	bl	8000ec0 <SD_sendCommand>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d158      	bne.n	80011d0 <SD_init+0xf8>
			for (n = 0; n < 4; n++)
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e00c      	b.n	800113e <SD_init+0x66>
				ocr[n] = spi_rxByte();
 8001124:	7bfc      	ldrb	r4, [r7, #15]
 8001126:	f7ff fe9b 	bl	8000e60 <spi_rxByte>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4423      	add	r3, r4
 8001134:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	3301      	adds	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d9ef      	bls.n	8001124 <SD_init+0x4c>
			if (ocr[1] == 0x01 && ocr[2] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8001144:	7a7b      	ldrb	r3, [r7, #9]
 8001146:	2b01      	cmp	r3, #1
 8001148:	f040 8083 	bne.w	8001252 <SD_init+0x17a>
 800114c:	7abb      	ldrb	r3, [r7, #10]
 800114e:	2baa      	cmp	r3, #170	; 0xaa
 8001150:	d17f      	bne.n	8001252 <SD_init+0x17a>
				do {
					if (SD_sendCommand(CMD55, 0) <= 1
 8001152:	2100      	movs	r1, #0
 8001154:	2077      	movs	r0, #119	; 0x77
 8001156:	f7ff feb3 	bl	8000ec0 <SD_sendCommand>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d807      	bhi.n	8001170 <SD_init+0x98>
							&& SD_sendCommand(CMD41, 1UL << 30) == 0)
 8001160:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001164:	2069      	movs	r0, #105	; 0x69
 8001166:	f7ff feab 	bl	8000ec0 <SD_sendCommand>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <SD_init+0xa4>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001170:	4b46      	ldr	r3, [pc, #280]	; (800128c <SD_init+0x1b4>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1eb      	bne.n	8001152 <SD_init+0x7a>
 800117a:	e000      	b.n	800117e <SD_init+0xa6>
						break; /* ACMD41 with HCS bit */
 800117c:	bf00      	nop
				if (Timer1 && SD_sendCommand(CMD58, 0) == 0) { /* Check CCS bit */
 800117e:	4b43      	ldr	r3, [pc, #268]	; (800128c <SD_init+0x1b4>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d064      	beq.n	8001252 <SD_init+0x17a>
 8001188:	2100      	movs	r1, #0
 800118a:	207a      	movs	r0, #122	; 0x7a
 800118c:	f7ff fe98 	bl	8000ec0 <SD_sendCommand>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d15d      	bne.n	8001252 <SD_init+0x17a>
					for (n = 0; n < 4; n++)
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e00c      	b.n	80011b6 <SD_init+0xde>
						ocr[n] = spi_rxByte();
 800119c:	7bfc      	ldrb	r4, [r7, #15]
 800119e:	f7ff fe5f 	bl	8000e60 <spi_rxByte>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4423      	add	r3, r4
 80011ac:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	3301      	adds	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d9ef      	bls.n	800119c <SD_init+0xc4>
					success = (ocr[0] & 0x40) ? 6 : 2;
 80011bc:	7a3b      	ldrb	r3, [r7, #8]
 80011be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SD_init+0xf2>
 80011c6:	2306      	movs	r3, #6
 80011c8:	e000      	b.n	80011cc <SD_init+0xf4>
 80011ca:	2302      	movs	r3, #2
 80011cc:	73bb      	strb	r3, [r7, #14]
 80011ce:	e040      	b.n	8001252 <SD_init+0x17a>
				}
			}
		} else { /* SDC Ver1 or MMC */
			success = (SD_sendCommand(CMD55, 0) <= 1 && SD_sendCommand(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80011d0:	2100      	movs	r1, #0
 80011d2:	2077      	movs	r0, #119	; 0x77
 80011d4:	f7ff fe74 	bl	8000ec0 <SD_sendCommand>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d808      	bhi.n	80011f0 <SD_init+0x118>
 80011de:	2100      	movs	r1, #0
 80011e0:	2069      	movs	r0, #105	; 0x69
 80011e2:	f7ff fe6d 	bl	8000ec0 <SD_sendCommand>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d801      	bhi.n	80011f0 <SD_init+0x118>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e000      	b.n	80011f2 <SD_init+0x11a>
 80011f0:	2301      	movs	r3, #1
 80011f2:	73bb      	strb	r3, [r7, #14]
			do {
				if (success == 2) {
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d10e      	bne.n	8001218 <SD_init+0x140>
					if (SD_sendCommand(CMD55, 0) <= 1 && SD_sendCommand(CMD41, 0) == 0)
 80011fa:	2100      	movs	r1, #0
 80011fc:	2077      	movs	r0, #119	; 0x77
 80011fe:	f7ff fe5f 	bl	8000ec0 <SD_sendCommand>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d80e      	bhi.n	8001226 <SD_init+0x14e>
 8001208:	2100      	movs	r1, #0
 800120a:	2069      	movs	r0, #105	; 0x69
 800120c:	f7ff fe58 	bl	8000ec0 <SD_sendCommand>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d107      	bne.n	8001226 <SD_init+0x14e>
						break; /* ACMD41 */
 8001216:	e00d      	b.n	8001234 <SD_init+0x15c>
				} else {
					if (SD_sendCommand(CMD1, 0) == 0)
 8001218:	2100      	movs	r1, #0
 800121a:	2041      	movs	r0, #65	; 0x41
 800121c:	f7ff fe50 	bl	8000ec0 <SD_sendCommand>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <SD_init+0x15a>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <SD_init+0x1b4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e1      	bne.n	80011f4 <SD_init+0x11c>
 8001230:	e000      	b.n	8001234 <SD_init+0x15c>
						break; /* CMD1 */
 8001232:	bf00      	nop
			if (!Timer1 || SD_sendCommand(CMD16, 512) != 0) /* Select R/W block length */
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <SD_init+0x1b4>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <SD_init+0x176>
 800123e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001242:	2050      	movs	r0, #80	; 0x50
 8001244:	f7ff fe3c 	bl	8000ec0 <SD_sendCommand>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SD_init+0x17a>
				success = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = success;
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <SD_init+0x1b8>)
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	7013      	strb	r3, [r2, #0]
	deselect();
 8001258:	f7ff fdde 	bl	8000e18 <deselect>
	spi_rxByte();
 800125c:	f7ff fe00 	bl	8000e60 <spi_rxByte>


	if (success)
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d008      	beq.n	8001278 <SD_init+0x1a0>
		Stat &= ~STA_NOINIT;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <SD_init+0x1bc>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <SD_init+0x1bc>)
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e001      	b.n	800127c <SD_init+0x1a4>
	else
		/* Initialization failed */
		SD_PowerOff();
 8001278:	f7ff ff22 	bl	80010c0 <SD_PowerOff>

	return Stat;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SD_init+0x1bc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	200006ee 	.word	0x200006ee
 8001290:	200000a5 	.word	0x200000a5
 8001294:	20000000 	.word	0x20000000

08001298 <SD_status>:

DSTATUS SD_status(BYTE pdrv){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	  if (pdrv)
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SD_status+0x14>
	    return STA_NOINIT;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e002      	b.n	80012b2 <SD_status+0x1a>

	  return Stat;
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SD_status+0x28>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000

080012c4 <SD_read>:

DSTATUS SD_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
	uint8_t resp = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]

	for (int j = 0; j<count; j++){
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	e02c      	b.n	8001338 <SD_read+0x74>
		resp = SD_sendCommand(CMD17, sector);
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	2051      	movs	r0, #81	; 0x51
 80012e2:	f7ff fded 	bl	8000ec0 <SD_sendCommand>
 80012e6:	4603      	mov	r3, r0
 80012e8:	75fb      	strb	r3, [r7, #23]

		if(resp != 0){
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SD_read+0x30>
			return resp;
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	e02a      	b.n	800134a <SD_read+0x86>
		}

		select();
 80012f4:	f7ff fd86 	bl	8000e04 <select>

		while(spi_rxByte() != TOKEN);
 80012f8:	bf00      	nop
 80012fa:	f7ff fdb1 	bl	8000e60 <spi_rxByte>
 80012fe:	4603      	mov	r3, r0
 8001300:	2bfe      	cmp	r3, #254	; 0xfe
 8001302:	d1fa      	bne.n	80012fa <SD_read+0x36>

		for(int i = 0 ; i<BLOCK_SIZE; i++){
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e00b      	b.n	8001322 <SD_read+0x5e>
			*buff = spi_rxByte();
 800130a:	f7ff fda9 	bl	8000e60 <spi_rxByte>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	701a      	strb	r2, [r3, #0]
			buff++;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3301      	adds	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
		for(int i = 0 ; i<BLOCK_SIZE; i++){
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3301      	adds	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001328:	dbef      	blt.n	800130a <SD_read+0x46>
		}

		spi_rxByte();
 800132a:	f7ff fd99 	bl	8000e60 <spi_rxByte>
		spi_rxByte();
 800132e:	f7ff fd97 	bl	8000e60 <spi_rxByte>
	for (int j = 0; j<count; j++){
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8ce      	bhi.n	80012de <SD_read+0x1a>
	}
	spi_rxByte();
 8001340:	f7ff fd8e 	bl	8000e60 <spi_rxByte>

	deselect();
 8001344:	f7ff fd68 	bl	8000e18 <deselect>

	return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <SD_write>:
DSTATUS SD_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count){
 8001352:	b580      	push	{r7, lr}
 8001354:	b088      	sub	sp, #32
 8001356:	af00      	add	r7, sp, #0
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
	uint8_t resp = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]

	for (int j = 0; j<count; j++){
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e03d      	b.n	80013e8 <SD_write+0x96>
		resp = SD_sendCommand(CMD24, sector);
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	2058      	movs	r0, #88	; 0x58
 8001370:	f7ff fda6 	bl	8000ec0 <SD_sendCommand>
 8001374:	4603      	mov	r3, r0
 8001376:	75fb      	strb	r3, [r7, #23]
		if(resp != 0){
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SD_write+0x30>
			return resp;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	e03c      	b.n	80013fc <SD_write+0xaa>
		}
		select();
 8001382:	f7ff fd3f 	bl	8000e04 <select>
		spi_txByte(TOKEN);
 8001386:	20fe      	movs	r0, #254	; 0xfe
 8001388:	f7ff fd50 	bl	8000e2c <spi_txByte>
		for(int i = 0 ; i<BLOCK_SIZE; i++){
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	e00a      	b.n	80013a8 <SD_write+0x56>
			spi_txByte(*buff);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fd48 	bl	8000e2c <spi_txByte>
			buff++;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3301      	adds	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
		for(int i = 0 ; i<BLOCK_SIZE; i++){
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ae:	dbf0      	blt.n	8001392 <SD_write+0x40>
		}
		spi_txByte(0xFF);
 80013b0:	20ff      	movs	r0, #255	; 0xff
 80013b2:	f7ff fd3b 	bl	8000e2c <spi_txByte>
		spi_txByte(0xFF);
 80013b6:	20ff      	movs	r0, #255	; 0xff
 80013b8:	f7ff fd38 	bl	8000e2c <spi_txByte>
		resp = spi_rxByte();
 80013bc:	f7ff fd50 	bl	8000e60 <spi_rxByte>
 80013c0:	4603      	mov	r3, r0
 80013c2:	75fb      	strb	r3, [r7, #23]

		if( (resp & 0b00011111) != 0b00000101){
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d003      	beq.n	80013d6 <SD_write+0x84>
			deselect();
 80013ce:	f7ff fd23 	bl	8000e18 <deselect>
			return resp;
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	e012      	b.n	80013fc <SD_write+0xaa>
		}

		while (spi_rxByte() == 0);
 80013d6:	bf00      	nop
 80013d8:	f7ff fd42 	bl	8000e60 <spi_rxByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0fa      	beq.n	80013d8 <SD_write+0x86>
	for (int j = 0; j<count; j++){
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8bd      	bhi.n	800136c <SD_write+0x1a>
	}
	deselect();
 80013f0:	f7ff fd12 	bl	8000e18 <deselect>
	spi_txByte(0xFF);
 80013f4:	20ff      	movs	r0, #255	; 0xff
 80013f6:	f7ff fd19 	bl	8000e2c <spi_txByte>
	return 0;
 80013fa:	2300      	movs	r3, #0

}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <SD_ioctl>:
DSTATUS SD_ioctl(BYTE pdrv, BYTE cmd, void* buff){
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	603a      	str	r2, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
 8001410:	460b      	mov	r3, r1
 8001412:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (pdrv)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SD_ioctl+0x1e>
	return RES_PARERR;
 800141e:	2304      	movs	r3, #4
 8001420:	e110      	b.n	8001644 <SD_ioctl+0x240>

	res = RES_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (cmd == CTRL_POWER)
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	2b05      	cmp	r3, #5
 800142c:	d11e      	bne.n	800146c <SD_ioctl+0x68>
	{
		switch (*ptr)
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d00e      	beq.n	8001454 <SD_ioctl+0x50>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc14      	bgt.n	8001464 <SD_ioctl+0x60>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <SD_ioctl+0x40>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d004      	beq.n	800144c <SD_ioctl+0x48>
 8001442:	e00f      	b.n	8001464 <SD_ioctl+0x60>
		{
		case 0:
		  res = RES_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  break;
 800144a:	e0f9      	b.n	8001640 <SD_ioctl+0x23c>
		case 1:
		  //SD_PowerOn();             /* Power On */
		  res = RES_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  break;
 8001452:	e0f5      	b.n	8001640 <SD_ioctl+0x23c>
		case 2:
		  *(ptr + 1) = 1;
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	3301      	adds	r3, #1
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
		  res = RES_OK;             /* Power Check */
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  break;
 8001462:	e0ed      	b.n	8001640 <SD_ioctl+0x23c>
		default:
		  res = RES_PARERR;
 8001464:	2304      	movs	r3, #4
 8001466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800146a:	e0e9      	b.n	8001640 <SD_ioctl+0x23c>
		}
	}
	else
	{
		if (Stat & STA_NOINIT)
 800146c:	4b77      	ldr	r3, [pc, #476]	; (800164c <SD_ioctl+0x248>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SD_ioctl+0x7a>
		  return RES_NOTRDY;
 800147a:	2303      	movs	r3, #3
 800147c:	e0e2      	b.n	8001644 <SD_ioctl+0x240>

		select();
 800147e:	f7ff fcc1 	bl	8000e04 <select>

		switch (cmd)
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	2b0d      	cmp	r3, #13
 8001486:	f200 80cc 	bhi.w	8001622 <SD_ioctl+0x21e>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <SD_ioctl+0x8c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	0800158d 	.word	0x0800158d
 8001494:	080014c9 	.word	0x080014c9
 8001498:	0800157d 	.word	0x0800157d
 800149c:	08001623 	.word	0x08001623
 80014a0:	08001623 	.word	0x08001623
 80014a4:	08001623 	.word	0x08001623
 80014a8:	08001623 	.word	0x08001623
 80014ac:	08001623 	.word	0x08001623
 80014b0:	08001623 	.word	0x08001623
 80014b4:	08001623 	.word	0x08001623
 80014b8:	08001623 	.word	0x08001623
 80014bc:	0800159f 	.word	0x0800159f
 80014c0:	080015c3 	.word	0x080015c3
 80014c4:	080015e7 	.word	0x080015e7
		{
		case GET_SECTOR_COUNT:
		  if ((SD_sendCommand(CMD9, 0) == 0) && SD_getCSD(pdrv,csd))
 80014c8:	2100      	movs	r1, #0
 80014ca:	2049      	movs	r0, #73	; 0x49
 80014cc:	f7ff fcf8 	bl	8000ec0 <SD_sendCommand>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 80a9 	bne.w	800162a <SD_ioctl+0x226>
 80014d8:	f107 020c 	add.w	r2, r7, #12
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fd69 	bl	8000fb8 <SD_getCSD>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 809e 	beq.w	800162a <SD_ioctl+0x226>
		  {
			if ((csd[0] >> 6) == 1)
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10e      	bne.n	8001516 <SD_ioctl+0x112>
			{
			  csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80014f8:	7d7b      	ldrb	r3, [r7, #21]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	7d3b      	ldrb	r3, [r7, #20]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b29b      	uxth	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b29b      	uxth	r3, r3
 8001508:	3301      	adds	r3, #1
 800150a:	83fb      	strh	r3, [r7, #30]
			  *(DWORD*) buff = (DWORD) csize << 10;
 800150c:	8bfb      	ldrh	r3, [r7, #30]
 800150e:	029a      	lsls	r2, r3, #10
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e02e      	b.n	8001574 <SD_ioctl+0x170>
			}
			else
			{
			  n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001516:	7c7b      	ldrb	r3, [r7, #17]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	b2da      	uxtb	r2, r3
 800151e:	7dbb      	ldrb	r3, [r7, #22]
 8001520:	09db      	lsrs	r3, r3, #7
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b2da      	uxtb	r2, r3
 8001528:	7d7b      	ldrb	r3, [r7, #21]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f003 0306 	and.w	r3, r3, #6
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3302      	adds	r3, #2
 800153a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800153e:	7d3b      	ldrb	r3, [r7, #20]
 8001540:	099b      	lsrs	r3, r3, #6
 8001542:	b2db      	uxtb	r3, r3
 8001544:	b29a      	uxth	r2, r3
 8001546:	7cfb      	ldrb	r3, [r7, #19]
 8001548:	b29b      	uxth	r3, r3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	b29b      	uxth	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b29a      	uxth	r2, r3
 8001552:	7cbb      	ldrb	r3, [r7, #18]
 8001554:	029b      	lsls	r3, r3, #10
 8001556:	b29b      	uxth	r3, r3
 8001558:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800155c:	b29b      	uxth	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b29b      	uxth	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	83fb      	strh	r3, [r7, #30]
			  *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001566:	8bfa      	ldrh	r2, [r7, #30]
 8001568:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800156c:	3b09      	subs	r3, #9
 800156e:	409a      	lsls	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	601a      	str	r2, [r3, #0]
			}

			res = RES_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  }
		  break;
 800157a:	e056      	b.n	800162a <SD_ioctl+0x226>

		case GET_SECTOR_SIZE:
		  *(WORD*) buff = 512;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	801a      	strh	r2, [r3, #0]
		  res = RES_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  break;
 800158a:	e055      	b.n	8001638 <SD_ioctl+0x234>

		case CTRL_SYNC:
		  if (SD_ReadyWait() == 0xFF)
 800158c:	f7ff fc86 	bl	8000e9c <SD_ReadyWait>
 8001590:	4603      	mov	r3, r0
 8001592:	2bff      	cmp	r3, #255	; 0xff
 8001594:	d14b      	bne.n	800162e <SD_ioctl+0x22a>
			res = RES_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  break;
 800159c:	e047      	b.n	800162e <SD_ioctl+0x22a>

		case MMC_GET_CSD:
		  if (SD_sendCommand(CMD9, 0) == 0 && SD_getCSD(1, ptr))
 800159e:	2100      	movs	r1, #0
 80015a0:	2049      	movs	r0, #73	; 0x49
 80015a2:	f7ff fc8d 	bl	8000ec0 <SD_sendCommand>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d142      	bne.n	8001632 <SD_ioctl+0x22e>
 80015ac:	6a39      	ldr	r1, [r7, #32]
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fd02 	bl	8000fb8 <SD_getCSD>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d03b      	beq.n	8001632 <SD_ioctl+0x22e>
			res = RES_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  break;
 80015c0:	e037      	b.n	8001632 <SD_ioctl+0x22e>

		case MMC_GET_CID:
		  if (SD_sendCommand(CMD10, 0) == 0 && SD_getCSD(1, ptr))
 80015c2:	2100      	movs	r1, #0
 80015c4:	204a      	movs	r0, #74	; 0x4a
 80015c6:	f7ff fc7b 	bl	8000ec0 <SD_sendCommand>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d132      	bne.n	8001636 <SD_ioctl+0x232>
 80015d0:	6a39      	ldr	r1, [r7, #32]
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fcf0 	bl	8000fb8 <SD_getCSD>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02b      	beq.n	8001636 <SD_ioctl+0x232>
			res = RES_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  break;
 80015e4:	e027      	b.n	8001636 <SD_ioctl+0x232>

		case MMC_GET_OCR:
		  if (SD_sendCommand(CMD58, 0) == 0)
 80015e6:	2100      	movs	r1, #0
 80015e8:	207a      	movs	r0, #122	; 0x7a
 80015ea:	f7ff fc69 	bl	8000ec0 <SD_sendCommand>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d116      	bne.n	8001622 <SD_ioctl+0x21e>
		  {
			for (n = 0; n < 4; n++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015fa:	e00b      	b.n	8001614 <SD_ioctl+0x210>
			{
			  *ptr++ = spi_rxByte();
 80015fc:	6a3c      	ldr	r4, [r7, #32]
 80015fe:	1c63      	adds	r3, r4, #1
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	f7ff fc2d 	bl	8000e60 <spi_rxByte>
 8001606:	4603      	mov	r3, r0
 8001608:	7023      	strb	r3, [r4, #0]
			for (n = 0; n < 4; n++)
 800160a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800160e:	3301      	adds	r3, #1
 8001610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001618:	2b03      	cmp	r3, #3
 800161a:	d9ef      	bls.n	80015fc <SD_ioctl+0x1f8>
			}

			res = RES_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  }

		default:
		  res = RES_PARERR;
 8001622:	2304      	movs	r3, #4
 8001624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001628:	e006      	b.n	8001638 <SD_ioctl+0x234>
		  break;
 800162a:	bf00      	nop
 800162c:	e004      	b.n	8001638 <SD_ioctl+0x234>
		  break;
 800162e:	bf00      	nop
 8001630:	e002      	b.n	8001638 <SD_ioctl+0x234>
		  break;
 8001632:	bf00      	nop
 8001634:	e000      	b.n	8001638 <SD_ioctl+0x234>
		  break;
 8001636:	bf00      	nop
		}

		deselect();
 8001638:	f7ff fbee 	bl	8000e18 <deselect>
		spi_rxByte();
 800163c:	f7ff fc10 	bl	8000e60 <spi_rxByte>
	}

	return res;
 8001640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001644:	4618      	mov	r0, r3
 8001646:	372c      	adds	r7, #44	; 0x2c
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	20000000 	.word	0x20000000

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_MspInit+0x44>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_MspInit+0x44>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6613      	str	r3, [r2, #96]	; 0x60
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_MspInit+0x44>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_MspInit+0x44>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6593      	str	r3, [r2, #88]	; 0x58
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0b0      	sub	sp, #192	; 0xc0
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	2294      	movs	r2, #148	; 0x94
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f007 fbd7 	bl	8008e6c <memset>
  if(huart->Instance==LPUART1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <HAL_UART_MspInit+0x138>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d13e      	bne.n	8001746 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016c8:	2320      	movs	r3, #32
 80016ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	f107 0318 	add.w	r3, r7, #24
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 fca7 	bl	8003028 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e0:	f7ff fb80 	bl	8000de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	4a3a      	ldr	r2, [pc, #232]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	4a34      	ldr	r2, [pc, #208]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001708:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001714:	f000 fda0 	bl	8002258 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001718:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800171c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001732:	2308      	movs	r3, #8
 8001734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001738:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800173c:	4619      	mov	r1, r3
 800173e:	4826      	ldr	r0, [pc, #152]	; (80017d8 <HAL_UART_MspInit+0x140>)
 8001740:	f000 fb02 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001744:	e040      	b.n	80017c8 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a24      	ldr	r2, [pc, #144]	; (80017dc <HAL_UART_MspInit+0x144>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d13b      	bne.n	80017c8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001750:	2304      	movs	r3, #4
 8001752:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001754:	2300      	movs	r3, #0
 8001756:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fc63 	bl	8003028 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001768:	f7ff fb3c 	bl	8000de4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 8001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001776:	6593      	str	r3, [r2, #88]	; 0x58
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_UART_MspInit+0x13c>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800179c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b6:	2307      	movs	r3, #7
 80017b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <HAL_UART_MspInit+0x148>)
 80017c4:	f000 fac0 	bl	8001d48 <HAL_GPIO_Init>
}
 80017c8:	bf00      	nop
 80017ca:	37c0      	adds	r7, #192	; 0xc0
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40008000 	.word	0x40008000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48001800 	.word	0x48001800
 80017dc:	40004800 	.word	0x40004800
 80017e0:	48000c00 	.word	0x48000c00

080017e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a25      	ldr	r2, [pc, #148]	; (8001898 <HAL_SPI_MspInit+0xb4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d144      	bne.n	8001890 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_SPI_MspInit+0xb8>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	4a24      	ldr	r2, [pc, #144]	; (800189c <HAL_SPI_MspInit+0xb8>)
 800180c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001810:	6613      	str	r3, [r2, #96]	; 0x60
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_SPI_MspInit+0xb8>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_SPI_MspInit+0xb8>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a1e      	ldr	r2, [pc, #120]	; (800189c <HAL_SPI_MspInit+0xb8>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_SPI_MspInit+0xb8>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_SPI_MspInit+0xb8>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <HAL_SPI_MspInit+0xb8>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_SPI_MspInit+0xb8>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800184e:	2310      	movs	r3, #16
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800185e:	2305      	movs	r3, #5
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186c:	f000 fa6c 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001870:	2338      	movs	r3, #56	; 0x38
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001880:	2305      	movs	r3, #5
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_SPI_MspInit+0xbc>)
 800188c:	f000 fa5c 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40013000 	.word	0x40013000
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000400 	.word	0x48000400

080018a4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(){
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	if(Timer1 >0){
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <SDTimer_Handler+0x40>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <SDTimer_Handler+0x1c>
		Timer1--;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <SDTimer_Handler+0x40>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <SDTimer_Handler+0x40>)
 80018be:	701a      	strb	r2, [r3, #0]
	}
	if(Timer2 >0){
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <SDTimer_Handler+0x44>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <SDTimer_Handler+0x34>
			Timer2--;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <SDTimer_Handler+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SDTimer_Handler+0x44>)
 80018d6:	701a      	strb	r2, [r3, #0]
		}
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200006ee 	.word	0x200006ee
 80018e8:	200006ed 	.word	0x200006ed

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <SysTick_Handler+0x30>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <SysTick_Handler+0x30>)
 8001944:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <SysTick_Handler+0x30>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b09      	cmp	r3, #9
 800194e:	d904      	bls.n	800195a <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SysTick_Handler+0x30>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001956:	f7ff ffa5 	bl	80018a4 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195a:	f000 f8cb 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200000a6 	.word	0x200000a6

08001968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <_sbrk+0x5c>)
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <_sbrk+0x60>)
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <_sbrk+0x64>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <_sbrk+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d207      	bcs.n	80019a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001998:	f007 fa3e 	bl	8008e18 <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	220c      	movs	r2, #12
 80019a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	e009      	b.n	80019bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <_sbrk+0x64>)
 80019b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200a0000 	.word	0x200a0000
 80019c8:	00000800 	.word	0x00000800
 80019cc:	200000a8 	.word	0x200000a8
 80019d0:	20002778 	.word	0x20002778

080019d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019fc:	f7ff ffea 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LoopForever+0xe>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	; (8001a44 <LoopForever+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a26:	f007 f9fd 	bl	8008e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2a:	f7fe fec7 	bl	80007bc <main>

08001a2e <LoopForever>:

LoopForever:
    b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a3c:	08009ce0 	.word	0x08009ce0
  ldr r2, =_sbss
 8001a40:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a44:	20002774 	.word	0x20002774

08001a48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_IRQHandler>

08001a4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 f943 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f80e 	bl	8001a7c <HAL_InitTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	e001      	b.n	8001a70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a6c:	f7ff fdf0 	bl	8001650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a70:	79fb      	ldrb	r3, [r7, #7]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_InitTick+0x6c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d023      	beq.n	8001ad8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_InitTick+0x70>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_InitTick+0x6c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f941 	bl	8001d2e <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10f      	bne.n	8001ad2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d809      	bhi.n	8001acc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f919 	bl	8001cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_InitTick+0x74>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e007      	b.n	8001adc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e004      	b.n	8001adc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e001      	b.n	8001adc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	20000004 	.word	0x20000004
 8001af0:	20000008 	.word	0x20000008

08001af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x20>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x24>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_IncTick+0x24>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	2000000c 	.word	0x2000000c
 8001b18:	200006f0 	.word	0x200006f0

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200006f0 	.word	0x200006f0

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff ffee 	bl	8001b1c <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d005      	beq.n	8001b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_Delay+0x44>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff ffde 	bl	8001b1c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8f7      	bhi.n	8001b5c <HAL_Delay+0x28>
  {
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000000c 	.word	0x2000000c

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff47 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff5c 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff8e 	bl	8001c34 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5d 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffb0 	bl	8001c9c <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e166      	b.n	8002026 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8158 	beq.w	8002020 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d005      	beq.n	8001d88 <HAL_GPIO_Init+0x40>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d130      	bne.n	8001dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 0201 	and.w	r2, r3, #1
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d017      	beq.n	8001e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d123      	bne.n	8001e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	08da      	lsrs	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3208      	adds	r2, #8
 8001e74:	6939      	ldr	r1, [r7, #16]
 8001e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0203 	and.w	r2, r3, #3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80b2 	beq.w	8002020 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebc:	4b61      	ldr	r3, [pc, #388]	; (8002044 <HAL_GPIO_Init+0x2fc>)
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	4a60      	ldr	r2, [pc, #384]	; (8002044 <HAL_GPIO_Init+0x2fc>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec8:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_GPIO_Init+0x2fc>)
 8001eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ed4:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	3302      	adds	r3, #2
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001efe:	d02b      	beq.n	8001f58 <HAL_GPIO_Init+0x210>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d025      	beq.n	8001f54 <HAL_GPIO_Init+0x20c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a51      	ldr	r2, [pc, #324]	; (8002050 <HAL_GPIO_Init+0x308>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d01f      	beq.n	8001f50 <HAL_GPIO_Init+0x208>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a50      	ldr	r2, [pc, #320]	; (8002054 <HAL_GPIO_Init+0x30c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d019      	beq.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a4f      	ldr	r2, [pc, #316]	; (8002058 <HAL_GPIO_Init+0x310>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d013      	beq.n	8001f48 <HAL_GPIO_Init+0x200>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a4e      	ldr	r2, [pc, #312]	; (800205c <HAL_GPIO_Init+0x314>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00d      	beq.n	8001f44 <HAL_GPIO_Init+0x1fc>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <HAL_GPIO_Init+0x318>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <HAL_GPIO_Init+0x1f8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_GPIO_Init+0x31c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_GPIO_Init+0x1f4>
 8001f38:	2307      	movs	r3, #7
 8001f3a:	e00e      	b.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	e00c      	b.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f40:	2306      	movs	r3, #6
 8001f42:	e00a      	b.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f44:	2305      	movs	r3, #5
 8001f46:	e008      	b.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f48:	2304      	movs	r3, #4
 8001f4a:	e006      	b.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e004      	b.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e002      	b.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	f002 0203 	and.w	r2, r2, #3
 8001f60:	0092      	lsls	r2, r2, #2
 8001f62:	4093      	lsls	r3, r2
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6a:	4937      	ldr	r1, [pc, #220]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f9c:	4a32      	ldr	r2, [pc, #200]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc6:	4a28      	ldr	r2, [pc, #160]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <HAL_GPIO_Init+0x320>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	f47f ae91 	bne.w	8001d58 <HAL_GPIO_Init+0x10>
  }
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000
 800204c:	48000400 	.word	0x48000400
 8002050:	48000800 	.word	0x48000800
 8002054:	48000c00 	.word	0x48000c00
 8002058:	48001000 	.word	0x48001000
 800205c:	48001400 	.word	0x48001400
 8002060:	48001800 	.word	0x48001800
 8002064:	48001c00 	.word	0x48001c00
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002088:	e002      	b.n	8002090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43d9      	mvns	r1, r3
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	400b      	ands	r3, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_PWREx_GetVoltageRange+0x3c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e0:	d102      	bne.n	80020e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80020e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e6:	e00b      	b.n	8002100 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_PWREx_GetVoltageRange+0x3c>)
 80020ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f6:	d102      	bne.n	80020fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80020f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fc:	e000      	b.n	8002100 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80020fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40007000 	.word	0x40007000

08002110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d141      	bne.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800211e:	4b4b      	ldr	r3, [pc, #300]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212a:	d131      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800212c:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002132:	4a46      	ldr	r2, [pc, #280]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800213c:	4b43      	ldr	r3, [pc, #268]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002144:	4a41      	ldr	r2, [pc, #260]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2232      	movs	r2, #50	; 0x32
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	4a3f      	ldr	r2, [pc, #252]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	0c9b      	lsrs	r3, r3, #18
 800215e:	3301      	adds	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002162:	e002      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3b01      	subs	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216a:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d102      	bne.n	800217e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f2      	bne.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218a:	d158      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e057      	b.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002196:	4a2d      	ldr	r2, [pc, #180]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800219c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021a0:	e04d      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a8:	d141      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b6:	d131      	bne.n	800221c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021be:	4a23      	ldr	r2, [pc, #140]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d0:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2232      	movs	r2, #50	; 0x32
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	3301      	adds	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ee:	e002      	b.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d102      	bne.n	800220a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f2      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002216:	d112      	bne.n	800223e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e011      	b.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800222c:	e007      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40007000 	.word	0x40007000
 8002250:	20000004 	.word	0x20000004
 8002254:	431bde83 	.word	0x431bde83

08002258 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_PWREx_EnableVddIO2+0x1c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002266:	6053      	str	r3, [r2, #4]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40007000 	.word	0x40007000

08002278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f000 bc16 	b.w	8002ab8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228c:	4ba0      	ldr	r3, [pc, #640]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002296:	4b9e      	ldr	r3, [pc, #632]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80e4 	beq.w	8002476 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4c>
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	f040 808b 	bne.w	80023d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f040 8087 	bne.w	80023d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c4:	4b92      	ldr	r3, [pc, #584]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_OscConfig+0x64>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e3ed      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	4b8b      	ldr	r3, [pc, #556]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_RCC_OscConfig+0x7e>
 80022ec:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f4:	e005      	b.n	8002302 <HAL_RCC_OscConfig+0x8a>
 80022f6:	4b86      	ldr	r3, [pc, #536]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80022f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002302:	4293      	cmp	r3, r2
 8002304:	d223      	bcs.n	800234e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fdca 	bl	8002ea4 <RCC_SetFlashLatencyFromMSIRange>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e3ce      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231a:	4b7d      	ldr	r3, [pc, #500]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7c      	ldr	r2, [pc, #496]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b7a      	ldr	r3, [pc, #488]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4977      	ldr	r1, [pc, #476]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002338:	4b75      	ldr	r3, [pc, #468]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	4972      	ldr	r1, [pc, #456]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
 800234c:	e025      	b.n	800239a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800234e:	4b70      	ldr	r3, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6f      	ldr	r2, [pc, #444]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002354:	f043 0308 	orr.w	r3, r3, #8
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b6d      	ldr	r3, [pc, #436]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	496a      	ldr	r1, [pc, #424]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800236c:	4b68      	ldr	r3, [pc, #416]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fd8a 	bl	8002ea4 <RCC_SetFlashLatencyFromMSIRange>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e38e      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800239a:	f000 fcbf 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	495a      	ldr	r1, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x29c>)
 80023ac:	5ccb      	ldrb	r3, [r1, r3]
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_RCC_OscConfig+0x2a0>)
 80023b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023ba:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_RCC_OscConfig+0x2a4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fb5c 	bl	8001a7c <HAL_InitTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d052      	beq.n	8002474 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	e372      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d032      	beq.n	8002440 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023da:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a4c      	ldr	r2, [pc, #304]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fb99 	bl	8001b1c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ee:	f7ff fb95 	bl	8001b1c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e35b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002400:	4b43      	ldr	r3, [pc, #268]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800240c:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002412:	f043 0308 	orr.w	r3, r3, #8
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	493a      	ldr	r1, [pc, #232]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	4935      	ldr	r1, [pc, #212]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
 800243e:	e01a      	b.n	8002476 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002440:	4b33      	ldr	r3, [pc, #204]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a32      	ldr	r2, [pc, #200]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800244c:	f7ff fb66 	bl	8001b1c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002454:	f7ff fb62 	bl	8001b1c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e328      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x1dc>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d073      	beq.n	800256a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b08      	cmp	r3, #8
 8002486:	d005      	beq.n	8002494 <HAL_RCC_OscConfig+0x21c>
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d10e      	bne.n	80024ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d063      	beq.n	8002568 <HAL_RCC_OscConfig+0x2f0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d15f      	bne.n	8002568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e305      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x24c>
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0x288>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x270>
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0x288>
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a05      	ldr	r2, [pc, #20]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01b      	beq.n	8002540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fb08 	bl	8001b1c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250e:	e010      	b.n	8002532 <HAL_RCC_OscConfig+0x2ba>
 8002510:	40021000 	.word	0x40021000
 8002514:	080097ec 	.word	0x080097ec
 8002518:	20000004 	.word	0x20000004
 800251c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff fafc 	bl	8001b1c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e2c2      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002532:	4baf      	ldr	r3, [pc, #700]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x2a8>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff faec 	bl	8001b1c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff fae8 	bl	8001b1c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e2ae      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255a:	4ba5      	ldr	r3, [pc, #660]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x2d0>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d060      	beq.n	8002638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d005      	beq.n	8002588 <HAL_RCC_OscConfig+0x310>
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d119      	bne.n	80025b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d116      	bne.n	80025b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002588:	4b99      	ldr	r3, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x328>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e28b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b93      	ldr	r3, [pc, #588]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	4990      	ldr	r1, [pc, #576]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b4:	e040      	b.n	8002638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d023      	beq.n	8002606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025be:	4b8c      	ldr	r3, [pc, #560]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a8b      	ldr	r2, [pc, #556]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7ff faa7 	bl	8001b1c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff faa3 	bl	8001b1c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e269      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e4:	4b82      	ldr	r3, [pc, #520]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	497c      	ldr	r1, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	e018      	b.n	8002638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b7a      	ldr	r3, [pc, #488]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a79      	ldr	r2, [pc, #484]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800260c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff fa83 	bl	8001b1c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7ff fa7f 	bl	8001b1c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e245      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262c:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d03c      	beq.n	80026be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01c      	beq.n	8002686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264c:	4b68      	ldr	r3, [pc, #416]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	4a67      	ldr	r2, [pc, #412]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7ff fa5e 	bl	8001b1c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7ff fa5a 	bl	8001b1c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e220      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002676:	4b5e      	ldr	r3, [pc, #376]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <HAL_RCC_OscConfig+0x3ec>
 8002684:	e01b      	b.n	80026be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002686:	4b5a      	ldr	r3, [pc, #360]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7ff fa41 	bl	8001b1c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff fa3d 	bl	8001b1c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e203      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ef      	bne.n	800269e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80a6 	beq.w	8002818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026d0:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	4a43      	ldr	r2, [pc, #268]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
 80026e8:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f8:	4b3e      	ldr	r3, [pc, #248]	; (80027f4 <HAL_RCC_OscConfig+0x57c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d118      	bne.n	8002736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <HAL_RCC_OscConfig+0x57c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <HAL_RCC_OscConfig+0x57c>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002710:	f7ff fa04 	bl	8001b1c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7ff fa00 	bl	8001b1c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1c6      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCC_OscConfig+0x57c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <HAL_RCC_OscConfig+0x4d8>
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274e:	e024      	b.n	800279a <HAL_RCC_OscConfig+0x522>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d110      	bne.n	800277a <HAL_RCC_OscConfig+0x502>
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002768:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002778:	e00f      	b.n	800279a <HAL_RCC_OscConfig+0x522>
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a2:	f7ff f9bb 	bl	8001b1c <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7ff f9b7 	bl	8001b1c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e17b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ed      	beq.n	80027aa <HAL_RCC_OscConfig+0x532>
 80027ce:	e01a      	b.n	8002806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff f9a4 	bl	8001b1c <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d6:	e00f      	b.n	80027f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7ff f9a0 	bl	8001b1c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d906      	bls.n	80027f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e164      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f8:	4ba8      	ldr	r3, [pc, #672]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e8      	bne.n	80027d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002806:	7ffb      	ldrb	r3, [r7, #31]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4ba3      	ldr	r3, [pc, #652]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	4aa2      	ldr	r2, [pc, #648]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d03c      	beq.n	800289e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01c      	beq.n	8002866 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800282c:	4b9b      	ldr	r3, [pc, #620]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 800282e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002832:	4a9a      	ldr	r2, [pc, #616]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7ff f96e 	bl	8001b1c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002844:	f7ff f96a 	bl	8001b1c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e130      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002856:	4b91      	ldr	r3, [pc, #580]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ef      	beq.n	8002844 <HAL_RCC_OscConfig+0x5cc>
 8002864:	e01b      	b.n	800289e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002866:	4b8d      	ldr	r3, [pc, #564]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800286c:	4a8b      	ldr	r2, [pc, #556]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002876:	f7ff f951 	bl	8001b1c <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800287e:	f7ff f94d 	bl	8001b1c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e113      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002890:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ef      	bne.n	800287e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8107 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f040 80cb 	bne.w	8002a48 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028b2:	4b7a      	ldr	r3, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0203 	and.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d12c      	bne.n	8002920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	3b01      	subs	r3, #1
 80028d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d123      	bne.n	8002920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d11b      	bne.n	8002920 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d113      	bne.n	8002920 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d109      	bne.n	8002920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	3b01      	subs	r3, #1
 800291a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d06d      	beq.n	80029fc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d068      	beq.n	80029f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002932:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0ba      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002942:	4b56      	ldr	r3, [pc, #344]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800294e:	f7ff f8e5 	bl	8001b1c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7ff f8e1 	bl	8001b1c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0a7      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002968:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002974:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_RCC_OscConfig+0x828>)
 800297a:	4013      	ands	r3, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002984:	3a01      	subs	r2, #1
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	4311      	orrs	r1, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800298e:	0212      	lsls	r2, r2, #8
 8002990:	4311      	orrs	r1, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002996:	0852      	lsrs	r2, r2, #1
 8002998:	3a01      	subs	r2, #1
 800299a:	0552      	lsls	r2, r2, #21
 800299c:	4311      	orrs	r1, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029a2:	0852      	lsrs	r2, r2, #1
 80029a4:	3a01      	subs	r2, #1
 80029a6:	0652      	lsls	r2, r2, #25
 80029a8:	4311      	orrs	r1, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ae:	06d2      	lsls	r2, r2, #27
 80029b0:	430a      	orrs	r2, r1
 80029b2:	493a      	ldr	r1, [pc, #232]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80029be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80029ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d0:	f7ff f8a4 	bl	8001b1c <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d8:	f7ff f8a0 	bl	8001b1c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e066      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f6:	e05e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e05d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d156      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a20:	f7ff f87c 	bl	8001b1c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7ff f878 	bl	8001b1c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e03e      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x7b0>
 8002a46:	e036      	b.n	8002ab6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d031      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a6c:	f023 0303 	bic.w	r3, r3, #3
 8002a70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_RCC_OscConfig+0x824>)
 8002a78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7ff f84b 	bl	8001b1c <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a88:	e00c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7ff f847 	bl	8001b1c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d905      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e00d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x848>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ec      	bne.n	8002a8a <HAL_RCC_OscConfig+0x812>
 8002ab0:	e001      	b.n	8002ab6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e10f      	b.n	8002cfc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b89      	ldr	r3, [pc, #548]	; (8002d04 <HAL_RCC_ClockConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d910      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b86      	ldr	r3, [pc, #536]	; (8002d04 <HAL_RCC_ClockConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 020f 	bic.w	r2, r3, #15
 8002af2:	4984      	ldr	r1, [pc, #528]	; (8002d04 <HAL_RCC_ClockConfig+0x240>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b82      	ldr	r3, [pc, #520]	; (8002d04 <HAL_RCC_ClockConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0f7      	b.n	8002cfc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8089 	beq.w	8002c2c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d133      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	4b79      	ldr	r3, [pc, #484]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0e4      	b.n	8002cfc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002b32:	f000 fa11 	bl	8002f58 <RCC_GetSysClockFreqFromPLLSource>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4a74      	ldr	r2, [pc, #464]	; (8002d0c <HAL_RCC_ClockConfig+0x248>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d955      	bls.n	8002bea <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b3e:	4b72      	ldr	r3, [pc, #456]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b4a:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b52:	4a6d      	ldr	r2, [pc, #436]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	e044      	b.n	8002bea <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d03e      	beq.n	8002bea <HAL_RCC_ClockConfig+0x126>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d13a      	bne.n	8002bea <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b74:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7c:	4a62      	ldr	r2, [pc, #392]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e02f      	b.n	8002bea <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b92:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d115      	bne.n	8002bca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0ac      	b.n	8002cfc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002baa:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0a0      	b.n	8002cfc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bba:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e098      	b.n	8002cfc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002bca:	f000 f8a7 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4a4e      	ldr	r2, [pc, #312]	; (8002d0c <HAL_RCC_ClockConfig+0x248>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d909      	bls.n	8002bea <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bd6:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bde:	4a4a      	ldr	r2, [pc, #296]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4944      	ldr	r1, [pc, #272]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f7fe ff8e 	bl	8001b1c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe ff8a 	bl	8001b1c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e070      	b.n	8002cfc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4930      	ldr	r1, [pc, #192]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b80      	cmp	r3, #128	; 0x80
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_ClockConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d210      	bcs.n	8002c8e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_ClockConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 020f 	bic.w	r2, r3, #15
 8002c74:	4923      	ldr	r1, [pc, #140]	; (8002d04 <HAL_RCC_ClockConfig+0x240>)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7c:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <HAL_RCC_ClockConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e036      	b.n	8002cfc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4918      	ldr	r1, [pc, #96]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4910      	ldr	r1, [pc, #64]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ccc:	f000 f826 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <HAL_RCC_ClockConfig+0x24c>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x250>)
 8002cea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x254>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fec3 	bl	8001a7c <HAL_InitTick>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	04c4b400 	.word	0x04c4b400
 8002d10:	080097ec 	.word	0x080097ec
 8002d14:	20000004 	.word	0x20000004
 8002d18:	20000008 	.word	0x20000008

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d34:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x34>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d121      	bne.n	8002d8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d11e      	bne.n	8002d8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e005      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d78:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d102      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	e004      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002da0:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002da2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d134      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d003      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xac>
 8002dc0:	e005      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc4:	617b      	str	r3, [r7, #20]
      break;
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dca:	617b      	str	r3, [r7, #20]
      break;
 8002dcc:	e002      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	617b      	str	r3, [r7, #20]
      break;
 8002dd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd4:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3301      	adds	r3, #1
 8002de0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	fb02 f203 	mul.w	r2, r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	0e5b      	lsrs	r3, r3, #25
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	3301      	adds	r3, #1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e14:	69bb      	ldr	r3, [r7, #24]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08009804 	.word	0x08009804
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000004 	.word	0x20000004

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4904      	ldr	r1, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	080097fc 	.word	0x080097fc

08002e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e7c:	f7ff ffda 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0adb      	lsrs	r3, r3, #11
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	080097fc 	.word	0x080097fc

08002ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb0:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ebc:	f7ff f908 	bl	80020d0 <HAL_PWREx_GetVoltageRange>
 8002ec0:	6178      	str	r0, [r7, #20]
 8002ec2:	e014      	b.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	4a21      	ldr	r2, [pc, #132]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002edc:	f7ff f8f8 	bl	80020d0 <HAL_PWREx_GetVoltageRange>
 8002ee0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef4:	d10b      	bne.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b80      	cmp	r3, #128	; 0x80
 8002efa:	d913      	bls.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2ba0      	cmp	r3, #160	; 0xa0
 8002f00:	d902      	bls.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f02:	2302      	movs	r3, #2
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	e00d      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f08:	2301      	movs	r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e00a      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b7f      	cmp	r3, #127	; 0x7f
 8002f12:	d902      	bls.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f14:	2302      	movs	r3, #2
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	e004      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b70      	cmp	r3, #112	; 0x70
 8002f1e:	d101      	bne.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f20:	2301      	movs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 020f 	bic.w	r2, r3, #15
 8002f2c:	4909      	ldr	r1, [pc, #36]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40022000 	.word	0x40022000

08002f58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002f62:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d118      	bne.n	8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d107      	bne.n	8002f8a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e005      	b.n	8002f96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f96:	4a21      	ldr	r2, [pc, #132]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d003      	beq.n	8002fb8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d003      	beq.n	8002fbe <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002fb6:	e005      	b.n	8002fc4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fba:	613b      	str	r3, [r7, #16]
    break;
 8002fbc:	e005      	b.n	8002fca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fbe:	4b19      	ldr	r3, [pc, #100]	; (8003024 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002fc0:	613b      	str	r3, [r7, #16]
    break;
 8002fc2:	e002      	b.n	8002fca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	613b      	str	r3, [r7, #16]
    break;
 8002fc8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	fb02 f203 	mul.w	r2, r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0e5b      	lsrs	r3, r3, #25
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800300a:	683b      	ldr	r3, [r7, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40021000 	.word	0x40021000
 800301c:	08009804 	.word	0x08009804
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003030:	2300      	movs	r3, #0
 8003032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003034:	2300      	movs	r3, #0
 8003036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003040:	2b00      	cmp	r3, #0
 8003042:	d040      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d02a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d825      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003050:	2b60      	cmp	r3, #96	; 0x60
 8003052:	d026      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d821      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d006      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d81d      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d010      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003068:	e018      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4a88      	ldr	r2, [pc, #544]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003076:	e015      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fb02 	bl	8003688 <RCCEx_PLLSAI1_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003088:	e00c      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3320      	adds	r3, #32
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fbed 	bl	8003870 <RCCEx_PLLSAI2_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800309a:	e003      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	74fb      	strb	r3, [r7, #19]
      break;
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80030a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030aa:	4b79      	ldr	r3, [pc, #484]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b8:	4975      	ldr	r1, [pc, #468]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030c0:	e001      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d047      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030da:	d030      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	d82a      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e6:	d02a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ec:	d824      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f2:	d008      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80030f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f8:	d81e      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80030fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003102:	d010      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003104:	e018      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003112:	e015      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fab4 	bl	8003688 <RCCEx_PLLSAI1_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003124:	e00c      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3320      	adds	r3, #32
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fb9f 	bl	8003870 <RCCEx_PLLSAI2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003136:	e003      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	74fb      	strb	r3, [r7, #19]
      break;
 800313c:	e000      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800313e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003146:	4b52      	ldr	r3, [pc, #328]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800314c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	494e      	ldr	r1, [pc, #312]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800315c:	e001      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 809f 	beq.w	80032ae <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003170:	2300      	movs	r3, #0
 8003172:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003174:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00d      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	4a40      	ldr	r2, [pc, #256]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	6593      	str	r3, [r2, #88]	; 0x58
 8003196:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031b2:	f7fe fcb3 	bl	8001b1c <HAL_GetTick>
 80031b6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031b8:	e009      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fe fcaf 	bl	8001b1c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d902      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	74fb      	strb	r3, [r7, #19]
        break;
 80031cc:	e005      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ce:	4b31      	ldr	r3, [pc, #196]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ef      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d15b      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01f      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d019      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003208:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800322a:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d016      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fc6e 	bl	8001b1c <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003242:	e00b      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe fc6a 	bl	8001b1c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d902      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	74fb      	strb	r3, [r7, #19]
            break;
 800325a:	e006      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ec      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4903      	ldr	r1, [pc, #12]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003288:	e008      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	74bb      	strb	r3, [r7, #18]
 800328e:	e005      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800329c:	7c7b      	ldrb	r3, [r7, #17]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4ba0      	ldr	r3, [pc, #640]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	4a9f      	ldr	r2, [pc, #636]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ba:	4b9a      	ldr	r3, [pc, #616]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f023 0203 	bic.w	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	4996      	ldr	r1, [pc, #600]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032dc:	4b91      	ldr	r3, [pc, #580]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 020c 	bic.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	498e      	ldr	r1, [pc, #568]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fe:	4b89      	ldr	r3, [pc, #548]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	4985      	ldr	r1, [pc, #532]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003320:	4b80      	ldr	r3, [pc, #512]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332e:	497d      	ldr	r1, [pc, #500]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003342:	4b78      	ldr	r3, [pc, #480]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	4974      	ldr	r1, [pc, #464]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	496c      	ldr	r1, [pc, #432]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003386:	4b67      	ldr	r3, [pc, #412]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003394:	4963      	ldr	r1, [pc, #396]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a8:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b6:	495b      	ldr	r1, [pc, #364]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ca:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	4952      	ldr	r1, [pc, #328]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ec:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	494a      	ldr	r1, [pc, #296]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800340e:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	4941      	ldr	r1, [pc, #260]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003430:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	4939      	ldr	r1, [pc, #228]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	4930      	ldr	r1, [pc, #192]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003470:	d106      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347c:	60d3      	str	r3, [r2, #12]
 800347e:	e011      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f8f9 	bl	8003688 <RCCEx_PLLSAI1_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d04d      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b8:	d108      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034ca:	e012      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d2:	4a14      	ldr	r2, [pc, #80]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ea:	490e      	ldr	r1, [pc, #56]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034fa:	d106      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a08      	ldr	r2, [pc, #32]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003506:	60d3      	str	r3, [r2, #12]
 8003508:	e020      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003512:	d109      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a02      	ldr	r2, [pc, #8]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	60d3      	str	r3, [r2, #12]
 8003520:	e014      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003530:	d10c      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f8a5 	bl	8003688 <RCCEx_PLLSAI1_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d028      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003558:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003566:	4947      	ldr	r1, [pc, #284]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003576:	d106      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a41      	ldr	r2, [pc, #260]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
 8003584:	e011      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358e:	d10c      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f876 	bl	8003688 <RCCEx_PLLSAI1_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01e      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c6:	492f      	ldr	r1, [pc, #188]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f851 	bl	8003688 <RCCEx_PLLSAI1_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003600:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003606:	f023 0204 	bic.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003610:	491c      	ldr	r1, [pc, #112]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800362a:	f023 0218 	bic.w	r2, r3, #24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	4913      	ldr	r1, [pc, #76]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d017      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800364e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003658:	490a      	ldr	r1, [pc, #40]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366a:	d105      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003678:	7cbb      	ldrb	r3, [r7, #18]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000

08003688 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036a2:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0203 	and.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d103      	bne.n	80036ba <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
       ||
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d142      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e03f      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d018      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0x72>
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d825      	bhi.n	8003718 <RCCEx_PLLSAI1_Config+0x90>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d002      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x4e>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d009      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x60>
 80036d4:	e020      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d6:	4b62      	ldr	r3, [pc, #392]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e01a      	b.n	800371e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e8:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e013      	b.n	8003722 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036fa:	4b59      	ldr	r3, [pc, #356]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003706:	4b56      	ldr	r3, [pc, #344]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003716:	e006      	b.n	8003726 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003726:	bf00      	nop
    }

    if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800372e:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4949      	ldr	r1, [pc, #292]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 8086 	bne.w	8003854 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800374e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fe f9e2 	bl	8001b1c <HAL_GetTick>
 8003758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800375a:	e009      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800375c:	f7fe f9de 	bl	8001b1c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d902      	bls.n	8003770 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	73fb      	strb	r3, [r7, #15]
        break;
 800376e:	e005      	b.n	800377c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ef      	bne.n	800375c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d168      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d113      	bne.n	80037b0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003788:	4b35      	ldr	r3, [pc, #212]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <RCCEx_PLLSAI1_Config+0x1dc>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	0211      	lsls	r1, r2, #8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	06d2      	lsls	r2, r2, #27
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6852      	ldr	r2, [r2, #4]
 80037a2:	3a01      	subs	r2, #1
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	430a      	orrs	r2, r1
 80037a8:	492d      	ldr	r1, [pc, #180]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
 80037ae:	e02d      	b.n	800380c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d115      	bne.n	80037e2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6892      	ldr	r2, [r2, #8]
 80037c2:	0211      	lsls	r1, r2, #8
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6912      	ldr	r2, [r2, #16]
 80037c8:	0852      	lsrs	r2, r2, #1
 80037ca:	3a01      	subs	r2, #1
 80037cc:	0552      	lsls	r2, r2, #21
 80037ce:	4311      	orrs	r1, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6852      	ldr	r2, [r2, #4]
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	430a      	orrs	r2, r1
 80037da:	4921      	ldr	r1, [pc, #132]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	610b      	str	r3, [r1, #16]
 80037e0:	e014      	b.n	800380c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e2:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	0211      	lsls	r1, r2, #8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6952      	ldr	r2, [r2, #20]
 80037f4:	0852      	lsrs	r2, r2, #1
 80037f6:	3a01      	subs	r2, #1
 80037f8:	0652      	lsls	r2, r2, #25
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6852      	ldr	r2, [r2, #4]
 8003800:	3a01      	subs	r2, #1
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	430a      	orrs	r2, r1
 8003806:	4916      	ldr	r1, [pc, #88]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe f980 	bl	8001b1c <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800381e:	e009      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003820:	f7fe f97c 	bl	8001b1c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	73fb      	strb	r3, [r7, #15]
          break;
 8003832:	e005      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ef      	beq.n	8003820 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	4904      	ldr	r1, [pc, #16]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003850:	4313      	orrs	r3, r2
 8003852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	07ff800f 	.word	0x07ff800f
 8003868:	ff9f800f 	.word	0xff9f800f
 800386c:	f9ff800f 	.word	0xf9ff800f

08003870 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800387e:	4b72      	ldr	r3, [pc, #456]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00e      	beq.n	80038a8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800388a:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0203 	and.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d103      	bne.n	80038a2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
       ||
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d142      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
 80038a6:	e03f      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d018      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0x72>
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d825      	bhi.n	8003900 <RCCEx_PLLSAI2_Config+0x90>
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d002      	beq.n	80038be <RCCEx_PLLSAI2_Config+0x4e>
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d009      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x60>
 80038bc:	e020      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038be:	4b62      	ldr	r3, [pc, #392]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ce:	e01a      	b.n	8003906 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038d0:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d116      	bne.n	800390a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e0:	e013      	b.n	800390a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038e2:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ee:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038fe:	e006      	b.n	800390e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e004      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800390e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d108      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003916:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4949      	ldr	r1, [pc, #292]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 8086 	bne.w	8003a3c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003930:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a44      	ldr	r2, [pc, #272]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fe f8ee 	bl	8001b1c <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003942:	e009      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003944:	f7fe f8ea 	bl	8001b1c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d902      	bls.n	8003958 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	73fb      	strb	r3, [r7, #15]
        break;
 8003956:	e005      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ef      	bne.n	8003944 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d168      	bne.n	8003a3c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6892      	ldr	r2, [r2, #8]
 800397c:	0211      	lsls	r1, r2, #8
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	06d2      	lsls	r2, r2, #27
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6852      	ldr	r2, [r2, #4]
 800398a:	3a01      	subs	r2, #1
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	430a      	orrs	r2, r1
 8003990:	492d      	ldr	r1, [pc, #180]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	614b      	str	r3, [r1, #20]
 8003996:	e02d      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d115      	bne.n	80039ca <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <RCCEx_PLLSAI2_Config+0x1e0>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	0211      	lsls	r1, r2, #8
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6912      	ldr	r2, [r2, #16]
 80039b0:	0852      	lsrs	r2, r2, #1
 80039b2:	3a01      	subs	r2, #1
 80039b4:	0552      	lsls	r2, r2, #21
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6852      	ldr	r2, [r2, #4]
 80039bc:	3a01      	subs	r2, #1
 80039be:	0112      	lsls	r2, r2, #4
 80039c0:	430a      	orrs	r2, r1
 80039c2:	4921      	ldr	r1, [pc, #132]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	614b      	str	r3, [r1, #20]
 80039c8:	e014      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <RCCEx_PLLSAI2_Config+0x1e4>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	0211      	lsls	r1, r2, #8
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6952      	ldr	r2, [r2, #20]
 80039dc:	0852      	lsrs	r2, r2, #1
 80039de:	3a01      	subs	r2, #1
 80039e0:	0652      	lsls	r2, r2, #25
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6852      	ldr	r2, [r2, #4]
 80039e8:	3a01      	subs	r2, #1
 80039ea:	0112      	lsls	r2, r2, #4
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4916      	ldr	r1, [pc, #88]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe f88c 	bl	8001b1c <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a06:	e009      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a08:	f7fe f888 	bl	8001b1c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d902      	bls.n	8003a1c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	73fb      	strb	r3, [r7, #15]
          break;
 8003a1a:	e005      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ef      	beq.n	8003a08 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	4904      	ldr	r1, [pc, #16]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	07ff800f 	.word	0x07ff800f
 8003a50:	ff9f800f 	.word	0xff9f800f
 8003a54:	f9ff800f 	.word	0xf9ff800f

08003a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e095      	b.n	8003b96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7a:	d009      	beq.n	8003a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61da      	str	r2, [r3, #28]
 8003a82:	e005      	b.n	8003a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fe9a 	bl	80017e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad0:	d902      	bls.n	8003ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e002      	b.n	8003ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ae6:	d007      	beq.n	8003af8 <HAL_SPI_Init+0xa0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	ea42 0103 	orr.w	r1, r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	0c1b      	lsrs	r3, r3, #16
 8003b54:	f003 0204 	and.w	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b74:	ea42 0103 	orr.w	r1, r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b088      	sub	sp, #32
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_SPI_Transmit+0x22>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e158      	b.n	8003e72 <HAL_SPI_Transmit+0x2d4>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc8:	f7fd ffa8 	bl	8001b1c <HAL_GetTick>
 8003bcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
 8003be0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003be2:	e13d      	b.n	8003e60 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_SPI_Transmit+0x52>
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bf4:	e134      	b.n	8003e60 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	88fa      	ldrh	r2, [r7, #6]
 8003c14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c40:	d10f      	bne.n	8003c62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d007      	beq.n	8003c80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c88:	d94b      	bls.n	8003d22 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_SPI_Transmit+0xfa>
 8003c92:	8afb      	ldrh	r3, [r7, #22]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d13e      	bne.n	8003d16 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	881a      	ldrh	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	1c9a      	adds	r2, r3, #2
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cbc:	e02b      	b.n	8003d16 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d112      	bne.n	8003cf2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cf0:	e011      	b.n	8003d16 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf2:	f7fd ff13 	bl	8001b1c <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d803      	bhi.n	8003d0a <HAL_SPI_Transmit+0x16c>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d102      	bne.n	8003d10 <HAL_SPI_Transmit+0x172>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d14:	e0a4      	b.n	8003e60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ce      	bne.n	8003cbe <HAL_SPI_Transmit+0x120>
 8003d20:	e07c      	b.n	8003e1c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Transmit+0x192>
 8003d2a:	8afb      	ldrh	r3, [r7, #22]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d170      	bne.n	8003e12 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d912      	bls.n	8003d60 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	1c9a      	adds	r2, r3, #2
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b02      	subs	r3, #2
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d5e:	e058      	b.n	8003e12 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d86:	e044      	b.n	8003e12 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d12b      	bne.n	8003dee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d912      	bls.n	8003dc6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	881a      	ldrh	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	1c9a      	adds	r2, r3, #2
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b02      	subs	r3, #2
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc4:	e025      	b.n	8003e12 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dec:	e011      	b.n	8003e12 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7fd fe95 	bl	8001b1c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d803      	bhi.n	8003e06 <HAL_SPI_Transmit+0x268>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d102      	bne.n	8003e0c <HAL_SPI_Transmit+0x26e>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e10:	e026      	b.n	8003e60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1b5      	bne.n	8003d88 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fb69 	bl	80044f8 <SPI_EndRxTxTransaction>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e000      	b.n	8003e60 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e70:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b08a      	sub	sp, #40	; 0x28
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x26>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e1fb      	b.n	8004298 <HAL_SPI_TransmitReceive+0x41e>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea8:	f7fd fe38 	bl	8001b1c <HAL_GetTick>
 8003eac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ebc:	887b      	ldrh	r3, [r7, #2]
 8003ebe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ec4:	7efb      	ldrb	r3, [r7, #27]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x6e>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed0:	d106      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x66>
 8003eda:	7efb      	ldrb	r3, [r7, #27]
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d003      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ee6:	e1cd      	b.n	8004284 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x80>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x80>
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f00:	e1c0      	b.n	8004284 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d003      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2205      	movs	r2, #5
 8003f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	887a      	ldrh	r2, [r7, #2]
 8003f26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	887a      	ldrh	r2, [r7, #2]
 8003f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	887a      	ldrh	r2, [r7, #2]
 8003f42:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f58:	d802      	bhi.n	8003f60 <HAL_SPI_TransmitReceive+0xe6>
 8003f5a:	8a3b      	ldrh	r3, [r7, #16]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d908      	bls.n	8003f72 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	e007      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f80:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d007      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fa8:	d97c      	bls.n	80040a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_TransmitReceive+0x13e>
 8003fb2:	8a7b      	ldrh	r3, [r7, #18]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d169      	bne.n	800408c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	881a      	ldrh	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fdc:	e056      	b.n	800408c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d11b      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x1aa>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x1aa>
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d113      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	881a      	ldrh	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	1c9a      	adds	r2, r3, #2
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d11c      	bne.n	800406c <HAL_SPI_TransmitReceive+0x1f2>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	b292      	uxth	r2, r2
 800404a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	1c9a      	adds	r2, r3, #2
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004068:	2301      	movs	r3, #1
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800406c:	f7fd fd56 	bl	8001b1c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004078:	429a      	cmp	r2, r3
 800407a:	d807      	bhi.n	800408c <HAL_SPI_TransmitReceive+0x212>
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d003      	beq.n	800408c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800408a:	e0fb      	b.n	8004284 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1a3      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x164>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d19d      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x164>
 80040a2:	e0df      	b.n	8004264 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_SPI_TransmitReceive+0x23a>
 80040ac:	8a7b      	ldrh	r3, [r7, #18]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	f040 80cb 	bne.w	800424a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d912      	bls.n	80040e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	1c9a      	adds	r2, r3, #2
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b02      	subs	r3, #2
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040e2:	e0b2      	b.n	800424a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	7812      	ldrb	r2, [r2, #0]
 80040f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800410a:	e09e      	b.n	800424a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d134      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x30a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d02f      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x30a>
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	2b01      	cmp	r3, #1
 8004128:	d12c      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d912      	bls.n	800415a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	881a      	ldrh	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	1c9a      	adds	r2, r3, #2
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b02      	subs	r3, #2
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004158:	e012      	b.n	8004180 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d148      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x3aa>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d042      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d923      	bls.n	80041f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	b292      	uxth	r2, r2
 80041b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b02      	subs	r3, #2
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d81f      	bhi.n	8004220 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	e016      	b.n	8004220 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f103 020c 	add.w	r2, r3, #12
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004224:	f7fd fc7a 	bl	8001b1c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004230:	429a      	cmp	r2, r3
 8004232:	d803      	bhi.n	800423c <HAL_SPI_TransmitReceive+0x3c2>
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d102      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x3c8>
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004248:	e01c      	b.n	8004284 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f af5b 	bne.w	800410c <HAL_SPI_TransmitReceive+0x292>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	f47f af54 	bne.w	800410c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f945 	bl	80044f8 <SPI_EndRxTxTransaction>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d006      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	661a      	str	r2, [r3, #96]	; 0x60
 8004280:	e000      	b.n	8004284 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004282:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004298:	4618      	mov	r0, r3
 800429a:	3728      	adds	r7, #40	; 0x28
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042ae:	b2db      	uxtb	r3, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042cc:	f7fd fc26 	bl	8001b1c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042dc:	f7fd fc1e 	bl	8001b1c <HAL_GetTick>
 80042e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042e2:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	015b      	lsls	r3, r3, #5
 80042e8:	0d1b      	lsrs	r3, r3, #20
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f2:	e054      	b.n	800439e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d050      	beq.n	800439e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042fc:	f7fd fc0e 	bl	8001b1c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	429a      	cmp	r2, r3
 800430a:	d902      	bls.n	8004312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d13d      	bne.n	800438e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432a:	d111      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004334:	d004      	beq.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433e:	d107      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d10f      	bne.n	800437a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e017      	b.n	80043be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3b01      	subs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4013      	ands	r3, r2
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d19b      	bne.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000004 	.word	0x20000004

080043cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043de:	f7fd fb9d 	bl	8001b1c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	4413      	add	r3, r2
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043ee:	f7fd fb95 	bl	8001b1c <HAL_GetTick>
 80043f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043fc:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	00da      	lsls	r2, r3, #3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	0d1b      	lsrs	r3, r3, #20
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004414:	e060      	b.n	80044d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800441c:	d107      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0x62>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800442c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d050      	beq.n	80044d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004436:	f7fd fb71 	bl	8001b1c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	429a      	cmp	r2, r3
 8004444:	d902      	bls.n	800444c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d13d      	bne.n	80044c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800445a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004464:	d111      	bne.n	800448a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446e:	d004      	beq.n	800447a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d107      	bne.n	800448a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004488:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004492:	d10f      	bne.n	80044b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e010      	b.n	80044ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d196      	bne.n	8004416 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3728      	adds	r7, #40	; 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000004 	.word	0x20000004

080044f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff ff5b 	bl	80043cc <SPI_WaitFifoStateUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e027      	b.n	800457c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2200      	movs	r2, #0
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fec0 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e014      	b.n	800457c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2200      	movs	r2, #0
 800455a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff ff34 	bl	80043cc <SPI_WaitFifoStateUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e000      	b.n	800457c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e042      	b.n	800461c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fd f875 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2224      	movs	r2, #36	; 0x24
 80045b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8c4 	bl	8004754 <UART_SetConfig>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e022      	b.n	800461c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fb80 	bl	8004ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fc07 	bl	8004e28 <UART_CheckIdleState>
 800461a:	4603      	mov	r3, r0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463a:	2b20      	cmp	r3, #32
 800463c:	f040 8084 	bne.w	8004748 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Transmit+0x28>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e07c      	b.n	800474a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Transmit+0x3a>
 800465a:	2302      	movs	r3, #2
 800465c:	e075      	b.n	800474a <HAL_UART_Transmit+0x126>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2221      	movs	r2, #33	; 0x21
 8004672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fd fa51 	bl	8001b1c <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Transmit+0x84>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80046b8:	e02d      	b.n	8004716 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fbfa 	bl	8004ebe <UART_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e03a      	b.n	800474a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e6:	b292      	uxth	r2, r2
 80046e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	3302      	adds	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e008      	b.n	8004704 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b292      	uxth	r2, r2
 80046fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3301      	adds	r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1cb      	bne.n	80046ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	2140      	movs	r1, #64	; 0x40
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fbc6 	bl	8004ebe <UART_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e006      	b.n	800474a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004754:	b5b0      	push	{r4, r5, r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	4313      	orrs	r3, r2
 8004776:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4bb1      	ldr	r3, [pc, #708]	; (8004a44 <UART_SetConfig+0x2f0>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	69f9      	ldr	r1, [r7, #28]
 8004788:	430b      	orrs	r3, r1
 800478a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4aa6      	ldr	r2, [pc, #664]	; (8004a48 <UART_SetConfig+0x2f4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	69f9      	ldr	r1, [r7, #28]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f023 010f 	bic.w	r1, r3, #15
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a97      	ldr	r2, [pc, #604]	; (8004a4c <UART_SetConfig+0x2f8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d120      	bne.n	8004836 <UART_SetConfig+0xe2>
 80047f4:	4b96      	ldr	r3, [pc, #600]	; (8004a50 <UART_SetConfig+0x2fc>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d816      	bhi.n	8004830 <UART_SetConfig+0xdc>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0xb4>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	08004819 	.word	0x08004819
 800480c:	08004825 	.word	0x08004825
 8004810:	0800481f 	.word	0x0800481f
 8004814:	0800482b 	.word	0x0800482b
 8004818:	2301      	movs	r3, #1
 800481a:	76fb      	strb	r3, [r7, #27]
 800481c:	e0e7      	b.n	80049ee <UART_SetConfig+0x29a>
 800481e:	2302      	movs	r3, #2
 8004820:	76fb      	strb	r3, [r7, #27]
 8004822:	e0e4      	b.n	80049ee <UART_SetConfig+0x29a>
 8004824:	2304      	movs	r3, #4
 8004826:	76fb      	strb	r3, [r7, #27]
 8004828:	e0e1      	b.n	80049ee <UART_SetConfig+0x29a>
 800482a:	2308      	movs	r3, #8
 800482c:	76fb      	strb	r3, [r7, #27]
 800482e:	e0de      	b.n	80049ee <UART_SetConfig+0x29a>
 8004830:	2310      	movs	r3, #16
 8004832:	76fb      	strb	r3, [r7, #27]
 8004834:	e0db      	b.n	80049ee <UART_SetConfig+0x29a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a86      	ldr	r2, [pc, #536]	; (8004a54 <UART_SetConfig+0x300>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d132      	bne.n	80048a6 <UART_SetConfig+0x152>
 8004840:	4b83      	ldr	r3, [pc, #524]	; (8004a50 <UART_SetConfig+0x2fc>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b0c      	cmp	r3, #12
 800484c:	d828      	bhi.n	80048a0 <UART_SetConfig+0x14c>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0x100>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004889 	.word	0x08004889
 8004858:	080048a1 	.word	0x080048a1
 800485c:	080048a1 	.word	0x080048a1
 8004860:	080048a1 	.word	0x080048a1
 8004864:	08004895 	.word	0x08004895
 8004868:	080048a1 	.word	0x080048a1
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080048a1 	.word	0x080048a1
 8004874:	0800488f 	.word	0x0800488f
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a1 	.word	0x080048a1
 8004884:	0800489b 	.word	0x0800489b
 8004888:	2300      	movs	r3, #0
 800488a:	76fb      	strb	r3, [r7, #27]
 800488c:	e0af      	b.n	80049ee <UART_SetConfig+0x29a>
 800488e:	2302      	movs	r3, #2
 8004890:	76fb      	strb	r3, [r7, #27]
 8004892:	e0ac      	b.n	80049ee <UART_SetConfig+0x29a>
 8004894:	2304      	movs	r3, #4
 8004896:	76fb      	strb	r3, [r7, #27]
 8004898:	e0a9      	b.n	80049ee <UART_SetConfig+0x29a>
 800489a:	2308      	movs	r3, #8
 800489c:	76fb      	strb	r3, [r7, #27]
 800489e:	e0a6      	b.n	80049ee <UART_SetConfig+0x29a>
 80048a0:	2310      	movs	r3, #16
 80048a2:	76fb      	strb	r3, [r7, #27]
 80048a4:	e0a3      	b.n	80049ee <UART_SetConfig+0x29a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6b      	ldr	r2, [pc, #428]	; (8004a58 <UART_SetConfig+0x304>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d120      	bne.n	80048f2 <UART_SetConfig+0x19e>
 80048b0:	4b67      	ldr	r3, [pc, #412]	; (8004a50 <UART_SetConfig+0x2fc>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ba:	2b30      	cmp	r3, #48	; 0x30
 80048bc:	d013      	beq.n	80048e6 <UART_SetConfig+0x192>
 80048be:	2b30      	cmp	r3, #48	; 0x30
 80048c0:	d814      	bhi.n	80048ec <UART_SetConfig+0x198>
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d009      	beq.n	80048da <UART_SetConfig+0x186>
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d810      	bhi.n	80048ec <UART_SetConfig+0x198>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <UART_SetConfig+0x180>
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d006      	beq.n	80048e0 <UART_SetConfig+0x18c>
 80048d2:	e00b      	b.n	80048ec <UART_SetConfig+0x198>
 80048d4:	2300      	movs	r3, #0
 80048d6:	76fb      	strb	r3, [r7, #27]
 80048d8:	e089      	b.n	80049ee <UART_SetConfig+0x29a>
 80048da:	2302      	movs	r3, #2
 80048dc:	76fb      	strb	r3, [r7, #27]
 80048de:	e086      	b.n	80049ee <UART_SetConfig+0x29a>
 80048e0:	2304      	movs	r3, #4
 80048e2:	76fb      	strb	r3, [r7, #27]
 80048e4:	e083      	b.n	80049ee <UART_SetConfig+0x29a>
 80048e6:	2308      	movs	r3, #8
 80048e8:	76fb      	strb	r3, [r7, #27]
 80048ea:	e080      	b.n	80049ee <UART_SetConfig+0x29a>
 80048ec:	2310      	movs	r3, #16
 80048ee:	76fb      	strb	r3, [r7, #27]
 80048f0:	e07d      	b.n	80049ee <UART_SetConfig+0x29a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a59      	ldr	r2, [pc, #356]	; (8004a5c <UART_SetConfig+0x308>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d120      	bne.n	800493e <UART_SetConfig+0x1ea>
 80048fc:	4b54      	ldr	r3, [pc, #336]	; (8004a50 <UART_SetConfig+0x2fc>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004906:	2bc0      	cmp	r3, #192	; 0xc0
 8004908:	d013      	beq.n	8004932 <UART_SetConfig+0x1de>
 800490a:	2bc0      	cmp	r3, #192	; 0xc0
 800490c:	d814      	bhi.n	8004938 <UART_SetConfig+0x1e4>
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d009      	beq.n	8004926 <UART_SetConfig+0x1d2>
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d810      	bhi.n	8004938 <UART_SetConfig+0x1e4>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <UART_SetConfig+0x1cc>
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d006      	beq.n	800492c <UART_SetConfig+0x1d8>
 800491e:	e00b      	b.n	8004938 <UART_SetConfig+0x1e4>
 8004920:	2300      	movs	r3, #0
 8004922:	76fb      	strb	r3, [r7, #27]
 8004924:	e063      	b.n	80049ee <UART_SetConfig+0x29a>
 8004926:	2302      	movs	r3, #2
 8004928:	76fb      	strb	r3, [r7, #27]
 800492a:	e060      	b.n	80049ee <UART_SetConfig+0x29a>
 800492c:	2304      	movs	r3, #4
 800492e:	76fb      	strb	r3, [r7, #27]
 8004930:	e05d      	b.n	80049ee <UART_SetConfig+0x29a>
 8004932:	2308      	movs	r3, #8
 8004934:	76fb      	strb	r3, [r7, #27]
 8004936:	e05a      	b.n	80049ee <UART_SetConfig+0x29a>
 8004938:	2310      	movs	r3, #16
 800493a:	76fb      	strb	r3, [r7, #27]
 800493c:	e057      	b.n	80049ee <UART_SetConfig+0x29a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a47      	ldr	r2, [pc, #284]	; (8004a60 <UART_SetConfig+0x30c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d125      	bne.n	8004994 <UART_SetConfig+0x240>
 8004948:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <UART_SetConfig+0x2fc>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004956:	d017      	beq.n	8004988 <UART_SetConfig+0x234>
 8004958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800495c:	d817      	bhi.n	800498e <UART_SetConfig+0x23a>
 800495e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004962:	d00b      	beq.n	800497c <UART_SetConfig+0x228>
 8004964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004968:	d811      	bhi.n	800498e <UART_SetConfig+0x23a>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <UART_SetConfig+0x222>
 800496e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004972:	d006      	beq.n	8004982 <UART_SetConfig+0x22e>
 8004974:	e00b      	b.n	800498e <UART_SetConfig+0x23a>
 8004976:	2300      	movs	r3, #0
 8004978:	76fb      	strb	r3, [r7, #27]
 800497a:	e038      	b.n	80049ee <UART_SetConfig+0x29a>
 800497c:	2302      	movs	r3, #2
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	e035      	b.n	80049ee <UART_SetConfig+0x29a>
 8004982:	2304      	movs	r3, #4
 8004984:	76fb      	strb	r3, [r7, #27]
 8004986:	e032      	b.n	80049ee <UART_SetConfig+0x29a>
 8004988:	2308      	movs	r3, #8
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e02f      	b.n	80049ee <UART_SetConfig+0x29a>
 800498e:	2310      	movs	r3, #16
 8004990:	76fb      	strb	r3, [r7, #27]
 8004992:	e02c      	b.n	80049ee <UART_SetConfig+0x29a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <UART_SetConfig+0x2f4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d125      	bne.n	80049ea <UART_SetConfig+0x296>
 800499e:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <UART_SetConfig+0x2fc>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ac:	d017      	beq.n	80049de <UART_SetConfig+0x28a>
 80049ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b2:	d817      	bhi.n	80049e4 <UART_SetConfig+0x290>
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b8:	d00b      	beq.n	80049d2 <UART_SetConfig+0x27e>
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049be:	d811      	bhi.n	80049e4 <UART_SetConfig+0x290>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <UART_SetConfig+0x278>
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c8:	d006      	beq.n	80049d8 <UART_SetConfig+0x284>
 80049ca:	e00b      	b.n	80049e4 <UART_SetConfig+0x290>
 80049cc:	2300      	movs	r3, #0
 80049ce:	76fb      	strb	r3, [r7, #27]
 80049d0:	e00d      	b.n	80049ee <UART_SetConfig+0x29a>
 80049d2:	2302      	movs	r3, #2
 80049d4:	76fb      	strb	r3, [r7, #27]
 80049d6:	e00a      	b.n	80049ee <UART_SetConfig+0x29a>
 80049d8:	2304      	movs	r3, #4
 80049da:	76fb      	strb	r3, [r7, #27]
 80049dc:	e007      	b.n	80049ee <UART_SetConfig+0x29a>
 80049de:	2308      	movs	r3, #8
 80049e0:	76fb      	strb	r3, [r7, #27]
 80049e2:	e004      	b.n	80049ee <UART_SetConfig+0x29a>
 80049e4:	2310      	movs	r3, #16
 80049e6:	76fb      	strb	r3, [r7, #27]
 80049e8:	e001      	b.n	80049ee <UART_SetConfig+0x29a>
 80049ea:	2310      	movs	r3, #16
 80049ec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <UART_SetConfig+0x2f4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	f040 809f 	bne.w	8004b38 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049fa:	7efb      	ldrb	r3, [r7, #27]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d837      	bhi.n	8004a70 <UART_SetConfig+0x31c>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x2b4>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a71 	.word	0x08004a71
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a71 	.word	0x08004a71
 8004a18:	08004a3b 	.word	0x08004a3b
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	08004a71 	.word	0x08004a71
 8004a24:	08004a71 	.word	0x08004a71
 8004a28:	08004a69 	.word	0x08004a69
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fe fa0e 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8004a30:	6178      	str	r0, [r7, #20]
        break;
 8004a32:	e022      	b.n	8004a7a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <UART_SetConfig+0x310>)
 8004a36:	617b      	str	r3, [r7, #20]
        break;
 8004a38:	e01f      	b.n	8004a7a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3a:	f7fe f96f 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8004a3e:	6178      	str	r0, [r7, #20]
        break;
 8004a40:	e01b      	b.n	8004a7a <UART_SetConfig+0x326>
 8004a42:	bf00      	nop
 8004a44:	cfff69f3 	.word	0xcfff69f3
 8004a48:	40008000 	.word	0x40008000
 8004a4c:	40013800 	.word	0x40013800
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40004400 	.word	0x40004400
 8004a58:	40004800 	.word	0x40004800
 8004a5c:	40004c00 	.word	0x40004c00
 8004a60:	40005000 	.word	0x40005000
 8004a64:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6c:	617b      	str	r3, [r7, #20]
        break;
 8004a6e:	e004      	b.n	8004a7a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	76bb      	strb	r3, [r7, #26]
        break;
 8004a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8119 	beq.w	8004cb4 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	4a95      	ldr	r2, [pc, #596]	; (8004cdc <UART_SetConfig+0x588>)
 8004a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a94:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d305      	bcc.n	8004ab2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d902      	bls.n	8004ab8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	76bb      	strb	r3, [r7, #26]
 8004ab6:	e0fd      	b.n	8004cb4 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	4a85      	ldr	r2, [pc, #532]	; (8004cdc <UART_SetConfig+0x588>)
 8004ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	f7fb fbee 	bl	80002b0 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	020b      	lsls	r3, r1, #8
 8004ae6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004aea:	0202      	lsls	r2, r0, #8
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	6849      	ldr	r1, [r1, #4]
 8004af0:	0849      	lsrs	r1, r1, #1
 8004af2:	4608      	mov	r0, r1
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	1814      	adds	r4, r2, r0
 8004afa:	eb43 0501 	adc.w	r5, r3, r1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	4620      	mov	r0, r4
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	f7fb fbd0 	bl	80002b0 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4613      	mov	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1e:	d308      	bcc.n	8004b32 <UART_SetConfig+0x3de>
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b26:	d204      	bcs.n	8004b32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	60da      	str	r2, [r3, #12]
 8004b30:	e0c0      	b.n	8004cb4 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	76bb      	strb	r3, [r7, #26]
 8004b36:	e0bd      	b.n	8004cb4 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b40:	d164      	bne.n	8004c0c <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8004b42:	7efb      	ldrb	r3, [r7, #27]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d828      	bhi.n	8004b9a <UART_SetConfig+0x446>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0x3fc>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004b7d 	.word	0x08004b7d
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	08004b9b 	.word	0x08004b9b
 8004b60:	08004b8b 	.word	0x08004b8b
 8004b64:	08004b9b 	.word	0x08004b9b
 8004b68:	08004b9b 	.word	0x08004b9b
 8004b6c:	08004b9b 	.word	0x08004b9b
 8004b70:	08004b93 	.word	0x08004b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b74:	f7fe f96a 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8004b78:	6178      	str	r0, [r7, #20]
        break;
 8004b7a:	e013      	b.n	8004ba4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7fe f97c 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8004b80:	6178      	str	r0, [r7, #20]
        break;
 8004b82:	e00f      	b.n	8004ba4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b84:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <UART_SetConfig+0x58c>)
 8004b86:	617b      	str	r3, [r7, #20]
        break;
 8004b88:	e00c      	b.n	8004ba4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7fe f8c7 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8004b8e:	6178      	str	r0, [r7, #20]
        break;
 8004b90:	e008      	b.n	8004ba4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b96:	617b      	str	r3, [r7, #20]
        break;
 8004b98:	e004      	b.n	8004ba4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	76bb      	strb	r3, [r7, #26]
        break;
 8004ba2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8084 	beq.w	8004cb4 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	4a4a      	ldr	r2, [pc, #296]	; (8004cdc <UART_SetConfig+0x588>)
 8004bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bbe:	005a      	lsls	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b0f      	cmp	r3, #15
 8004bd6:	d916      	bls.n	8004c06 <UART_SetConfig+0x4b2>
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bde:	d212      	bcs.n	8004c06 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f023 030f 	bic.w	r3, r3, #15
 8004be8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	89fb      	ldrh	r3, [r7, #14]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	89fa      	ldrh	r2, [r7, #14]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	e056      	b.n	8004cb4 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	76bb      	strb	r3, [r7, #26]
 8004c0a:	e053      	b.n	8004cb4 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c0c:	7efb      	ldrb	r3, [r7, #27]
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d827      	bhi.n	8004c62 <UART_SetConfig+0x50e>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x4c4>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c45 	.word	0x08004c45
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c63 	.word	0x08004c63
 8004c28:	08004c53 	.word	0x08004c53
 8004c2c:	08004c63 	.word	0x08004c63
 8004c30:	08004c63 	.word	0x08004c63
 8004c34:	08004c63 	.word	0x08004c63
 8004c38:	08004c5b 	.word	0x08004c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fe f906 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8004c40:	6178      	str	r0, [r7, #20]
        break;
 8004c42:	e013      	b.n	8004c6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c44:	f7fe f918 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8004c48:	6178      	str	r0, [r7, #20]
        break;
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <UART_SetConfig+0x58c>)
 8004c4e:	617b      	str	r3, [r7, #20]
        break;
 8004c50:	e00c      	b.n	8004c6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fe f863 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8004c56:	6178      	str	r0, [r7, #20]
        break;
 8004c58:	e008      	b.n	8004c6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	617b      	str	r3, [r7, #20]
        break;
 8004c60:	e004      	b.n	8004c6c <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	76bb      	strb	r3, [r7, #26]
        break;
 8004c6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d020      	beq.n	8004cb4 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <UART_SetConfig+0x588>)
 8004c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	441a      	add	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b0f      	cmp	r3, #15
 8004c9a:	d909      	bls.n	8004cb0 <UART_SetConfig+0x55c>
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca2:	d205      	bcs.n	8004cb0 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	e001      	b.n	8004cb4 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004cd0:	7ebb      	ldrb	r3, [r7, #26]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	08009834 	.word	0x08009834
 8004ce0:	00f42400 	.word	0x00f42400

08004ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de2:	d10a      	bne.n	8004dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e38:	f7fc fe70 	bl	8001b1c <HAL_GetTick>
 8004e3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d10e      	bne.n	8004e6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f82f 	bl	8004ebe <UART_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e025      	b.n	8004eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d10e      	bne.n	8004e96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f819 	bl	8004ebe <UART_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e00f      	b.n	8004eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b09c      	sub	sp, #112	; 0x70
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ece:	e0a9      	b.n	8005024 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	f000 80a5 	beq.w	8005024 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eda:	f7fc fe1f 	bl	8001b1c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d140      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f04:	667b      	str	r3, [r7, #100]	; 0x64
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e6      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3308      	adds	r3, #8
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	663b      	str	r3, [r7, #96]	; 0x60
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f42:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e5      	bne.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e069      	b.n	8005046 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d051      	beq.n	8005024 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8e:	d149      	bne.n	8005024 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e6      	bne.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	613b      	str	r3, [r7, #16]
   return(result);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3308      	adds	r3, #8
 8004fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fec:	623a      	str	r2, [r7, #32]
 8004fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	69f9      	ldr	r1, [r7, #28]
 8004ff2:	6a3a      	ldr	r2, [r7, #32]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e5      	bne.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e010      	b.n	8005046 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69da      	ldr	r2, [r3, #28]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4013      	ands	r3, r2
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	429a      	cmp	r2, r3
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	429a      	cmp	r2, r3
 8005040:	f43f af46 	beq.w	8004ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3770      	adds	r7, #112	; 0x70
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_UARTEx_DisableFifoMode+0x16>
 8005060:	2302      	movs	r3, #2
 8005062:	e027      	b.n	80050b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2224      	movs	r2, #36	; 0x24
 8005070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005092:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e02d      	b.n	8005134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2224      	movs	r2, #36	; 0x24
 80050e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f84f 	bl	80051b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e02d      	b.n	80051b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2224      	movs	r2, #36	; 0x24
 8005160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f811 	bl	80051b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d108      	bne.n	80051da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051d8:	e031      	b.n	800523e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051da:	2308      	movs	r3, #8
 80051dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051de:	2308      	movs	r3, #8
 80051e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	0e5b      	lsrs	r3, r3, #25
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	0f5b      	lsrs	r3, r3, #29
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	7b3a      	ldrb	r2, [r7, #12]
 8005206:	4911      	ldr	r1, [pc, #68]	; (800524c <UARTEx_SetNbDataToProcess+0x94>)
 8005208:	5c8a      	ldrb	r2, [r1, r2]
 800520a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800520e:	7b3a      	ldrb	r2, [r7, #12]
 8005210:	490f      	ldr	r1, [pc, #60]	; (8005250 <UARTEx_SetNbDataToProcess+0x98>)
 8005212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005214:	fb93 f3f2 	sdiv	r3, r3, r2
 8005218:	b29a      	uxth	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	7b7a      	ldrb	r2, [r7, #13]
 8005224:	4909      	ldr	r1, [pc, #36]	; (800524c <UARTEx_SetNbDataToProcess+0x94>)
 8005226:	5c8a      	ldrb	r2, [r1, r2]
 8005228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800522c:	7b7a      	ldrb	r2, [r7, #13]
 800522e:	4908      	ldr	r1, [pc, #32]	; (8005250 <UARTEx_SetNbDataToProcess+0x98>)
 8005230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005232:	fb93 f3f2 	sdiv	r3, r3, r2
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	0800984c 	.word	0x0800984c
 8005250:	08009854 	.word	0x08009854

08005254 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005258:	4904      	ldr	r1, [pc, #16]	; (800526c <MX_FATFS_Init+0x18>)
 800525a:	4805      	ldr	r0, [pc, #20]	; (8005270 <MX_FATFS_Init+0x1c>)
 800525c:	f003 fd06 	bl	8008c6c <FATFS_LinkDriver>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <MX_FATFS_Init+0x20>)
 8005266:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}
 800526c:	200006f4 	.word	0x200006f4
 8005270:	20000010 	.word	0x20000010
 8005274:	200006f8 	.word	0x200006f8

08005278 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800527c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800527e:	4618      	mov	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_init(pdrv);
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fb ff1f 	bl	80010d8 <SD_init>
 800529a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_status(pdrv);
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fb fff1 	bl	8001298 <SD_status>
 80052b6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_read(pdrv, buff, sector, count);
 80052d0:	7bf8      	ldrb	r0, [r7, #15]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	f7fb fff4 	bl	80012c4 <SD_read>
 80052dc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4603      	mov	r3, r0
 80052f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_write(pdrv, buff, sector, count);
 80052f6:	7bf8      	ldrb	r0, [r7, #15]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	f7fc f828 	bl	8001352 <SD_write>
 8005302:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	603a      	str	r2, [r7, #0]
 8005316:	71fb      	strb	r3, [r7, #7]
 8005318:	460b      	mov	r3, r1
 800531a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_ioctl(pdrv, cmd, buff);
 800531c:	79b9      	ldrb	r1, [r7, #6]
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fc f86e 	bl	8001404 <SD_ioctl>
 8005328:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <disk_status+0x30>)
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	79fa      	ldrb	r2, [r7, #7]
 800534c:	4905      	ldr	r1, [pc, #20]	; (8005364 <disk_status+0x30>)
 800534e:	440a      	add	r2, r1
 8005350:	7a12      	ldrb	r2, [r2, #8]
 8005352:	4610      	mov	r0, r2
 8005354:	4798      	blx	r3
 8005356:	4603      	mov	r3, r0
 8005358:	73fb      	strb	r3, [r7, #15]
  return stat;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	200002d4 	.word	0x200002d4

08005368 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <disk_initialize+0x48>)
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d111      	bne.n	80053a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <disk_initialize+0x48>)
 8005384:	2101      	movs	r1, #1
 8005386:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <disk_initialize+0x48>)
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	79fa      	ldrb	r2, [r7, #7]
 8005396:	4906      	ldr	r1, [pc, #24]	; (80053b0 <disk_initialize+0x48>)
 8005398:	440a      	add	r2, r1
 800539a:	7a12      	ldrb	r2, [r2, #8]
 800539c:	4610      	mov	r0, r2
 800539e:	4798      	blx	r3
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200002d4 	.word	0x200002d4

080053b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4603      	mov	r3, r0
 80053c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <disk_read+0x3c>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	689c      	ldr	r4, [r3, #8]
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	4a07      	ldr	r2, [pc, #28]	; (80053f0 <disk_read+0x3c>)
 80053d4:	4413      	add	r3, r2
 80053d6:	7a18      	ldrb	r0, [r3, #8]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	47a0      	blx	r4
 80053e0:	4603      	mov	r3, r0
 80053e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd90      	pop	{r4, r7, pc}
 80053ee:	bf00      	nop
 80053f0:	200002d4 	.word	0x200002d4

080053f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4603      	mov	r3, r0
 8005402:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <disk_write+0x3c>)
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68dc      	ldr	r4, [r3, #12]
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	4a07      	ldr	r2, [pc, #28]	; (8005430 <disk_write+0x3c>)
 8005414:	4413      	add	r3, r2
 8005416:	7a18      	ldrb	r0, [r3, #8]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	47a0      	blx	r4
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]
  return res;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	bf00      	nop
 8005430:	200002d4 	.word	0x200002d4

08005434 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	603a      	str	r2, [r7, #0]
 800543e:	71fb      	strb	r3, [r7, #7]
 8005440:	460b      	mov	r3, r1
 8005442:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	4a09      	ldr	r2, [pc, #36]	; (800546c <disk_ioctl+0x38>)
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	79fa      	ldrb	r2, [r7, #7]
 8005452:	4906      	ldr	r1, [pc, #24]	; (800546c <disk_ioctl+0x38>)
 8005454:	440a      	add	r2, r1
 8005456:	7a10      	ldrb	r0, [r2, #8]
 8005458:	79b9      	ldrb	r1, [r7, #6]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	4798      	blx	r3
 800545e:	4603      	mov	r3, r0
 8005460:	73fb      	strb	r3, [r7, #15]
  return res;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	200002d4 	.word	0x200002d4

08005470 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3301      	adds	r3, #1
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	b21a      	sxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	b21b      	sxth	r3, r3
 800548c:	4313      	orrs	r3, r2
 800548e:	b21b      	sxth	r3, r3
 8005490:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005492:	89fb      	ldrh	r3, [r7, #14]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3303      	adds	r3, #3
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	3202      	adds	r2, #2
 80054b8:	7812      	ldrb	r2, [r2, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	3201      	adds	r2, #1
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	7812      	ldrb	r2, [r2, #0]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80054d8:	68fb      	ldr	r3, [r7, #12]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	887a      	ldrh	r2, [r7, #2]
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	887b      	ldrh	r3, [r7, #2]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	887a      	ldrh	r2, [r7, #2]
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00d      	beq.n	80055aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	1c53      	adds	r3, r2, #1
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1c59      	adds	r1, r3, #1
 8005598:	6179      	str	r1, [r7, #20]
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f1      	bne.n	800558e <mem_cpy+0x1a>
	}
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80055b6:	b480      	push	{r7}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	617a      	str	r2, [r7, #20]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	607b      	str	r3, [r7, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f3      	bne.n	80055c6 <mem_set+0x10>
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80055ec:	b480      	push	{r7}
 80055ee:	b089      	sub	sp, #36	; 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	61fb      	str	r3, [r7, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	61fa      	str	r2, [r7, #28]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	61ba      	str	r2, [r7, #24]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	1acb      	subs	r3, r1, r3
 8005618:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3b01      	subs	r3, #1
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <mem_cmp+0x40>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0eb      	beq.n	8005604 <mem_cmp+0x18>

	return r;
 800562c:	697b      	ldr	r3, [r7, #20]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3724      	adds	r7, #36	; 0x24
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005644:	e002      	b.n	800564c <chk_chr+0x12>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3301      	adds	r3, #1
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <chk_chr+0x26>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	4293      	cmp	r3, r2
 800565e:	d1f2      	bne.n	8005646 <chk_chr+0xc>
	return *str;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	781b      	ldrb	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e029      	b.n	80056d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005684:	4a27      	ldr	r2, [pc, #156]	; (8005724 <chk_lock+0xb4>)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	4413      	add	r3, r2
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01d      	beq.n	80056ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005692:	4a24      	ldr	r2, [pc, #144]	; (8005724 <chk_lock+0xb4>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4413      	add	r3, r2
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d116      	bne.n	80056d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80056a4:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <chk_lock+0xb4>)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	4413      	add	r3, r2
 80056ac:	3304      	adds	r3, #4
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d10c      	bne.n	80056d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80056b8:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <chk_lock+0xb4>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	4413      	add	r3, r2
 80056c0:	3308      	adds	r3, #8
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d102      	bne.n	80056d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80056cc:	e007      	b.n	80056de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80056ce:	2301      	movs	r3, #1
 80056d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d9d2      	bls.n	8005684 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d109      	bne.n	80056f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <chk_lock+0x80>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d101      	bne.n	80056f4 <chk_lock+0x84>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e010      	b.n	8005716 <chk_lock+0xa6>
 80056f4:	2312      	movs	r3, #18
 80056f6:	e00e      	b.n	8005716 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d108      	bne.n	8005710 <chk_lock+0xa0>
 80056fe:	4a09      	ldr	r2, [pc, #36]	; (8005724 <chk_lock+0xb4>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4413      	add	r3, r2
 8005706:	330c      	adds	r3, #12
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570e:	d101      	bne.n	8005714 <chk_lock+0xa4>
 8005710:	2310      	movs	r3, #16
 8005712:	e000      	b.n	8005716 <chk_lock+0xa6>
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	200000b4 	.word	0x200000b4

08005728 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	e002      	b.n	800573a <enq_lock+0x12>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3301      	adds	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d806      	bhi.n	800574e <enq_lock+0x26>
 8005740:	4a09      	ldr	r2, [pc, #36]	; (8005768 <enq_lock+0x40>)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	4413      	add	r3, r2
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f2      	bne.n	8005734 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b02      	cmp	r3, #2
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	200000b4 	.word	0x200000b4

0800576c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e01f      	b.n	80057bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800577c:	4a41      	ldr	r2, [pc, #260]	; (8005884 <inc_lock+0x118>)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	4413      	add	r3, r2
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d113      	bne.n	80057b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800578e:	4a3d      	ldr	r2, [pc, #244]	; (8005884 <inc_lock+0x118>)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	4413      	add	r3, r2
 8005796:	3304      	adds	r3, #4
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800579e:	429a      	cmp	r2, r3
 80057a0:	d109      	bne.n	80057b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80057a2:	4a38      	ldr	r2, [pc, #224]	; (8005884 <inc_lock+0x118>)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	4413      	add	r3, r2
 80057aa:	3308      	adds	r3, #8
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d006      	beq.n	80057c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d9dc      	bls.n	800577c <inc_lock+0x10>
 80057c2:	e000      	b.n	80057c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80057c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d132      	bne.n	8005832 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e002      	b.n	80057d8 <inc_lock+0x6c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3301      	adds	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d806      	bhi.n	80057ec <inc_lock+0x80>
 80057de:	4a29      	ldr	r2, [pc, #164]	; (8005884 <inc_lock+0x118>)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	4413      	add	r3, r2
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f2      	bne.n	80057d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d101      	bne.n	80057f6 <inc_lock+0x8a>
 80057f2:	2300      	movs	r3, #0
 80057f4:	e040      	b.n	8005878 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4922      	ldr	r1, [pc, #136]	; (8005884 <inc_lock+0x118>)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	440b      	add	r3, r1
 8005802:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	491e      	ldr	r1, [pc, #120]	; (8005884 <inc_lock+0x118>)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	440b      	add	r3, r1
 8005810:	3304      	adds	r3, #4
 8005812:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695a      	ldr	r2, [r3, #20]
 8005818:	491a      	ldr	r1, [pc, #104]	; (8005884 <inc_lock+0x118>)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	440b      	add	r3, r1
 8005820:	3308      	adds	r3, #8
 8005822:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <inc_lock+0x118>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	4413      	add	r3, r2
 800582c:	330c      	adds	r3, #12
 800582e:	2200      	movs	r2, #0
 8005830:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <inc_lock+0xe0>
 8005838:	4a12      	ldr	r2, [pc, #72]	; (8005884 <inc_lock+0x118>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	4413      	add	r3, r2
 8005840:	330c      	adds	r3, #12
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <inc_lock+0xe0>
 8005848:	2300      	movs	r3, #0
 800584a:	e015      	b.n	8005878 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d108      	bne.n	8005864 <inc_lock+0xf8>
 8005852:	4a0c      	ldr	r2, [pc, #48]	; (8005884 <inc_lock+0x118>)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	4413      	add	r3, r2
 800585a:	330c      	adds	r3, #12
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	3301      	adds	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	e001      	b.n	8005868 <inc_lock+0xfc>
 8005864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005868:	4906      	ldr	r1, [pc, #24]	; (8005884 <inc_lock+0x118>)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	440b      	add	r3, r1
 8005870:	330c      	adds	r3, #12
 8005872:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	200000b4 	.word	0x200000b4

08005888 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3b01      	subs	r3, #1
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d825      	bhi.n	80058e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800589c:	4a17      	ldr	r2, [pc, #92]	; (80058fc <dec_lock+0x74>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	4413      	add	r3, r2
 80058a4:	330c      	adds	r3, #12
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b0:	d101      	bne.n	80058b6 <dec_lock+0x2e>
 80058b2:	2300      	movs	r3, #0
 80058b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80058b6:	89fb      	ldrh	r3, [r7, #14]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <dec_lock+0x3a>
 80058bc:	89fb      	ldrh	r3, [r7, #14]
 80058be:	3b01      	subs	r3, #1
 80058c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80058c2:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <dec_lock+0x74>)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	4413      	add	r3, r2
 80058ca:	330c      	adds	r3, #12
 80058cc:	89fa      	ldrh	r2, [r7, #14]
 80058ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d105      	bne.n	80058e2 <dec_lock+0x5a>
 80058d6:	4a09      	ldr	r2, [pc, #36]	; (80058fc <dec_lock+0x74>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	4413      	add	r3, r2
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	737b      	strb	r3, [r7, #13]
 80058e6:	e001      	b.n	80058ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80058e8:	2302      	movs	r3, #2
 80058ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80058ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	200000b4 	.word	0x200000b4

08005900 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e010      	b.n	8005930 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800590e:	4a0d      	ldr	r2, [pc, #52]	; (8005944 <clear_lock+0x44>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	4413      	add	r3, r2
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d105      	bne.n	800592a <clear_lock+0x2a>
 800591e:	4a09      	ldr	r2, [pc, #36]	; (8005944 <clear_lock+0x44>)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	4413      	add	r3, r2
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d9eb      	bls.n	800590e <clear_lock+0xe>
	}
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	200000b4 	.word	0x200000b4

08005948 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	78db      	ldrb	r3, [r3, #3]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d034      	beq.n	80059c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	7858      	ldrb	r0, [r3, #1]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800596c:	2301      	movs	r3, #1
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	f7ff fd40 	bl	80053f4 <disk_write>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <sync_window+0x38>
			res = FR_DISK_ERR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
 800597e:	e022      	b.n	80059c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	1ad2      	subs	r2, r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	429a      	cmp	r2, r3
 8005994:	d217      	bcs.n	80059c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	789b      	ldrb	r3, [r3, #2]
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	e010      	b.n	80059c0 <sync_window+0x78>
					wsect += fs->fsize;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4413      	add	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	7858      	ldrb	r0, [r3, #1]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059b2:	2301      	movs	r3, #1
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	f7ff fd1d 	bl	80053f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3b01      	subs	r3, #1
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d8eb      	bhi.n	800599e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d01b      	beq.n	8005a20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff ffad 	bl	8005948 <sync_window>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d113      	bne.n	8005a20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	7858      	ldrb	r0, [r3, #1]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a02:	2301      	movs	r3, #1
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	f7ff fcd5 	bl	80053b4 <disk_read>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d004      	beq.n	8005a1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff ff87 	bl	8005948 <sync_window>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d159      	bne.n	8005af8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d149      	bne.n	8005ae0 <sync_fs+0xb4>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	791b      	ldrb	r3, [r3, #4]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d145      	bne.n	8005ae0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	899b      	ldrh	r3, [r3, #12]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2100      	movs	r1, #0
 8005a62:	f7ff fda8 	bl	80055b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3338      	adds	r3, #56	; 0x38
 8005a6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a6e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff fd37 	bl	80054e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3338      	adds	r3, #56	; 0x38
 8005a7c:	4921      	ldr	r1, [pc, #132]	; (8005b04 <sync_fs+0xd8>)
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fd4c 	bl	800551c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3338      	adds	r3, #56	; 0x38
 8005a88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005a8c:	491e      	ldr	r1, [pc, #120]	; (8005b08 <sync_fs+0xdc>)
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fd44 	bl	800551c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3338      	adds	r3, #56	; 0x38
 8005a98:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7ff fd3a 	bl	800551c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3338      	adds	r3, #56	; 0x38
 8005aac:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f7ff fd30 	bl	800551c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7858      	ldrb	r0, [r3, #1]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f7ff fc8d 	bl	80053f4 <disk_write>
			fs->fsi_flag = 0;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff fca3 	bl	8005434 <disk_ioctl>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <sync_fs+0xcc>
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	41615252 	.word	0x41615252
 8005b08:	61417272 	.word	0x61417272

08005b0c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	3b02      	subs	r3, #2
 8005b1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	3b02      	subs	r3, #2
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d301      	bcc.n	8005b2c <clust2sect+0x20>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e008      	b.n	8005b3e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	895b      	ldrh	r3, [r3, #10]
 8005b30:	461a      	mov	r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	fb03 f202 	mul.w	r2, r3, r2
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	4413      	add	r3, r2
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d904      	bls.n	8005b6a <get_fat+0x20>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d302      	bcc.n	8005b70 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	e0bb      	b.n	8005ce8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295
 8005b74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	f000 8083 	beq.w	8005c86 <get_fat+0x13c>
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	f300 80a7 	bgt.w	8005cd4 <get_fat+0x18a>
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d002      	beq.n	8005b90 <get_fat+0x46>
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d056      	beq.n	8005c3c <get_fat+0xf2>
 8005b8e:	e0a1      	b.n	8005cd4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	899b      	ldrh	r3, [r3, #12]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bae:	4413      	add	r3, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6938      	ldr	r0, [r7, #16]
 8005bb4:	f7ff ff0c 	bl	80059d0 <move_window>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 808d 	bne.w	8005cda <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	60fa      	str	r2, [r7, #12]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	8992      	ldrh	r2, [r2, #12]
 8005bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bce:	fb02 f201 	mul.w	r2, r2, r1
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bdc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	899b      	ldrh	r3, [r3, #12]
 8005be6:	4619      	mov	r1, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bee:	4413      	add	r3, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6938      	ldr	r0, [r7, #16]
 8005bf4:	f7ff feec 	bl	80059d0 <move_window>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d16f      	bne.n	8005cde <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	899b      	ldrh	r3, [r3, #12]
 8005c02:	461a      	mov	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c0a:	fb02 f201 	mul.w	r2, r2, r1
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <get_fat+0xe8>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	e002      	b.n	8005c38 <get_fat+0xee>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c38:	617b      	str	r3, [r7, #20]
			break;
 8005c3a:	e055      	b.n	8005ce8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	899b      	ldrh	r3, [r3, #12]
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	4619      	mov	r1, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c50:	4413      	add	r3, r2
 8005c52:	4619      	mov	r1, r3
 8005c54:	6938      	ldr	r0, [r7, #16]
 8005c56:	f7ff febb 	bl	80059d0 <move_window>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d140      	bne.n	8005ce2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	8992      	ldrh	r2, [r2, #12]
 8005c6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c72:	fb02 f200 	mul.w	r2, r2, r0
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	440b      	add	r3, r1
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fbf8 	bl	8005470 <ld_word>
 8005c80:	4603      	mov	r3, r0
 8005c82:	617b      	str	r3, [r7, #20]
			break;
 8005c84:	e030      	b.n	8005ce8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	899b      	ldrh	r3, [r3, #12]
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	4619      	mov	r1, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6938      	ldr	r0, [r7, #16]
 8005ca0:	f7ff fe96 	bl	80059d0 <move_window>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d11d      	bne.n	8005ce6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	8992      	ldrh	r2, [r2, #12]
 8005cb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cbc:	fb02 f200 	mul.w	r2, r2, r0
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff fbeb 	bl	80054a0 <ld_dword>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cd0:	617b      	str	r3, [r7, #20]
			break;
 8005cd2:	e009      	b.n	8005ce8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e006      	b.n	8005ce8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cda:	bf00      	nop
 8005cdc:	e004      	b.n	8005ce8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ce6:	bf00      	nop
		}
	}

	return val;
 8005ce8:	697b      	ldr	r3, [r7, #20]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005cf2:	b590      	push	{r4, r7, lr}
 8005cf4:	b089      	sub	sp, #36	; 0x24
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005cfe:	2302      	movs	r3, #2
 8005d00:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	f240 8102 	bls.w	8005f0e <put_fat+0x21c>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	f080 80fc 	bcs.w	8005f0e <put_fat+0x21c>
		switch (fs->fs_type) {
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	f000 80b6 	beq.w	8005e8c <put_fat+0x19a>
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	f300 80fd 	bgt.w	8005f20 <put_fat+0x22e>
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d003      	beq.n	8005d32 <put_fat+0x40>
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	f000 8083 	beq.w	8005e36 <put_fat+0x144>
 8005d30:	e0f6      	b.n	8005f20 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	085b      	lsrs	r3, r3, #1
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	899b      	ldrh	r3, [r3, #12]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d50:	4413      	add	r3, r2
 8005d52:	4619      	mov	r1, r3
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fe3b 	bl	80059d0 <move_window>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 80d6 	bne.w	8005f12 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	61ba      	str	r2, [r7, #24]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	8992      	ldrh	r2, [r2, #12]
 8005d76:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d7a:	fb02 f200 	mul.w	r2, r2, r0
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	440b      	add	r3, r1
 8005d82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <put_fat+0xb8>
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b25b      	sxtb	r3, r3
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	b25a      	sxtb	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	b25b      	sxtb	r3, r3
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b25b      	sxtb	r3, r3
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	e001      	b.n	8005dae <put_fat+0xbc>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	899b      	ldrh	r3, [r3, #12]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dc8:	4413      	add	r3, r2
 8005dca:	4619      	mov	r1, r3
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff fdff 	bl	80059d0 <move_window>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dd6:	7ffb      	ldrb	r3, [r7, #31]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f040 809c 	bne.w	8005f16 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	899b      	ldrh	r3, [r3, #12]
 8005de8:	461a      	mov	r2, r3
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005df0:	fb02 f200 	mul.w	r2, r2, r0
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	440b      	add	r3, r1
 8005df8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <put_fat+0x11a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e00e      	b.n	8005e2a <put_fat+0x138>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	b25b      	sxtb	r3, r3
 8005e12:	f023 030f 	bic.w	r3, r3, #15
 8005e16:	b25a      	sxtb	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	b25b      	sxtb	r3, r3
 8005e24:	4313      	orrs	r3, r2
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	70da      	strb	r2, [r3, #3]
			break;
 8005e34:	e074      	b.n	8005f20 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	899b      	ldrh	r3, [r3, #12]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	4619      	mov	r1, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff fdbe 	bl	80059d0 <move_window>
 8005e54:	4603      	mov	r3, r0
 8005e56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e58:	7ffb      	ldrb	r3, [r7, #31]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d15d      	bne.n	8005f1a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	8992      	ldrh	r2, [r2, #12]
 8005e6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e70:	fb02 f200 	mul.w	r2, r2, r0
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	440b      	add	r3, r1
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	b292      	uxth	r2, r2
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fb31 	bl	80054e6 <st_word>
			fs->wflag = 1;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	70da      	strb	r2, [r3, #3]
			break;
 8005e8a:	e049      	b.n	8005f20 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	899b      	ldrh	r3, [r3, #12]
 8005e94:	089b      	lsrs	r3, r3, #2
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff fd93 	bl	80059d0 <move_window>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005eae:	7ffb      	ldrb	r3, [r7, #31]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d134      	bne.n	8005f1e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	8992      	ldrh	r2, [r2, #12]
 8005ec8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ecc:	fb02 f200 	mul.w	r2, r2, r0
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fae3 	bl	80054a0 <ld_dword>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ee0:	4323      	orrs	r3, r4
 8005ee2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	8992      	ldrh	r2, [r2, #12]
 8005ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ef6:	fb02 f200 	mul.w	r2, r2, r0
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	440b      	add	r3, r1
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fb0b 	bl	800551c <st_dword>
			fs->wflag = 1;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	70da      	strb	r2, [r3, #3]
			break;
 8005f0c:	e008      	b.n	8005f20 <put_fat+0x22e>
		}
	}
 8005f0e:	bf00      	nop
 8005f10:	e006      	b.n	8005f20 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005f12:	bf00      	nop
 8005f14:	e004      	b.n	8005f20 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005f16:	bf00      	nop
 8005f18:	e002      	b.n	8005f20 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005f1e:	bf00      	nop
	return res;
 8005f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3724      	adds	r7, #36	; 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}

08005f2a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b088      	sub	sp, #32
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d904      	bls.n	8005f50 <remove_chain+0x26>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d301      	bcc.n	8005f54 <remove_chain+0x2a>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e04b      	b.n	8005fec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	69b8      	ldr	r0, [r7, #24]
 8005f62:	f7ff fec6 	bl	8005cf2 <put_fat>
 8005f66:	4603      	mov	r3, r0
 8005f68:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005f6a:	7ffb      	ldrb	r3, [r7, #31]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <remove_chain+0x4a>
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
 8005f72:	e03b      	b.n	8005fec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fde7 	bl	8005b4a <get_fat>
 8005f7c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d031      	beq.n	8005fe8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <remove_chain+0x64>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e02e      	b.n	8005fec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d101      	bne.n	8005f9a <remove_chain+0x70>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e028      	b.n	8005fec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	69b8      	ldr	r0, [r7, #24]
 8005fa0:	f7ff fea7 	bl	8005cf2 <put_fat>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005fa8:	7ffb      	ldrb	r3, [r7, #31]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <remove_chain+0x88>
 8005fae:	7ffb      	ldrb	r3, [r7, #31]
 8005fb0:	e01c      	b.n	8005fec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	3b02      	subs	r3, #2
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d20b      	bcs.n	8005fd8 <remove_chain+0xae>
			fs->free_clst++;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	791b      	ldrb	r3, [r3, #4]
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3c6      	bcc.n	8005f74 <remove_chain+0x4a>
 8005fe6:	e000      	b.n	8005fea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005fe8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <create_chain+0x2c>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	429a      	cmp	r2, r3
 800601e:	d31b      	bcc.n	8006058 <create_chain+0x64>
 8006020:	2301      	movs	r3, #1
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e018      	b.n	8006058 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff fd8e 	bl	8005b4a <get_fat>
 800602e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d801      	bhi.n	800603a <create_chain+0x46>
 8006036:	2301      	movs	r3, #1
 8006038:	e070      	b.n	800611c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d101      	bne.n	8006046 <create_chain+0x52>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	e06a      	b.n	800611c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	429a      	cmp	r2, r3
 800604e:	d201      	bcs.n	8006054 <create_chain+0x60>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	e063      	b.n	800611c <create_chain+0x128>
		scl = clst;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3301      	adds	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	429a      	cmp	r2, r3
 800606a:	d307      	bcc.n	800607c <create_chain+0x88>
				ncl = 2;
 800606c:	2302      	movs	r3, #2
 800606e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	429a      	cmp	r2, r3
 8006076:	d901      	bls.n	800607c <create_chain+0x88>
 8006078:	2300      	movs	r3, #0
 800607a:	e04f      	b.n	800611c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800607c:	69f9      	ldr	r1, [r7, #28]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fd63 	bl	8005b4a <get_fat>
 8006084:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d003      	beq.n	800609a <create_chain+0xa6>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d101      	bne.n	800609e <create_chain+0xaa>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	e03e      	b.n	800611c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d1da      	bne.n	800605c <create_chain+0x68>
 80060a6:	2300      	movs	r3, #0
 80060a8:	e038      	b.n	800611c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80060aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	69f9      	ldr	r1, [r7, #28]
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f7ff fe1d 	bl	8005cf2 <put_fat>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <create_chain+0xe2>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d006      	beq.n	80060d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6938      	ldr	r0, [r7, #16]
 80060ce:	f7ff fe10 	bl	8005cf2 <put_fat>
 80060d2:	4603      	mov	r3, r0
 80060d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d116      	bne.n	800610a <create_chain+0x116>
		fs->last_clst = ncl;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	3b02      	subs	r3, #2
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d804      	bhi.n	80060fa <create_chain+0x106>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	1e5a      	subs	r2, r3, #1
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	791b      	ldrb	r3, [r3, #4]
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	711a      	strb	r2, [r3, #4]
 8006108:	e007      	b.n	800611a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d102      	bne.n	8006116 <create_chain+0x122>
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	e000      	b.n	8006118 <create_chain+0x124>
 8006116:	2301      	movs	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800611a:	69fb      	ldr	r3, [r7, #28]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	3304      	adds	r3, #4
 800613a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	899b      	ldrh	r3, [r3, #12]
 8006140:	461a      	mov	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	fbb3 f3f2 	udiv	r3, r3, r2
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	8952      	ldrh	r2, [r2, #10]
 800614c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006150:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1d1a      	adds	r2, r3, #4
 8006156:	613a      	str	r2, [r7, #16]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <clmt_clust+0x42>
 8006162:	2300      	movs	r3, #0
 8006164:	e010      	b.n	8006188 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d307      	bcc.n	800617e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	3304      	adds	r3, #4
 800617a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800617c:	e7e9      	b.n	8006152 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800617e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
}
 8006188:	4618      	mov	r0, r3
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061aa:	d204      	bcs.n	80061b6 <dir_sdi+0x22>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <dir_sdi+0x26>
		return FR_INT_ERR;
 80061b6:	2302      	movs	r3, #2
 80061b8:	e071      	b.n	800629e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <dir_sdi+0x46>
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d902      	bls.n	80061da <dir_sdi+0x46>
		clst = fs->dirbase;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10c      	bne.n	80061fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	8912      	ldrh	r2, [r2, #8]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d301      	bcc.n	80061f0 <dir_sdi+0x5c>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e056      	b.n	800629e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	61da      	str	r2, [r3, #28]
 80061f8:	e02d      	b.n	8006256 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	895b      	ldrh	r3, [r3, #10]
 80061fe:	461a      	mov	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	899b      	ldrh	r3, [r3, #12]
 8006204:	fb03 f302 	mul.w	r3, r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800620a:	e019      	b.n	8006240 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff fc9a 	bl	8005b4a <get_fat>
 8006216:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d101      	bne.n	8006224 <dir_sdi+0x90>
 8006220:	2301      	movs	r3, #1
 8006222:	e03c      	b.n	800629e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d904      	bls.n	8006234 <dir_sdi+0xa0>
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	429a      	cmp	r2, r3
 8006232:	d301      	bcc.n	8006238 <dir_sdi+0xa4>
 8006234:	2302      	movs	r3, #2
 8006236:	e032      	b.n	800629e <dir_sdi+0x10a>
			ofs -= csz;
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	429a      	cmp	r2, r3
 8006246:	d2e1      	bcs.n	800620c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006248:	6979      	ldr	r1, [r7, #20]
 800624a:	6938      	ldr	r0, [r7, #16]
 800624c:	f7ff fc5e 	bl	8005b0c <clust2sect>
 8006250:	4602      	mov	r2, r0
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <dir_sdi+0xd4>
 8006264:	2302      	movs	r3, #2
 8006266:	e01a      	b.n	800629e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	899b      	ldrh	r3, [r3, #12]
 8006270:	4619      	mov	r1, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	fbb3 f3f1 	udiv	r3, r3, r1
 8006278:	441a      	add	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	899b      	ldrh	r3, [r3, #12]
 8006288:	461a      	mov	r2, r3
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006290:	fb02 f200 	mul.w	r2, r2, r0
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	18ca      	adds	r2, r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	3320      	adds	r3, #32
 80062bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <dir_next+0x28>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062cc:	d301      	bcc.n	80062d2 <dir_next+0x2c>
 80062ce:	2304      	movs	r3, #4
 80062d0:	e0bb      	b.n	800644a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	899b      	ldrh	r3, [r3, #12]
 80062d6:	461a      	mov	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	fbb3 f1f2 	udiv	r1, r3, r2
 80062de:	fb02 f201 	mul.w	r2, r2, r1
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 809d 	bne.w	8006424 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10b      	bne.n	8006314 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	8912      	ldrh	r2, [r2, #8]
 8006304:	4293      	cmp	r3, r2
 8006306:	f0c0 808d 	bcc.w	8006424 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	61da      	str	r2, [r3, #28]
 8006310:	2304      	movs	r3, #4
 8006312:	e09a      	b.n	800644a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	899b      	ldrh	r3, [r3, #12]
 8006318:	461a      	mov	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	8952      	ldrh	r2, [r2, #10]
 8006324:	3a01      	subs	r2, #1
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d17b      	bne.n	8006424 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7ff fc08 	bl	8005b4a <get_fat>
 800633a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d801      	bhi.n	8006346 <dir_next+0xa0>
 8006342:	2302      	movs	r3, #2
 8006344:	e081      	b.n	800644a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d101      	bne.n	8006352 <dir_next+0xac>
 800634e:	2301      	movs	r3, #1
 8006350:	e07b      	b.n	800644a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	d359      	bcc.n	8006410 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d104      	bne.n	800636c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	61da      	str	r2, [r3, #28]
 8006368:	2304      	movs	r3, #4
 800636a:	e06e      	b.n	800644a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f7ff fe3d 	bl	8005ff4 <create_chain>
 800637a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <dir_next+0xe0>
 8006382:	2307      	movs	r3, #7
 8006384:	e061      	b.n	800644a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <dir_next+0xea>
 800638c:	2302      	movs	r3, #2
 800638e:	e05c      	b.n	800644a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006396:	d101      	bne.n	800639c <dir_next+0xf6>
 8006398:	2301      	movs	r3, #1
 800639a:	e056      	b.n	800644a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff fad3 	bl	8005948 <sync_window>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <dir_next+0x106>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e04e      	b.n	800644a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	899b      	ldrh	r3, [r3, #12]
 80063b6:	461a      	mov	r2, r3
 80063b8:	2100      	movs	r1, #0
 80063ba:	f7ff f8fc 	bl	80055b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80063be:	2300      	movs	r3, #0
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	6979      	ldr	r1, [r7, #20]
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff fba1 	bl	8005b0c <clust2sect>
 80063ca:	4602      	mov	r2, r0
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	635a      	str	r2, [r3, #52]	; 0x34
 80063d0:	e012      	b.n	80063f8 <dir_next+0x152>
						fs->wflag = 1;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f7ff fab5 	bl	8005948 <sync_window>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <dir_next+0x142>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e030      	b.n	800644a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	3301      	adds	r3, #1
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	895b      	ldrh	r3, [r3, #10]
 80063fc:	461a      	mov	r2, r3
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	4293      	cmp	r3, r2
 8006402:	d3e6      	bcc.n	80063d2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006416:	6979      	ldr	r1, [r7, #20]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff fb77 	bl	8005b0c <clust2sect>
 800641e:	4602      	mov	r2, r0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	899b      	ldrh	r3, [r3, #12]
 8006434:	461a      	mov	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	fbb3 f0f2 	udiv	r0, r3, r2
 800643c:	fb02 f200 	mul.w	r2, r2, r0
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	18ca      	adds	r2, r1, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006462:	2100      	movs	r1, #0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fe95 	bl	8006194 <dir_sdi>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d12b      	bne.n	80064cc <dir_alloc+0x7a>
		n = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	4619      	mov	r1, r3
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f7ff faa6 	bl	80059d0 <move_window>
 8006484:	4603      	mov	r3, r0
 8006486:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11d      	bne.n	80064ca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2be5      	cmp	r3, #229	; 0xe5
 8006496:	d004      	beq.n	80064a2 <dir_alloc+0x50>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	3301      	adds	r3, #1
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d102      	bne.n	80064b6 <dir_alloc+0x64>
 80064b0:	e00c      	b.n	80064cc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80064b6:	2101      	movs	r1, #1
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff fef4 	bl	80062a6 <dir_next>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0d7      	beq.n	8006478 <dir_alloc+0x26>
 80064c8:	e000      	b.n	80064cc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80064ca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d101      	bne.n	80064d6 <dir_alloc+0x84>
 80064d2:	2307      	movs	r3, #7
 80064d4:	75fb      	strb	r3, [r7, #23]
	return res;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	331a      	adds	r3, #26
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe ffbe 	bl	8005470 <ld_word>
 80064f4:	4603      	mov	r3, r0
 80064f6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d109      	bne.n	8006514 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe ffb3 	bl	8005470 <ld_word>
 800650a:	4603      	mov	r3, r0
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006514:	68fb      	ldr	r3, [r7, #12]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	331a      	adds	r3, #26
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	b292      	uxth	r2, r2
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe ffd6 	bl	80054e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b03      	cmp	r3, #3
 8006540:	d109      	bne.n	8006556 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f103 0214 	add.w	r2, r3, #20
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	0c1b      	lsrs	r3, r3, #16
 800654c:	b29b      	uxth	r3, r3
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fe ffc8 	bl	80054e6 <st_word>
	}
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006560:	b590      	push	{r4, r7, lr}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	331a      	adds	r3, #26
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe ff7e 	bl	8005470 <ld_word>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <cmp_lfn+0x1e>
 800657a:	2300      	movs	r3, #0
 800657c:	e059      	b.n	8006632 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	4613      	mov	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006594:	2301      	movs	r3, #1
 8006596:	81fb      	strh	r3, [r7, #14]
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	e033      	b.n	8006606 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800659e:	4a27      	ldr	r2, [pc, #156]	; (800663c <cmp_lfn+0xdc>)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	4413      	add	r3, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe ff5f 	bl	8005470 <ld_word>
 80065b2:	4603      	mov	r3, r0
 80065b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80065b6:	89fb      	ldrh	r3, [r7, #14]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01a      	beq.n	80065f2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2bfe      	cmp	r3, #254	; 0xfe
 80065c0:	d812      	bhi.n	80065e8 <cmp_lfn+0x88>
 80065c2:	89bb      	ldrh	r3, [r7, #12]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f002 fb9d 	bl	8008d04 <ff_wtoupper>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461c      	mov	r4, r3
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	617a      	str	r2, [r7, #20]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f002 fb91 	bl	8008d04 <ff_wtoupper>
 80065e2:	4603      	mov	r3, r0
 80065e4:	429c      	cmp	r4, r3
 80065e6:	d001      	beq.n	80065ec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80065e8:	2300      	movs	r3, #0
 80065ea:	e022      	b.n	8006632 <cmp_lfn+0xd2>
			}
			wc = uc;
 80065ec:	89bb      	ldrh	r3, [r7, #12]
 80065ee:	81fb      	strh	r3, [r7, #14]
 80065f0:	e006      	b.n	8006600 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80065f2:	89bb      	ldrh	r3, [r7, #12]
 80065f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d001      	beq.n	8006600 <cmp_lfn+0xa0>
 80065fc:	2300      	movs	r3, #0
 80065fe:	e018      	b.n	8006632 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	3301      	adds	r3, #1
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b0c      	cmp	r3, #12
 800660a:	d9c8      	bls.n	800659e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <cmp_lfn+0xd0>
 8006618:	89fb      	ldrh	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <cmp_lfn+0xd0>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <cmp_lfn+0xd0>
 800662c:	2300      	movs	r3, #0
 800662e:	e000      	b.n	8006632 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006630:	2301      	movs	r3, #1
}
 8006632:	4618      	mov	r0, r3
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	bd90      	pop	{r4, r7, pc}
 800663a:	bf00      	nop
 800663c:	080098dc 	.word	0x080098dc

08006640 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	331a      	adds	r3, #26
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe ff0e 	bl	8005470 <ld_word>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <pick_lfn+0x1e>
 800665a:	2300      	movs	r3, #0
 800665c:	e04d      	b.n	80066fa <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006666:	1e5a      	subs	r2, r3, #1
 8006668:	4613      	mov	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006674:	2301      	movs	r3, #1
 8006676:	81fb      	strh	r3, [r7, #14]
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	e028      	b.n	80066d0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800667e:	4a21      	ldr	r2, [pc, #132]	; (8006704 <pick_lfn+0xc4>)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4413      	add	r3, r2
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	4413      	add	r3, r2
 800668c:	4618      	mov	r0, r3
 800668e:	f7fe feef 	bl	8005470 <ld_word>
 8006692:	4603      	mov	r3, r0
 8006694:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00f      	beq.n	80066bc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2bfe      	cmp	r3, #254	; 0xfe
 80066a0:	d901      	bls.n	80066a6 <pick_lfn+0x66>
 80066a2:	2300      	movs	r3, #0
 80066a4:	e029      	b.n	80066fa <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80066a6:	89bb      	ldrh	r3, [r7, #12]
 80066a8:	81fb      	strh	r3, [r7, #14]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	617a      	str	r2, [r7, #20]
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	89fa      	ldrh	r2, [r7, #14]
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e006      	b.n	80066ca <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80066bc:	89bb      	ldrh	r3, [r7, #12]
 80066be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d001      	beq.n	80066ca <pick_lfn+0x8a>
 80066c6:	2300      	movs	r3, #0
 80066c8:	e017      	b.n	80066fa <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3301      	adds	r3, #1
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b0c      	cmp	r3, #12
 80066d4:	d9d3      	bls.n	800667e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2bfe      	cmp	r3, #254	; 0xfe
 80066e6:	d901      	bls.n	80066ec <pick_lfn+0xac>
 80066e8:	2300      	movs	r3, #0
 80066ea:	e006      	b.n	80066fa <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	2200      	movs	r2, #0
 80066f6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80066f8:	2301      	movs	r3, #1
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	080098dc 	.word	0x080098dc

08006708 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4611      	mov	r1, r2
 8006714:	461a      	mov	r2, r3
 8006716:	460b      	mov	r3, r1
 8006718:	71fb      	strb	r3, [r7, #7]
 800671a:	4613      	mov	r3, r2
 800671c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	330d      	adds	r3, #13
 8006722:	79ba      	ldrb	r2, [r7, #6]
 8006724:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	330b      	adds	r3, #11
 800672a:	220f      	movs	r2, #15
 800672c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	330c      	adds	r3, #12
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	331a      	adds	r3, #26
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe fed2 	bl	80054e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	1e5a      	subs	r2, r3, #1
 8006746:	4613      	mov	r3, r2
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	82fb      	strh	r3, [r7, #22]
 8006756:	2300      	movs	r3, #0
 8006758:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800675a:	8afb      	ldrh	r3, [r7, #22]
 800675c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <put_lfn+0x6c>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	61fa      	str	r2, [r7, #28]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006774:	4a17      	ldr	r2, [pc, #92]	; (80067d4 <put_lfn+0xcc>)
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	4413      	add	r3, r2
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	8afa      	ldrh	r2, [r7, #22]
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fead 	bl	80054e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800678c:	8afb      	ldrh	r3, [r7, #22]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <put_lfn+0x90>
 8006792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006796:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	3301      	adds	r3, #1
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d9da      	bls.n	800675a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80067a4:	8afb      	ldrh	r3, [r7, #22]
 80067a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d006      	beq.n	80067bc <put_lfn+0xb4>
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <put_lfn+0xbc>
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	79fa      	ldrb	r2, [r7, #7]
 80067c8:	701a      	strb	r2, [r3, #0]
}
 80067ca:	bf00      	nop
 80067cc:	3720      	adds	r7, #32
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	080098dc 	.word	0x080098dc

080067d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	; 0x30
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80067e6:	220b      	movs	r2, #11
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7fe fec2 	bl	8005574 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b05      	cmp	r3, #5
 80067f4:	d92b      	bls.n	800684e <gen_numname+0x76>
		sr = seq;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80067fa:	e022      	b.n	8006842 <gen_numname+0x6a>
			wc = *lfn++;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	1c9a      	adds	r2, r3, #2
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006806:	2300      	movs	r3, #0
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
 800680a:	e017      	b.n	800683c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	005a      	lsls	r2, r3, #1
 8006810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	4413      	add	r3, r2
 8006818:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800681a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <gen_numname+0x5e>
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006830:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006834:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	3301      	adds	r3, #1
 800683a:	62bb      	str	r3, [r7, #40]	; 0x28
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	2b0f      	cmp	r3, #15
 8006840:	d9e4      	bls.n	800680c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1d8      	bne.n	80067fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800684e:	2307      	movs	r3, #7
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	b2db      	uxtb	r3, r3
 800685c:	3330      	adds	r3, #48	; 0x30
 800685e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006866:	2b39      	cmp	r3, #57	; 0x39
 8006868:	d904      	bls.n	8006874 <gen_numname+0x9c>
 800686a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800686e:	3307      	adds	r3, #7
 8006870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	1e5a      	subs	r2, r3, #1
 8006878:	62ba      	str	r2, [r7, #40]	; 0x28
 800687a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800687e:	4413      	add	r3, r2
 8006880:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006884:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	091b      	lsrs	r3, r3, #4
 800688c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1de      	bne.n	8006852 <gen_numname+0x7a>
	ns[i] = '~';
 8006894:	f107 0214 	add.w	r2, r7, #20
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	4413      	add	r3, r2
 800689c:	227e      	movs	r2, #126	; 0x7e
 800689e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80068a0:	2300      	movs	r3, #0
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	e002      	b.n	80068ac <gen_numname+0xd4>
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	3301      	adds	r3, #1
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d205      	bcs.n	80068c0 <gen_numname+0xe8>
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	4413      	add	r3, r2
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d1f2      	bne.n	80068a6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	2b07      	cmp	r3, #7
 80068c4:	d808      	bhi.n	80068d8 <gen_numname+0x100>
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80068cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80068d0:	4413      	add	r3, r2
 80068d2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80068d6:	e000      	b.n	80068da <gen_numname+0x102>
 80068d8:	2120      	movs	r1, #32
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	627a      	str	r2, [r7, #36]	; 0x24
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	460a      	mov	r2, r1
 80068e6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	2b07      	cmp	r3, #7
 80068ec:	d9e8      	bls.n	80068c0 <gen_numname+0xe8>
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	3730      	adds	r7, #48	; 0x30
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006904:	230b      	movs	r3, #11
 8006906:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	0852      	lsrs	r2, r2, #1
 800690e:	01db      	lsls	r3, r3, #7
 8006910:	4313      	orrs	r3, r2
 8006912:	b2da      	uxtb	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	1c59      	adds	r1, r3, #1
 8006918:	6079      	str	r1, [r7, #4]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	4413      	add	r3, r2
 800691e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	3b01      	subs	r3, #1
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1ed      	bne.n	8006908 <sum_sfn+0x10>
	return sum;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006944:	2304      	movs	r3, #4
 8006946:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800694e:	23ff      	movs	r3, #255	; 0xff
 8006950:	757b      	strb	r3, [r7, #21]
 8006952:	23ff      	movs	r3, #255	; 0xff
 8006954:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006956:	e081      	b.n	8006a5c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	4619      	mov	r1, r3
 800695e:	6938      	ldr	r0, [r7, #16]
 8006960:	f7ff f836 	bl	80059d0 <move_window>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d17c      	bne.n	8006a68 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006976:	7dbb      	ldrb	r3, [r7, #22]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d102      	bne.n	8006982 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800697c:	2304      	movs	r3, #4
 800697e:	75fb      	strb	r3, [r7, #23]
 8006980:	e077      	b.n	8006a72 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	330b      	adds	r3, #11
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800698e:	73fb      	strb	r3, [r7, #15]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7bfa      	ldrb	r2, [r7, #15]
 8006994:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006996:	7dbb      	ldrb	r3, [r7, #22]
 8006998:	2be5      	cmp	r3, #229	; 0xe5
 800699a:	d00e      	beq.n	80069ba <dir_read+0x80>
 800699c:	7dbb      	ldrb	r3, [r7, #22]
 800699e:	2b2e      	cmp	r3, #46	; 0x2e
 80069a0:	d00b      	beq.n	80069ba <dir_read+0x80>
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	f023 0320 	bic.w	r3, r3, #32
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d002      	beq.n	80069c0 <dir_read+0x86>
				ord = 0xFF;
 80069ba:	23ff      	movs	r3, #255	; 0xff
 80069bc:	757b      	strb	r3, [r7, #21]
 80069be:	e044      	b.n	8006a4a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b0f      	cmp	r3, #15
 80069c4:	d12f      	bne.n	8006a26 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80069c6:	7dbb      	ldrb	r3, [r7, #22]
 80069c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00d      	beq.n	80069ec <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	7b5b      	ldrb	r3, [r3, #13]
 80069d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80069d8:	7dbb      	ldrb	r3, [r7, #22]
 80069da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069de:	75bb      	strb	r3, [r7, #22]
 80069e0:	7dbb      	ldrb	r3, [r7, #22]
 80069e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80069ec:	7dba      	ldrb	r2, [r7, #22]
 80069ee:	7d7b      	ldrb	r3, [r7, #21]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d115      	bne.n	8006a20 <dir_read+0xe6>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	330d      	adds	r3, #13
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	7d3a      	ldrb	r2, [r7, #20]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d10e      	bne.n	8006a20 <dir_read+0xe6>
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f7ff fe17 	bl	8006640 <pick_lfn>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <dir_read+0xe6>
 8006a18:	7d7b      	ldrb	r3, [r7, #21]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	e000      	b.n	8006a22 <dir_read+0xe8>
 8006a20:	23ff      	movs	r3, #255	; 0xff
 8006a22:	757b      	strb	r3, [r7, #21]
 8006a24:	e011      	b.n	8006a4a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006a26:	7d7b      	ldrb	r3, [r7, #21]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d109      	bne.n	8006a40 <dir_read+0x106>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff ff61 	bl	80068f8 <sum_sfn>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	7d3b      	ldrb	r3, [r7, #20]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d015      	beq.n	8006a6c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f04f 32ff 	mov.w	r2, #4294967295
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8006a48:	e010      	b.n	8006a6c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff fc2a 	bl	80062a6 <dir_next>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <dir_read+0x136>
	while (dp->sect) {
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f47f af79 	bne.w	8006958 <dir_read+0x1e>
 8006a66:	e004      	b.n	8006a72 <dir_read+0x138>
		if (res != FR_OK) break;
 8006a68:	bf00      	nop
 8006a6a:	e002      	b.n	8006a72 <dir_read+0x138>
					break;
 8006a6c:	bf00      	nop
 8006a6e:	e000      	b.n	8006a72 <dir_read+0x138>
		if (res != FR_OK) break;
 8006a70:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <dir_read+0x144>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	61da      	str	r2, [r3, #28]
	return res;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a96:	2100      	movs	r1, #0
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff fb7b 	bl	8006194 <dir_sdi>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <dir_find+0x24>
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	e0a9      	b.n	8006c00 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006aac:	23ff      	movs	r3, #255	; 0xff
 8006aae:	753b      	strb	r3, [r7, #20]
 8006ab0:	7d3b      	ldrb	r3, [r7, #20]
 8006ab2:	757b      	strb	r3, [r7, #21]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6938      	ldr	r0, [r7, #16]
 8006ac4:	f7fe ff84 	bl	80059d0 <move_window>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8090 	bne.w	8006bf4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006adc:	7dbb      	ldrb	r3, [r7, #22]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <dir_find+0x60>
 8006ae2:	2304      	movs	r3, #4
 8006ae4:	75fb      	strb	r3, [r7, #23]
 8006ae6:	e08a      	b.n	8006bfe <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	330b      	adds	r3, #11
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af4:	73fb      	strb	r3, [r7, #15]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7bfa      	ldrb	r2, [r7, #15]
 8006afa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006afc:	7dbb      	ldrb	r3, [r7, #22]
 8006afe:	2be5      	cmp	r3, #229	; 0xe5
 8006b00:	d007      	beq.n	8006b12 <dir_find+0x8a>
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <dir_find+0x98>
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b0f      	cmp	r3, #15
 8006b10:	d006      	beq.n	8006b20 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b12:	23ff      	movs	r3, #255	; 0xff
 8006b14:	757b      	strb	r3, [r7, #21]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b1e:	e05e      	b.n	8006bde <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	2b0f      	cmp	r3, #15
 8006b24:	d136      	bne.n	8006b94 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d154      	bne.n	8006bde <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006b34:	7dbb      	ldrb	r3, [r7, #22]
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00d      	beq.n	8006b5a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	7b5b      	ldrb	r3, [r3, #13]
 8006b44:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006b46:	7dbb      	ldrb	r3, [r7, #22]
 8006b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4c:	75bb      	strb	r3, [r7, #22]
 8006b4e:	7dbb      	ldrb	r3, [r7, #22]
 8006b50:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695a      	ldr	r2, [r3, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006b5a:	7dba      	ldrb	r2, [r7, #22]
 8006b5c:	7d7b      	ldrb	r3, [r7, #21]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d115      	bne.n	8006b8e <dir_find+0x106>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	330d      	adds	r3, #13
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	7d3a      	ldrb	r2, [r7, #20]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d10e      	bne.n	8006b8e <dir_find+0x106>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f7ff fcf0 	bl	8006560 <cmp_lfn>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <dir_find+0x106>
 8006b86:	7d7b      	ldrb	r3, [r7, #21]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	e000      	b.n	8006b90 <dir_find+0x108>
 8006b8e:	23ff      	movs	r3, #255	; 0xff
 8006b90:	757b      	strb	r3, [r7, #21]
 8006b92:	e024      	b.n	8006bde <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006b94:	7d7b      	ldrb	r3, [r7, #21]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <dir_find+0x126>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff feaa 	bl	80068f8 <sum_sfn>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	7d3b      	ldrb	r3, [r7, #20]
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d024      	beq.n	8006bf8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <dir_find+0x14a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a18      	ldr	r0, [r3, #32]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	220b      	movs	r2, #11
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f7fe fd10 	bl	80055ec <mem_cmp>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d014      	beq.n	8006bfc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006bd2:	23ff      	movs	r3, #255	; 0xff
 8006bd4:	757b      	strb	r3, [r7, #21]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006bde:	2100      	movs	r1, #0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fb60 	bl	80062a6 <dir_next>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f43f af65 	beq.w	8006abc <dir_find+0x34>
 8006bf2:	e004      	b.n	8006bfe <dir_find+0x176>
		if (res != FR_OK) break;
 8006bf4:	bf00      	nop
 8006bf6:	e002      	b.n	8006bfe <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006bf8:	bf00      	nop
 8006bfa:	e000      	b.n	8006bfe <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006bfc:	bf00      	nop

	return res;
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c1c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <dir_register+0x20>
 8006c24:	2306      	movs	r3, #6
 8006c26:	e0e0      	b.n	8006dea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006c28:	2300      	movs	r3, #0
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2c:	e002      	b.n	8006c34 <dir_register+0x2c>
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	3301      	adds	r3, #1
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1f4      	bne.n	8006c2e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	220c      	movs	r2, #12
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe fc8f 	bl	8005574 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d032      	beq.n	8006cc6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2240      	movs	r2, #64	; 0x40
 8006c64:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006c68:	2301      	movs	r3, #1
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c6c:	e016      	b.n	8006c9c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	f107 010c 	add.w	r1, r7, #12
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	f7ff fdab 	bl	80067d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff ff00 	bl	8006a88 <dir_find>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	3301      	adds	r3, #1
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	2b63      	cmp	r3, #99	; 0x63
 8006ca0:	d9e5      	bls.n	8006c6e <dir_register+0x66>
 8006ca2:	e000      	b.n	8006ca6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006ca4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	2b64      	cmp	r3, #100	; 0x64
 8006caa:	d101      	bne.n	8006cb0 <dir_register+0xa8>
 8006cac:	2307      	movs	r3, #7
 8006cae:	e09c      	b.n	8006dea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d002      	beq.n	8006cbe <dir_register+0xb6>
 8006cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cbc:	e095      	b.n	8006dea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006cbe:	7dfa      	ldrb	r2, [r7, #23]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <dir_register+0xd8>
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	4a47      	ldr	r2, [pc, #284]	; (8006df4 <dir_register+0x1ec>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	089b      	lsrs	r3, r3, #2
 8006cdc:	3301      	adds	r3, #1
 8006cde:	e000      	b.n	8006ce2 <dir_register+0xda>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006ce4:	6a39      	ldr	r1, [r7, #32]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fbb3 	bl	8006452 <dir_alloc>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d148      	bne.n	8006d8c <dir_register+0x184>
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	623b      	str	r3, [r7, #32]
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d042      	beq.n	8006d8c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695a      	ldr	r2, [r3, #20]
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	015b      	lsls	r3, r3, #5
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff fa3e 	bl	8006194 <dir_sdi>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d132      	bne.n	8006d8c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3324      	adds	r3, #36	; 0x24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff fde4 	bl	80068f8 <sum_sfn>
 8006d30:	4603      	mov	r3, r0
 8006d32:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	69f8      	ldr	r0, [r7, #28]
 8006d3c:	f7fe fe48 	bl	80059d0 <move_window>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d11d      	bne.n	8006d8a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	6918      	ldr	r0, [r3, #16]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a19      	ldr	r1, [r3, #32]
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	7efb      	ldrb	r3, [r7, #27]
 8006d5c:	f7ff fcd4 	bl	8006708 <put_lfn>
				fs->wflag = 1;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2201      	movs	r2, #1
 8006d64:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006d66:	2100      	movs	r1, #0
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff fa9c 	bl	80062a6 <dir_next>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d107      	bne.n	8006d8c <dir_register+0x184>
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	623b      	str	r3, [r7, #32]
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1d5      	bne.n	8006d34 <dir_register+0x12c>
 8006d88:	e000      	b.n	8006d8c <dir_register+0x184>
				if (res != FR_OK) break;
 8006d8a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d128      	bne.n	8006de6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	69f8      	ldr	r0, [r7, #28]
 8006d9c:	f7fe fe18 	bl	80059d0 <move_window>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d11b      	bne.n	8006de6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	2220      	movs	r2, #32
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fbfd 	bl	80055b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a18      	ldr	r0, [r3, #32]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3324      	adds	r3, #36	; 0x24
 8006dc4:	220b      	movs	r2, #11
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f7fe fbd4 	bl	8005574 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	f002 0218 	and.w	r2, r2, #24
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2201      	movs	r2, #1
 8006de4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3730      	adds	r7, #48	; 0x30
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	4ec4ec4f 	.word	0x4ec4ec4f

08006df8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 80c9 	beq.w	8006faa <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d032      	beq.n	8006e88 <get_fileinfo+0x90>
			i = j = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006e2a:	e01b      	b.n	8006e64 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006e2c:	89fb      	ldrh	r3, [r7, #14]
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 ff2b 	bl	8008c8c <ff_convert>
 8006e36:	4603      	mov	r3, r0
 8006e38:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006e3a:	89fb      	ldrh	r3, [r7, #14]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <get_fileinfo+0x4e>
 8006e40:	2300      	movs	r3, #0
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	e01a      	b.n	8006e7c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	2bfe      	cmp	r3, #254	; 0xfe
 8006e4a:	d902      	bls.n	8006e52 <get_fileinfo+0x5a>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	e014      	b.n	8006e7c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	61fa      	str	r2, [r7, #28]
 8006e58:	89fa      	ldrh	r2, [r7, #14]
 8006e5a:	b2d1      	uxtb	r1, r2
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	4413      	add	r3, r2
 8006e60:	460a      	mov	r2, r1
 8006e62:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	1c59      	adds	r1, r3, #1
 8006e6c:	61b9      	str	r1, [r7, #24]
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	81fb      	strh	r3, [r7, #14]
 8006e76:	89fb      	ldrh	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1d7      	bne.n	8006e2c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	3316      	adds	r3, #22
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	3316      	adds	r3, #22
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006e9c:	e04c      	b.n	8006f38 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1a      	ldr	r2, [r3, #32]
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	1c59      	adds	r1, r3, #1
 8006ea6:	61f9      	str	r1, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d100      	bne.n	8006eb6 <get_fileinfo+0xbe>
 8006eb4:	e040      	b.n	8006f38 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d101      	bne.n	8006ec0 <get_fileinfo+0xc8>
 8006ebc:	23e5      	movs	r3, #229	; 0xe5
 8006ebe:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	2b09      	cmp	r3, #9
 8006ec4:	d10f      	bne.n	8006ee6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8006ec6:	89bb      	ldrh	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d105      	bne.n	8006ed8 <get_fileinfo+0xe0>
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	3316      	adds	r3, #22
 8006ed4:	222e      	movs	r2, #46	; 0x2e
 8006ed6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	61ba      	str	r2, [r7, #24]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	222e      	movs	r2, #46	; 0x2e
 8006ee4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	4413      	add	r3, r2
 8006eec:	3309      	adds	r3, #9
 8006eee:	7dfa      	ldrb	r2, [r7, #23]
 8006ef0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006ef2:	89bb      	ldrh	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d11c      	bne.n	8006f32 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d913      	bls.n	8006f26 <get_fileinfo+0x12e>
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	2b5a      	cmp	r3, #90	; 0x5a
 8006f02:	d810      	bhi.n	8006f26 <get_fileinfo+0x12e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d901      	bls.n	8006f18 <get_fileinfo+0x120>
 8006f14:	2310      	movs	r3, #16
 8006f16:	e000      	b.n	8006f1a <get_fileinfo+0x122>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	3320      	adds	r3, #32
 8006f24:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3316      	adds	r3, #22
 8006f2e:	7dfa      	ldrb	r2, [r7, #23]
 8006f30:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	3301      	adds	r3, #1
 8006f36:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	2b0a      	cmp	r3, #10
 8006f3c:	d9af      	bls.n	8006e9e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006f3e:	89bb      	ldrh	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10d      	bne.n	8006f60 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4413      	add	r3, r2
 8006f4a:	3316      	adds	r3, #22
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	330c      	adds	r3, #12
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <get_fileinfo+0x168>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	4413      	add	r3, r2
 8006f66:	3309      	adds	r3, #9
 8006f68:	2200      	movs	r2, #0
 8006f6a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	7ada      	ldrb	r2, [r3, #11]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	331c      	adds	r3, #28
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fa8f 	bl	80054a0 <ld_dword>
 8006f82:	4602      	mov	r2, r0
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	3316      	adds	r3, #22
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fa86 	bl	80054a0 <ld_dword>
 8006f94:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	80da      	strh	r2, [r3, #6]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	809a      	strh	r2, [r3, #4]
 8006fa8:	e000      	b.n	8006fac <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006faa:	bf00      	nop
}
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8006fca:	89fb      	ldrh	r3, [r7, #14]
 8006fcc:	2b60      	cmp	r3, #96	; 0x60
 8006fce:	d905      	bls.n	8006fdc <get_achar+0x28>
 8006fd0:	89fb      	ldrh	r3, [r7, #14]
 8006fd2:	2b7a      	cmp	r3, #122	; 0x7a
 8006fd4:	d802      	bhi.n	8006fdc <get_achar+0x28>
 8006fd6:	89fb      	ldrh	r3, [r7, #14]
 8006fd8:	3b20      	subs	r3, #32
 8006fda:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8006fdc:	89fb      	ldrh	r3, [r7, #14]
 8006fde:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe0:	d904      	bls.n	8006fec <get_achar+0x38>
 8006fe2:	89fb      	ldrh	r3, [r7, #14]
 8006fe4:	3b80      	subs	r3, #128	; 0x80
 8006fe6:	4a05      	ldr	r2, [pc, #20]	; (8006ffc <get_achar+0x48>)
 8006fe8:	5cd3      	ldrb	r3, [r2, r3]
 8006fea:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8006fec:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	0800985c 	.word	0x0800985c

08007000 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	; 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800700e:	e009      	b.n	8007024 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8007010:	f107 0308 	add.w	r3, r7, #8
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff ffcd 	bl	8006fb4 <get_achar>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <pattern_matching+0x24>
 8007020:	2300      	movs	r3, #0
 8007022:	e064      	b.n	80070ee <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f0      	bne.n	8007010 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <pattern_matching+0x40>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <pattern_matching+0x40>
 800703c:	2301      	movs	r3, #1
 800703e:	e056      	b.n	80070ee <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b3f      	cmp	r3, #63	; 0x3f
 800704e:	d003      	beq.n	8007058 <pattern_matching+0x58>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b2a      	cmp	r3, #42	; 0x2a
 8007056:	d126      	bne.n	80070a6 <pattern_matching+0xa6>
				nm = nx = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	617a      	str	r2, [r7, #20]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b3f      	cmp	r3, #63	; 0x3f
 800706a:	d103      	bne.n	8007074 <pattern_matching+0x74>
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	3301      	adds	r3, #1
 8007070:	623b      	str	r3, [r7, #32]
 8007072:	e001      	b.n	8007078 <pattern_matching+0x78>
 8007074:	2301      	movs	r3, #1
 8007076:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b3f      	cmp	r3, #63	; 0x3f
 800707e:	d0ef      	beq.n	8007060 <pattern_matching+0x60>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b2a      	cmp	r3, #42	; 0x2a
 8007086:	d0eb      	beq.n	8007060 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8007088:	6978      	ldr	r0, [r7, #20]
 800708a:	6939      	ldr	r1, [r7, #16]
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	6a3a      	ldr	r2, [r7, #32]
 8007090:	f7ff ffb6 	bl	8007000 <pattern_matching>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <pattern_matching+0x9e>
 800709a:	2301      	movs	r3, #1
 800709c:	e027      	b.n	80070ee <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80070a4:	e017      	b.n	80070d6 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80070a6:	f107 0314 	add.w	r3, r7, #20
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff ff82 	bl	8006fb4 <get_achar>
 80070b0:	4603      	mov	r3, r0
 80070b2:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80070b4:	f107 0310 	add.w	r3, r7, #16
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff ff7b 	bl	8006fb4 <get_achar>
 80070be:	4603      	mov	r3, r0
 80070c0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80070c2:	8b7a      	ldrh	r2, [r7, #26]
 80070c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d104      	bne.n	80070d4 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80070ca:	8b7b      	ldrh	r3, [r7, #26]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1bb      	bne.n	8007048 <pattern_matching+0x48>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e00c      	b.n	80070ee <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80070d4:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80070d6:	f107 0308 	add.w	r3, r7, #8
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff ff6a 	bl	8006fb4 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <pattern_matching+0xec>
 80070e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1a9      	bne.n	8007040 <pattern_matching+0x40>

	return 0;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3728      	adds	r7, #40	; 0x28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	61ba      	str	r2, [r7, #24]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4413      	add	r3, r2
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007128:	2b1f      	cmp	r3, #31
 800712a:	d940      	bls.n	80071ae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800712c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800712e:	2b2f      	cmp	r3, #47	; 0x2f
 8007130:	d006      	beq.n	8007140 <create_name+0x48>
 8007132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007134:	2b5c      	cmp	r3, #92	; 0x5c
 8007136:	d110      	bne.n	800715a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007138:	e002      	b.n	8007140 <create_name+0x48>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	3301      	adds	r3, #1
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	4413      	add	r3, r2
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b2f      	cmp	r3, #47	; 0x2f
 800714a:	d0f6      	beq.n	800713a <create_name+0x42>
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	4413      	add	r3, r2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b5c      	cmp	r3, #92	; 0x5c
 8007156:	d0f0      	beq.n	800713a <create_name+0x42>
			break;
 8007158:	e02a      	b.n	80071b0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2bfe      	cmp	r3, #254	; 0xfe
 800715e:	d901      	bls.n	8007164 <create_name+0x6c>
 8007160:	2306      	movs	r3, #6
 8007162:	e177      	b.n	8007454 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007166:	b2db      	uxtb	r3, r3
 8007168:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800716a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800716c:	2101      	movs	r1, #1
 800716e:	4618      	mov	r0, r3
 8007170:	f001 fd8c 	bl	8008c8c <ff_convert>
 8007174:	4603      	mov	r3, r0
 8007176:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <create_name+0x8a>
 800717e:	2306      	movs	r3, #6
 8007180:	e168      	b.n	8007454 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007184:	2b7f      	cmp	r3, #127	; 0x7f
 8007186:	d809      	bhi.n	800719c <create_name+0xa4>
 8007188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800718a:	4619      	mov	r1, r3
 800718c:	48b3      	ldr	r0, [pc, #716]	; (800745c <create_name+0x364>)
 800718e:	f7fe fa54 	bl	800563a <chk_chr>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <create_name+0xa4>
 8007198:	2306      	movs	r3, #6
 800719a:	e15b      	b.n	8007454 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	617a      	str	r2, [r7, #20]
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80071ac:	e7b4      	b.n	8007118 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80071ae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	441a      	add	r2, r3
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80071ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071bc:	2b1f      	cmp	r3, #31
 80071be:	d801      	bhi.n	80071c4 <create_name+0xcc>
 80071c0:	2304      	movs	r3, #4
 80071c2:	e000      	b.n	80071c6 <create_name+0xce>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80071ca:	e011      	b.n	80071f0 <create_name+0xf8>
		w = lfn[di - 1];
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80071d2:	3b01      	subs	r3, #1
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80071de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	d002      	beq.n	80071ea <create_name+0xf2>
 80071e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e6:	2b2e      	cmp	r3, #46	; 0x2e
 80071e8:	d106      	bne.n	80071f8 <create_name+0x100>
		di--;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1ea      	bne.n	80071cc <create_name+0xd4>
 80071f6:	e000      	b.n	80071fa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80071f8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	2200      	movs	r2, #0
 8007204:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <create_name+0x118>
 800720c:	2306      	movs	r3, #6
 800720e:	e121      	b.n	8007454 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3324      	adds	r3, #36	; 0x24
 8007214:	220b      	movs	r2, #11
 8007216:	2120      	movs	r1, #32
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe f9cc 	bl	80055b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800721e:	2300      	movs	r3, #0
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	e002      	b.n	800722a <create_name+0x132>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	3301      	adds	r3, #1
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	2b20      	cmp	r3, #32
 8007236:	d0f5      	beq.n	8007224 <create_name+0x12c>
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	2b2e      	cmp	r3, #46	; 0x2e
 8007244:	d0ee      	beq.n	8007224 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d009      	beq.n	8007260 <create_name+0x168>
 800724c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007250:	f043 0303 	orr.w	r3, r3, #3
 8007254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007258:	e002      	b.n	8007260 <create_name+0x168>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	3b01      	subs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <create_name+0x182>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800726c:	3b01      	subs	r3, #1
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	2b2e      	cmp	r3, #46	; 0x2e
 8007278:	d1ef      	bne.n	800725a <create_name+0x162>

	i = b = 0; ni = 8;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007280:	2300      	movs	r3, #0
 8007282:	623b      	str	r3, [r7, #32]
 8007284:	2308      	movs	r3, #8
 8007286:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	61ba      	str	r2, [r7, #24]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8090 	beq.w	80073c0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80072a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d006      	beq.n	80072b4 <create_name+0x1bc>
 80072a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072a8:	2b2e      	cmp	r3, #46	; 0x2e
 80072aa:	d10a      	bne.n	80072c2 <create_name+0x1ca>
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d006      	beq.n	80072c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80072b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072b8:	f043 0303 	orr.w	r3, r3, #3
 80072bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072c0:	e07d      	b.n	80073be <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80072c2:	6a3a      	ldr	r2, [r7, #32]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d203      	bcs.n	80072d2 <create_name+0x1da>
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d123      	bne.n	800731a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	2b0b      	cmp	r3, #11
 80072d6:	d106      	bne.n	80072e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072dc:	f043 0303 	orr.w	r3, r3, #3
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072e4:	e06f      	b.n	80073c6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d005      	beq.n	80072fa <create_name+0x202>
 80072ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f2:	f043 0303 	orr.w	r3, r3, #3
 80072f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d860      	bhi.n	80073c4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	61bb      	str	r3, [r7, #24]
 8007306:	2308      	movs	r3, #8
 8007308:	623b      	str	r3, [r7, #32]
 800730a:	230b      	movs	r3, #11
 800730c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800730e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007318:	e051      	b.n	80073be <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800731a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800731c:	2b7f      	cmp	r3, #127	; 0x7f
 800731e:	d914      	bls.n	800734a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f001 fcb1 	bl	8008c8c <ff_convert>
 800732a:	4603      	mov	r3, r0
 800732c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800732e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <create_name+0x246>
 8007334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007336:	3b80      	subs	r3, #128	; 0x80
 8007338:	4a49      	ldr	r2, [pc, #292]	; (8007460 <create_name+0x368>)
 800733a:	5cd3      	ldrb	r3, [r2, r3]
 800733c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800733e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007342:	f043 0302 	orr.w	r3, r3, #2
 8007346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800734a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <create_name+0x268>
 8007350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007352:	4619      	mov	r1, r3
 8007354:	4843      	ldr	r0, [pc, #268]	; (8007464 <create_name+0x36c>)
 8007356:	f7fe f970 	bl	800563a <chk_chr>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007360:	235f      	movs	r3, #95	; 0x5f
 8007362:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007368:	f043 0303 	orr.w	r3, r3, #3
 800736c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007370:	e01b      	b.n	80073aa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d909      	bls.n	800738c <create_name+0x294>
 8007378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800737a:	2b5a      	cmp	r3, #90	; 0x5a
 800737c:	d806      	bhi.n	800738c <create_name+0x294>
					b |= 2;
 800737e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007382:	f043 0302 	orr.w	r3, r3, #2
 8007386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800738a:	e00e      	b.n	80073aa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800738c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800738e:	2b60      	cmp	r3, #96	; 0x60
 8007390:	d90b      	bls.n	80073aa <create_name+0x2b2>
 8007392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007394:	2b7a      	cmp	r3, #122	; 0x7a
 8007396:	d808      	bhi.n	80073aa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007398:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073a6:	3b20      	subs	r3, #32
 80073a8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	623a      	str	r2, [r7, #32]
 80073b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073b2:	b2d1      	uxtb	r1, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	4413      	add	r3, r2
 80073b8:	460a      	mov	r2, r1
 80073ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80073be:	e763      	b.n	8007288 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80073c0:	bf00      	nop
 80073c2:	e000      	b.n	80073c6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80073c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073cc:	2be5      	cmp	r3, #229	; 0xe5
 80073ce:	d103      	bne.n	80073d8 <create_name+0x2e0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2205      	movs	r2, #5
 80073d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d104      	bne.n	80073e8 <create_name+0x2f0>
 80073de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80073e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073ec:	f003 030c 	and.w	r3, r3, #12
 80073f0:	2b0c      	cmp	r3, #12
 80073f2:	d005      	beq.n	8007400 <create_name+0x308>
 80073f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d105      	bne.n	800740c <create_name+0x314>
 8007400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007404:	f043 0302 	orr.w	r3, r3, #2
 8007408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800740c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d117      	bne.n	8007448 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007418:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	2b01      	cmp	r3, #1
 8007422:	d105      	bne.n	8007430 <create_name+0x338>
 8007424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007428:	f043 0310 	orr.w	r3, r3, #16
 800742c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007434:	f003 030c 	and.w	r3, r3, #12
 8007438:	2b04      	cmp	r3, #4
 800743a:	d105      	bne.n	8007448 <create_name+0x350>
 800743c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007440:	f043 0308 	orr.w	r3, r3, #8
 8007444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800744e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007452:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007454:	4618      	mov	r0, r3
 8007456:	3728      	adds	r7, #40	; 0x28
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	080097a4 	.word	0x080097a4
 8007460:	0800985c 	.word	0x0800985c
 8007464:	080097b0 	.word	0x080097b0

08007468 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800747c:	e002      	b.n	8007484 <follow_path+0x1c>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b2f      	cmp	r3, #47	; 0x2f
 800748a:	d0f8      	beq.n	800747e <follow_path+0x16>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b5c      	cmp	r3, #92	; 0x5c
 8007492:	d0f4      	beq.n	800747e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	2200      	movs	r2, #0
 8007498:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b1f      	cmp	r3, #31
 80074a0:	d80a      	bhi.n	80074b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2280      	movs	r2, #128	; 0x80
 80074a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80074aa:	2100      	movs	r1, #0
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7fe fe71 	bl	8006194 <dir_sdi>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]
 80074b6:	e048      	b.n	800754a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074b8:	463b      	mov	r3, r7
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff fe1b 	bl	80070f8 <create_name>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d139      	bne.n	8007540 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff fadb 	bl	8006a88 <dir_find>
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d12c      	bne.n	8007544 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80074ea:	7afb      	ldrb	r3, [r7, #11]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d127      	bne.n	8007544 <follow_path+0xdc>
 80074f4:	2305      	movs	r3, #5
 80074f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80074f8:	e024      	b.n	8007544 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d121      	bne.n	8007548 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	799b      	ldrb	r3, [r3, #6]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007510:	2305      	movs	r3, #5
 8007512:	75fb      	strb	r3, [r7, #23]
 8007514:	e019      	b.n	800754a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	8992      	ldrh	r2, [r2, #12]
 8007524:	fbb3 f0f2 	udiv	r0, r3, r2
 8007528:	fb02 f200 	mul.w	r2, r2, r0
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	440b      	add	r3, r1
 8007530:	4619      	mov	r1, r3
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7fe ffd4 	bl	80064e0 <ld_clust>
 8007538:	4602      	mov	r2, r0
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800753e:	e7bb      	b.n	80074b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007540:	bf00      	nop
 8007542:	e002      	b.n	800754a <follow_path+0xe2>
				break;
 8007544:	bf00      	nop
 8007546:	e000      	b.n	800754a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007548:	bf00      	nop
			}
		}
	}

	return res;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800755c:	f04f 33ff 	mov.w	r3, #4294967295
 8007560:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d031      	beq.n	80075ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	e002      	b.n	8007578 <get_ldnumber+0x24>
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	3301      	adds	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b1f      	cmp	r3, #31
 800757e:	d903      	bls.n	8007588 <get_ldnumber+0x34>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b3a      	cmp	r3, #58	; 0x3a
 8007586:	d1f4      	bne.n	8007572 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b3a      	cmp	r3, #58	; 0x3a
 800758e:	d11c      	bne.n	80075ca <get_ldnumber+0x76>
			tp = *path;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	60fa      	str	r2, [r7, #12]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	3b30      	subs	r3, #48	; 0x30
 80075a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b09      	cmp	r3, #9
 80075a6:	d80e      	bhi.n	80075c6 <get_ldnumber+0x72>
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d10a      	bne.n	80075c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <get_ldnumber+0x72>
					vol = (int)i;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	3301      	adds	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	e002      	b.n	80075d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80075ce:	693b      	ldr	r3, [r7, #16]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	70da      	strb	r2, [r3, #3]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fe f9ea 	bl	80059d0 <move_window>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <check_fs+0x2a>
 8007602:	2304      	movs	r3, #4
 8007604:	e038      	b.n	8007678 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3338      	adds	r3, #56	; 0x38
 800760a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd ff2e 	bl	8005470 <ld_word>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800761c:	429a      	cmp	r2, r3
 800761e:	d001      	beq.n	8007624 <check_fs+0x48>
 8007620:	2303      	movs	r3, #3
 8007622:	e029      	b.n	8007678 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800762a:	2be9      	cmp	r3, #233	; 0xe9
 800762c:	d009      	beq.n	8007642 <check_fs+0x66>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007634:	2beb      	cmp	r3, #235	; 0xeb
 8007636:	d11e      	bne.n	8007676 <check_fs+0x9a>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800763e:	2b90      	cmp	r3, #144	; 0x90
 8007640:	d119      	bne.n	8007676 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3338      	adds	r3, #56	; 0x38
 8007646:	3336      	adds	r3, #54	; 0x36
 8007648:	4618      	mov	r0, r3
 800764a:	f7fd ff29 	bl	80054a0 <ld_dword>
 800764e:	4603      	mov	r3, r0
 8007650:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007654:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <check_fs+0xa4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d101      	bne.n	800765e <check_fs+0x82>
 800765a:	2300      	movs	r3, #0
 800765c:	e00c      	b.n	8007678 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3338      	adds	r3, #56	; 0x38
 8007662:	3352      	adds	r3, #82	; 0x52
 8007664:	4618      	mov	r0, r3
 8007666:	f7fd ff1b 	bl	80054a0 <ld_dword>
 800766a:	4603      	mov	r3, r0
 800766c:	4a05      	ldr	r2, [pc, #20]	; (8007684 <check_fs+0xa8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d101      	bne.n	8007676 <check_fs+0x9a>
 8007672:	2300      	movs	r3, #0
 8007674:	e000      	b.n	8007678 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007676:	2302      	movs	r3, #2
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	00544146 	.word	0x00544146
 8007684:	33544146 	.word	0x33544146

08007688 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b096      	sub	sp, #88	; 0x58
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff ff59 	bl	8007554 <get_ldnumber>
 80076a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80076a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	da01      	bge.n	80076ae <find_volume+0x26>
 80076aa:	230b      	movs	r3, #11
 80076ac:	e268      	b.n	8007b80 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80076ae:	4ab0      	ldr	r2, [pc, #704]	; (8007970 <find_volume+0x2e8>)
 80076b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <find_volume+0x3a>
 80076be:	230c      	movs	r3, #12
 80076c0:	e25e      	b.n	8007b80 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	f023 0301 	bic.w	r3, r3, #1
 80076ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01a      	beq.n	800770e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd fe29 	bl	8005334 <disk_status>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80076e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10c      	bne.n	800770e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d007      	beq.n	800770a <find_volume+0x82>
 80076fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007706:	230a      	movs	r3, #10
 8007708:	e23a      	b.n	8007b80 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800770a:	2300      	movs	r3, #0
 800770c:	e238      	b.n	8007b80 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007716:	b2da      	uxtb	r2, r3
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	4618      	mov	r0, r3
 8007722:	f7fd fe21 	bl	8005368 <disk_initialize>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800772c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007738:	2303      	movs	r3, #3
 800773a:	e221      	b.n	8007b80 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <find_volume+0xca>
 8007742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800774e:	230a      	movs	r3, #10
 8007750:	e216      	b.n	8007b80 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	7858      	ldrb	r0, [r3, #1]
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	330c      	adds	r3, #12
 800775a:	461a      	mov	r2, r3
 800775c:	2102      	movs	r1, #2
 800775e:	f7fd fe69 	bl	8005434 <disk_ioctl>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <find_volume+0xe4>
 8007768:	2301      	movs	r3, #1
 800776a:	e209      	b.n	8007b80 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	899b      	ldrh	r3, [r3, #12]
 8007770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007774:	d80d      	bhi.n	8007792 <find_volume+0x10a>
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	899b      	ldrh	r3, [r3, #12]
 800777a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800777e:	d308      	bcc.n	8007792 <find_volume+0x10a>
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	899b      	ldrh	r3, [r3, #12]
 8007784:	461a      	mov	r2, r3
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	899b      	ldrh	r3, [r3, #12]
 800778a:	3b01      	subs	r3, #1
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <find_volume+0x10e>
 8007792:	2301      	movs	r3, #1
 8007794:	e1f4      	b.n	8007b80 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800779a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800779c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800779e:	f7ff ff1d 	bl	80075dc <check_fs>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80077a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d14b      	bne.n	8007848 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077b0:	2300      	movs	r3, #0
 80077b2:	643b      	str	r3, [r7, #64]	; 0x40
 80077b4:	e01f      	b.n	80077f6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80077bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80077c4:	4413      	add	r3, r2
 80077c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	3304      	adds	r3, #4
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d006      	beq.n	80077e0 <find_volume+0x158>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	3308      	adds	r3, #8
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fd fe62 	bl	80054a0 <ld_dword>
 80077dc:	4602      	mov	r2, r0
 80077de:	e000      	b.n	80077e2 <find_volume+0x15a>
 80077e0:	2200      	movs	r2, #0
 80077e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80077ea:	440b      	add	r3, r1
 80077ec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f2:	3301      	adds	r3, #1
 80077f4:	643b      	str	r3, [r7, #64]	; 0x40
 80077f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d9dc      	bls.n	80077b6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80077fc:	2300      	movs	r3, #0
 80077fe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <find_volume+0x184>
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	3b01      	subs	r3, #1
 800780a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800780c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007814:	4413      	add	r3, r2
 8007816:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800781a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800781c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <find_volume+0x1a6>
 8007822:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007824:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007826:	f7ff fed9 	bl	80075dc <check_fs>
 800782a:	4603      	mov	r3, r0
 800782c:	e000      	b.n	8007830 <find_volume+0x1a8>
 800782e:	2303      	movs	r3, #3
 8007830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007838:	2b01      	cmp	r3, #1
 800783a:	d905      	bls.n	8007848 <find_volume+0x1c0>
 800783c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783e:	3301      	adds	r3, #1
 8007840:	643b      	str	r3, [r7, #64]	; 0x40
 8007842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007844:	2b03      	cmp	r3, #3
 8007846:	d9e1      	bls.n	800780c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800784c:	2b04      	cmp	r3, #4
 800784e:	d101      	bne.n	8007854 <find_volume+0x1cc>
 8007850:	2301      	movs	r3, #1
 8007852:	e195      	b.n	8007b80 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007858:	2b01      	cmp	r3, #1
 800785a:	d901      	bls.n	8007860 <find_volume+0x1d8>
 800785c:	230d      	movs	r3, #13
 800785e:	e18f      	b.n	8007b80 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	3338      	adds	r3, #56	; 0x38
 8007864:	330b      	adds	r3, #11
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd fe02 	bl	8005470 <ld_word>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	899b      	ldrh	r3, [r3, #12]
 8007874:	429a      	cmp	r2, r3
 8007876:	d001      	beq.n	800787c <find_volume+0x1f4>
 8007878:	230d      	movs	r3, #13
 800787a:	e181      	b.n	8007b80 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	3338      	adds	r3, #56	; 0x38
 8007880:	3316      	adds	r3, #22
 8007882:	4618      	mov	r0, r3
 8007884:	f7fd fdf4 	bl	8005470 <ld_word>
 8007888:	4603      	mov	r3, r0
 800788a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800788c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <find_volume+0x218>
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	3338      	adds	r3, #56	; 0x38
 8007896:	3324      	adds	r3, #36	; 0x24
 8007898:	4618      	mov	r0, r3
 800789a:	f7fd fe01 	bl	80054a0 <ld_dword>
 800789e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078a4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	789b      	ldrb	r3, [r3, #2]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d005      	beq.n	80078c4 <find_volume+0x23c>
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	789b      	ldrb	r3, [r3, #2]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d001      	beq.n	80078c4 <find_volume+0x23c>
 80078c0:	230d      	movs	r3, #13
 80078c2:	e15d      	b.n	8007b80 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	789b      	ldrb	r3, [r3, #2]
 80078c8:	461a      	mov	r2, r3
 80078ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078cc:	fb02 f303 	mul.w	r3, r2, r3
 80078d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078d8:	b29a      	uxth	r2, r3
 80078da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	895b      	ldrh	r3, [r3, #10]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d008      	beq.n	80078f8 <find_volume+0x270>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	895b      	ldrh	r3, [r3, #10]
 80078ea:	461a      	mov	r2, r3
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	895b      	ldrh	r3, [r3, #10]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	4013      	ands	r3, r2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <find_volume+0x274>
 80078f8:	230d      	movs	r3, #13
 80078fa:	e141      	b.n	8007b80 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	3338      	adds	r3, #56	; 0x38
 8007900:	3311      	adds	r3, #17
 8007902:	4618      	mov	r0, r3
 8007904:	f7fd fdb4 	bl	8005470 <ld_word>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	891b      	ldrh	r3, [r3, #8]
 8007914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007916:	8992      	ldrh	r2, [r2, #12]
 8007918:	0952      	lsrs	r2, r2, #5
 800791a:	b292      	uxth	r2, r2
 800791c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007920:	fb02 f201 	mul.w	r2, r2, r1
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <find_volume+0x2a8>
 800792c:	230d      	movs	r3, #13
 800792e:	e127      	b.n	8007b80 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	3338      	adds	r3, #56	; 0x38
 8007934:	3313      	adds	r3, #19
 8007936:	4618      	mov	r0, r3
 8007938:	f7fd fd9a 	bl	8005470 <ld_word>
 800793c:	4603      	mov	r3, r0
 800793e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <find_volume+0x2cc>
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	3338      	adds	r3, #56	; 0x38
 800794a:	3320      	adds	r3, #32
 800794c:	4618      	mov	r0, r3
 800794e:	f7fd fda7 	bl	80054a0 <ld_dword>
 8007952:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	3338      	adds	r3, #56	; 0x38
 8007958:	330e      	adds	r3, #14
 800795a:	4618      	mov	r0, r3
 800795c:	f7fd fd88 	bl	8005470 <ld_word>
 8007960:	4603      	mov	r3, r0
 8007962:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007964:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <find_volume+0x2ec>
 800796a:	230d      	movs	r3, #13
 800796c:	e108      	b.n	8007b80 <find_volume+0x4f8>
 800796e:	bf00      	nop
 8007970:	200000ac 	.word	0x200000ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007974:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007978:	4413      	add	r3, r2
 800797a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800797c:	8911      	ldrh	r1, [r2, #8]
 800797e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007980:	8992      	ldrh	r2, [r2, #12]
 8007982:	0952      	lsrs	r2, r2, #5
 8007984:	b292      	uxth	r2, r2
 8007986:	fbb1 f2f2 	udiv	r2, r1, r2
 800798a:	b292      	uxth	r2, r2
 800798c:	4413      	add	r3, r2
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	429a      	cmp	r2, r3
 8007996:	d201      	bcs.n	800799c <find_volume+0x314>
 8007998:	230d      	movs	r3, #13
 800799a:	e0f1      	b.n	8007b80 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800799c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a4:	8952      	ldrh	r2, [r2, #10]
 80079a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <find_volume+0x32e>
 80079b2:	230d      	movs	r3, #13
 80079b4:	e0e4      	b.n	8007b80 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80079b6:	2303      	movs	r3, #3
 80079b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d802      	bhi.n	80079cc <find_volume+0x344>
 80079c6:	2302      	movs	r3, #2
 80079c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d802      	bhi.n	80079dc <find_volume+0x354>
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	1c9a      	adds	r2, r3, #2
 80079e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80079ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80079ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ee:	441a      	add	r2, r3
 80079f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80079f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	441a      	add	r2, r3
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80079fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d11e      	bne.n	8007a44 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	3338      	adds	r3, #56	; 0x38
 8007a0a:	332a      	adds	r3, #42	; 0x2a
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fd fd2f 	bl	8005470 <ld_word>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <find_volume+0x394>
 8007a18:	230d      	movs	r3, #13
 8007a1a:	e0b1      	b.n	8007b80 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	891b      	ldrh	r3, [r3, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <find_volume+0x3a0>
 8007a24:	230d      	movs	r3, #13
 8007a26:	e0ab      	b.n	8007b80 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	3338      	adds	r3, #56	; 0x38
 8007a2c:	332c      	adds	r3, #44	; 0x2c
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fd fd36 	bl	80054a0 <ld_dword>
 8007a34:	4602      	mov	r2, r0
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	647b      	str	r3, [r7, #68]	; 0x44
 8007a42:	e01f      	b.n	8007a84 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	891b      	ldrh	r3, [r3, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <find_volume+0x3c8>
 8007a4c:	230d      	movs	r3, #13
 8007a4e:	e097      	b.n	8007b80 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a56:	441a      	add	r2, r3
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d103      	bne.n	8007a6c <find_volume+0x3e4>
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	e00a      	b.n	8007a82 <find_volume+0x3fa>
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	69da      	ldr	r2, [r3, #28]
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	085a      	lsrs	r2, r3, #1
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007a82:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	6a1a      	ldr	r2, [r3, #32]
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	899b      	ldrh	r3, [r3, #12]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a90:	440b      	add	r3, r1
 8007a92:	3b01      	subs	r3, #1
 8007a94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a96:	8989      	ldrh	r1, [r1, #12]
 8007a98:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d201      	bcs.n	8007aa4 <find_volume+0x41c>
 8007aa0:	230d      	movs	r3, #13
 8007aa2:	e06d      	b.n	8007b80 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aaa:	619a      	str	r2, [r3, #24]
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	2280      	movs	r2, #128	; 0x80
 8007ab8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d149      	bne.n	8007b56 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	3338      	adds	r3, #56	; 0x38
 8007ac6:	3330      	adds	r3, #48	; 0x30
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fd fcd1 	bl	8005470 <ld_word>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d140      	bne.n	8007b56 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007adc:	f7fd ff78 	bl	80059d0 <move_window>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d137      	bne.n	8007b56 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	2200      	movs	r2, #0
 8007aea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	3338      	adds	r3, #56	; 0x38
 8007af0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fd fcbb 	bl	8005470 <ld_word>
 8007afa:	4603      	mov	r3, r0
 8007afc:	461a      	mov	r2, r3
 8007afe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d127      	bne.n	8007b56 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	3338      	adds	r3, #56	; 0x38
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fd fcc8 	bl	80054a0 <ld_dword>
 8007b10:	4603      	mov	r3, r0
 8007b12:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <find_volume+0x500>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d11e      	bne.n	8007b56 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	3338      	adds	r3, #56	; 0x38
 8007b1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fcbd 	bl	80054a0 <ld_dword>
 8007b26:	4603      	mov	r3, r0
 8007b28:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <find_volume+0x504>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d113      	bne.n	8007b56 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	3338      	adds	r3, #56	; 0x38
 8007b32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fd fcb2 	bl	80054a0 <ld_dword>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	3338      	adds	r3, #56	; 0x38
 8007b46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd fca8 	bl	80054a0 <ld_dword>
 8007b50:	4602      	mov	r2, r0
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007b5c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <find_volume+0x508>)
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <find_volume+0x508>)
 8007b68:	801a      	strh	r2, [r3, #0]
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <find_volume+0x508>)
 8007b6c:	881a      	ldrh	r2, [r3, #0]
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <find_volume+0x50c>)
 8007b76:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b7a:	f7fd fec1 	bl	8005900 <clear_lock>
#endif
	return FR_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3758      	adds	r7, #88	; 0x58
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	41615252 	.word	0x41615252
 8007b8c:	61417272 	.word	0x61417272
 8007b90:	200000b0 	.word	0x200000b0
 8007b94:	200000d4 	.word	0x200000d4

08007b98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007ba2:	2309      	movs	r3, #9
 8007ba4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01c      	beq.n	8007be6 <validate+0x4e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d018      	beq.n	8007be6 <validate+0x4e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d013      	beq.n	8007be6 <validate+0x4e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	889a      	ldrh	r2, [r3, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	88db      	ldrh	r3, [r3, #6]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d10c      	bne.n	8007be6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fd fbae 	bl	8005334 <disk_status>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <validate+0x4e>
			res = FR_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <validate+0x5a>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	e000      	b.n	8007bf4 <validate+0x5c>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	6013      	str	r3, [r2, #0]
	return res;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007c16:	f107 0310 	add.w	r3, r7, #16
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff fc9a 	bl	8007554 <get_ldnumber>
 8007c20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	da01      	bge.n	8007c2c <f_mount+0x28>
 8007c28:	230b      	movs	r3, #11
 8007c2a:	e02b      	b.n	8007c84 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c2c:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <f_mount+0x88>)
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c3c:	69b8      	ldr	r0, [r7, #24]
 8007c3e:	f7fd fe5f 	bl	8005900 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	490d      	ldr	r1, [pc, #52]	; (8007c8c <f_mount+0x88>)
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <f_mount+0x66>
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d001      	beq.n	8007c6e <f_mount+0x6a>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e00a      	b.n	8007c84 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007c6e:	f107 010c 	add.w	r1, r7, #12
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	2200      	movs	r2, #0
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fd05 	bl	8007688 <find_volume>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	200000ac 	.word	0x200000ac

08007c90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b09a      	sub	sp, #104	; 0x68
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <f_open+0x18>
 8007ca4:	2309      	movs	r3, #9
 8007ca6:	e1bb      	b.n	8008020 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007cb0:	79fa      	ldrb	r2, [r7, #7]
 8007cb2:	f107 0110 	add.w	r1, r7, #16
 8007cb6:	f107 0308 	add.w	r3, r7, #8
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fce4 	bl	8007688 <find_volume>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007cc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f040 819f 	bne.w	800800e <f_open+0x37e>
		dj.obj.fs = fs;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	f107 0314 	add.w	r3, r7, #20
 8007cda:	4611      	mov	r1, r2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff fbc3 	bl	8007468 <follow_path>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007ce8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d11a      	bne.n	8007d26 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007cf0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007cf4:	b25b      	sxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da03      	bge.n	8007d02 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007cfa:	2306      	movs	r3, #6
 8007cfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d00:	e011      	b.n	8007d26 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	f023 0301 	bic.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bf14      	ite	ne
 8007d0c:	2301      	movne	r3, #1
 8007d0e:	2300      	moveq	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	461a      	mov	r2, r3
 8007d14:	f107 0314 	add.w	r3, r7, #20
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fd fca8 	bl	8005670 <chk_lock>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	f003 031c 	and.w	r3, r3, #28
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d07f      	beq.n	8007e30 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d017      	beq.n	8007d68 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d10e      	bne.n	8007d5e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d40:	f7fd fcf2 	bl	8005728 <enq_lock>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d006      	beq.n	8007d58 <f_open+0xc8>
 8007d4a:	f107 0314 	add.w	r3, r7, #20
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe ff5a 	bl	8006c08 <dir_register>
 8007d54:	4603      	mov	r3, r0
 8007d56:	e000      	b.n	8007d5a <f_open+0xca>
 8007d58:	2312      	movs	r3, #18
 8007d5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	f043 0308 	orr.w	r3, r3, #8
 8007d64:	71fb      	strb	r3, [r7, #7]
 8007d66:	e010      	b.n	8007d8a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d68:	7ebb      	ldrb	r3, [r7, #26]
 8007d6a:	f003 0311 	and.w	r3, r3, #17
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <f_open+0xea>
					res = FR_DENIED;
 8007d72:	2307      	movs	r3, #7
 8007d74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d78:	e007      	b.n	8007d8a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <f_open+0xfa>
 8007d84:	2308      	movs	r3, #8
 8007d86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d168      	bne.n	8007e64 <f_open+0x1d4>
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d063      	beq.n	8007e64 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007d9c:	f7fd fa6c 	bl	8005278 <get_fattime>
 8007da0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da4:	330e      	adds	r3, #14
 8007da6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fd fbb7 	bl	800551c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db0:	3316      	adds	r3, #22
 8007db2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fd fbb1 	bl	800551c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dbc:	330b      	adds	r3, #11
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fb89 	bl	80064e0 <ld_clust>
 8007dce:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe fba1 	bl	800651e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dde:	331c      	adds	r3, #28
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fd fb9a 	bl	800551c <st_dword>
					fs->wflag = 1;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	2201      	movs	r2, #1
 8007dec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d037      	beq.n	8007e64 <f_open+0x1d4>
						dw = fs->winsect;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007dfa:	f107 0314 	add.w	r3, r7, #20
 8007dfe:	2200      	movs	r2, #0
 8007e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe f891 	bl	8005f2a <remove_chain>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007e0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d126      	bne.n	8007e64 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fd fdd8 	bl	80059d0 <move_window>
 8007e20:	4603      	mov	r3, r0
 8007e22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e2a:	3a01      	subs	r2, #1
 8007e2c:	615a      	str	r2, [r3, #20]
 8007e2e:	e019      	b.n	8007e64 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d115      	bne.n	8007e64 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e38:	7ebb      	ldrb	r3, [r7, #26]
 8007e3a:	f003 0310 	and.w	r3, r3, #16
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007e42:	2304      	movs	r3, #4
 8007e44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007e48:	e00c      	b.n	8007e64 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <f_open+0x1d4>
 8007e54:	7ebb      	ldrb	r3, [r7, #26]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <f_open+0x1d4>
						res = FR_DENIED;
 8007e5e:	2307      	movs	r3, #7
 8007e60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007e64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d128      	bne.n	8007ebe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	f003 0308 	and.w	r3, r3, #8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	f023 0301 	bic.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf14      	ite	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	2300      	moveq	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f107 0314 	add.w	r3, r7, #20
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fd fc61 	bl	800576c <inc_lock>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <f_open+0x22e>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007ebe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f040 80a3 	bne.w	800800e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fb06 	bl	80064e0 <ld_clust>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007edc:	331c      	adds	r3, #28
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd fade 	bl	80054a0 <ld_dword>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	88da      	ldrh	r2, [r3, #6]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	79fa      	ldrb	r2, [r7, #7]
 8007f02:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3330      	adds	r3, #48	; 0x30
 8007f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fd fb48 	bl	80055b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d06e      	beq.n	800800e <f_open+0x37e>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d06a      	beq.n	800800e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	895b      	ldrh	r3, [r3, #10]
 8007f44:	461a      	mov	r2, r3
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	899b      	ldrh	r3, [r3, #12]
 8007f4a:	fb03 f302 	mul.w	r3, r3, r2
 8007f4e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f5c:	e016      	b.n	8007f8c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd fdf1 	bl	8005b4a <get_fat>
 8007f68:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d802      	bhi.n	8007f76 <f_open+0x2e6>
 8007f70:	2302      	movs	r3, #2
 8007f72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d102      	bne.n	8007f84 <f_open+0x2f4>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d103      	bne.n	8007f9c <f_open+0x30c>
 8007f94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d8e0      	bhi.n	8007f5e <f_open+0x2ce>
				}
				fp->clust = clst;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fa0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007fa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d131      	bne.n	800800e <f_open+0x37e>
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	899b      	ldrh	r3, [r3, #12]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fb6:	fb02 f201 	mul.w	r2, r2, r1
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d026      	beq.n	800800e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fd fda1 	bl	8005b0c <clust2sect>
 8007fca:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d103      	bne.n	8007fda <f_open+0x34a>
						res = FR_INT_ERR;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007fd8:	e019      	b.n	800800e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	899b      	ldrh	r3, [r3, #12]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe8:	441a      	add	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	7858      	ldrb	r0, [r3, #1]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a1a      	ldr	r2, [r3, #32]
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f7fd f9d9 	bl	80053b4 <disk_read>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <f_open+0x37e>
 8008008:	2301      	movs	r3, #1
 800800a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800800e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <f_open+0x38c>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800801c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008020:	4618      	mov	r0, r3
 8008022:	3768      	adds	r7, #104	; 0x68
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	; 0x38
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f107 0214 	add.w	r2, r7, #20
 8008046:	4611      	mov	r1, r2
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fda5 	bl	8007b98 <validate>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008054:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008058:	2b00      	cmp	r3, #0
 800805a:	d107      	bne.n	800806c <f_read+0x44>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	7d5b      	ldrb	r3, [r3, #21]
 8008060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <f_read+0x4a>
 800806c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008070:	e135      	b.n	80082de <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	7d1b      	ldrb	r3, [r3, #20]
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <f_read+0x5a>
 800807e:	2307      	movs	r3, #7
 8008080:	e12d      	b.n	80082de <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	429a      	cmp	r2, r3
 8008094:	f240 811e 	bls.w	80082d4 <f_read+0x2ac>
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800809c:	e11a      	b.n	80082d4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	8992      	ldrh	r2, [r2, #12]
 80080a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80080aa:	fb02 f201 	mul.w	r2, r2, r1
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f040 80d5 	bne.w	8008260 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	8992      	ldrh	r2, [r2, #12]
 80080be:	fbb3 f3f2 	udiv	r3, r3, r2
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	8952      	ldrh	r2, [r2, #10]
 80080c6:	3a01      	subs	r2, #1
 80080c8:	4013      	ands	r3, r2
 80080ca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d12f      	bne.n	8008132 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d103      	bne.n	80080e2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	633b      	str	r3, [r7, #48]	; 0x30
 80080e0:	e013      	b.n	800810a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d007      	beq.n	80080fa <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	4619      	mov	r1, r3
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f7fe f817 	bl	8006124 <clmt_clust>
 80080f6:	6338      	str	r0, [r7, #48]	; 0x30
 80080f8:	e007      	b.n	800810a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f7fd fd21 	bl	8005b4a <get_fat>
 8008108:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	2b01      	cmp	r3, #1
 800810e:	d804      	bhi.n	800811a <f_read+0xf2>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2202      	movs	r2, #2
 8008114:	755a      	strb	r2, [r3, #21]
 8008116:	2302      	movs	r3, #2
 8008118:	e0e1      	b.n	80082de <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008120:	d104      	bne.n	800812c <f_read+0x104>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	755a      	strb	r2, [r3, #21]
 8008128:	2301      	movs	r3, #1
 800812a:	e0d8      	b.n	80082de <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008130:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fd fce6 	bl	8005b0c <clust2sect>
 8008140:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <f_read+0x12a>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2202      	movs	r2, #2
 800814c:	755a      	strb	r2, [r3, #21]
 800814e:	2302      	movs	r3, #2
 8008150:	e0c5      	b.n	80082de <f_read+0x2b6>
			sect += csect;
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	899b      	ldrh	r3, [r3, #12]
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	fbb3 f3f2 	udiv	r3, r3, r2
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	2b00      	cmp	r3, #0
 800816c:	d041      	beq.n	80081f2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	4413      	add	r3, r2
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	8952      	ldrh	r2, [r2, #10]
 8008178:	4293      	cmp	r3, r2
 800817a:	d905      	bls.n	8008188 <f_read+0x160>
					cc = fs->csize - csect;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	895b      	ldrh	r3, [r3, #10]
 8008180:	461a      	mov	r2, r3
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	7858      	ldrb	r0, [r3, #1]
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008192:	f7fd f90f 	bl	80053b4 <disk_read>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <f_read+0x17e>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	755a      	strb	r2, [r3, #21]
 80081a2:	2301      	movs	r3, #1
 80081a4:	e09b      	b.n	80082de <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	7d1b      	ldrb	r3, [r3, #20]
 80081aa:	b25b      	sxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	da18      	bge.n	80081e2 <f_read+0x1ba>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d911      	bls.n	80081e2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1a      	ldr	r2, [r3, #32]
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	8992      	ldrh	r2, [r2, #12]
 80081ca:	fb02 f303 	mul.w	r3, r2, r3
 80081ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d0:	18d0      	adds	r0, r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	899b      	ldrh	r3, [r3, #12]
 80081dc:	461a      	mov	r2, r3
 80081de:	f7fd f9c9 	bl	8005574 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	899b      	ldrh	r3, [r3, #12]
 80081e6:	461a      	mov	r2, r3
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80081f0:	e05c      	b.n	80082ac <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d02e      	beq.n	800825a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	7d1b      	ldrb	r3, [r3, #20]
 8008200:	b25b      	sxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	da18      	bge.n	8008238 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	7858      	ldrb	r0, [r3, #1]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1a      	ldr	r2, [r3, #32]
 8008214:	2301      	movs	r3, #1
 8008216:	f7fd f8ed 	bl	80053f4 <disk_write>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <f_read+0x202>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	755a      	strb	r2, [r3, #21]
 8008226:	2301      	movs	r3, #1
 8008228:	e059      	b.n	80082de <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	7d1b      	ldrb	r3, [r3, #20]
 800822e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008232:	b2da      	uxtb	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	7858      	ldrb	r0, [r3, #1]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008242:	2301      	movs	r3, #1
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	f7fd f8b5 	bl	80053b4 <disk_read>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <f_read+0x232>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	755a      	strb	r2, [r3, #21]
 8008256:	2301      	movs	r3, #1
 8008258:	e041      	b.n	80082de <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	899b      	ldrh	r3, [r3, #12]
 8008264:	4618      	mov	r0, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	8992      	ldrh	r2, [r2, #12]
 800826e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008272:	fb02 f201 	mul.w	r2, r2, r1
 8008276:	1a9b      	subs	r3, r3, r2
 8008278:	1ac3      	subs	r3, r0, r3
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800827c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d901      	bls.n	8008288 <f_read+0x260>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	8992      	ldrh	r2, [r2, #12]
 8008296:	fbb3 f0f2 	udiv	r0, r3, r2
 800829a:	fb02 f200 	mul.w	r2, r2, r0
 800829e:	1a9b      	subs	r3, r3, r2
 80082a0:	440b      	add	r3, r1
 80082a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a4:	4619      	mov	r1, r3
 80082a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082a8:	f7fd f964 	bl	8005574 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80082ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b0:	4413      	add	r3, r2
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	441a      	add	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	619a      	str	r2, [r3, #24]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	441a      	add	r2, r3
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f47f aee1 	bne.w	800809e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3738      	adds	r7, #56	; 0x38
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f107 0208 	add.w	r2, r7, #8
 80082f4:	4611      	mov	r1, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff fc4e 	bl	8007b98 <validate>
 80082fc:	4603      	mov	r3, r0
 80082fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008300:	7dfb      	ldrb	r3, [r7, #23]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d168      	bne.n	80083d8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	7d1b      	ldrb	r3, [r3, #20]
 800830a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830e:	2b00      	cmp	r3, #0
 8008310:	d062      	beq.n	80083d8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7d1b      	ldrb	r3, [r3, #20]
 8008316:	b25b      	sxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	da15      	bge.n	8008348 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	7858      	ldrb	r0, [r3, #1]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1a      	ldr	r2, [r3, #32]
 800832a:	2301      	movs	r3, #1
 800832c:	f7fd f862 	bl	80053f4 <disk_write>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <f_sync+0x54>
 8008336:	2301      	movs	r3, #1
 8008338:	e04f      	b.n	80083da <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7d1b      	ldrb	r3, [r3, #20]
 800833e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008342:	b2da      	uxtb	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008348:	f7fc ff96 	bl	8005278 <get_fattime>
 800834c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	4619      	mov	r1, r3
 8008356:	4610      	mov	r0, r2
 8008358:	f7fd fb3a 	bl	80059d0 <move_window>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d138      	bne.n	80083d8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	330b      	adds	r3, #11
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	330b      	adds	r3, #11
 8008376:	f042 0220 	orr.w	r2, r2, #32
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	461a      	mov	r2, r3
 8008388:	68f9      	ldr	r1, [r7, #12]
 800838a:	f7fe f8c8 	bl	800651e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f103 021c 	add.w	r2, r3, #28
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4619      	mov	r1, r3
 800839a:	4610      	mov	r0, r2
 800839c:	f7fd f8be 	bl	800551c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3316      	adds	r3, #22
 80083a4:	6939      	ldr	r1, [r7, #16]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fd f8b8 	bl	800551c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3312      	adds	r3, #18
 80083b0:	2100      	movs	r1, #0
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fd f897 	bl	80054e6 <st_word>
					fs->wflag = 1;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2201      	movs	r2, #1
 80083bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fd fb33 	bl	8005a2c <sync_fs>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7d1b      	ldrb	r3, [r3, #20]
 80083ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ff7b 	bl	80082e6 <f_sync>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d118      	bne.n	800842c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f107 0208 	add.w	r2, r7, #8
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff fbc8 	bl	8007b98 <validate>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10c      	bne.n	800842c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fd fa36 	bl	8005888 <dec_lock>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d102      	bne.n	800842c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b090      	sub	sp, #64	; 0x40
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f107 0208 	add.w	r2, r7, #8
 8008446:	4611      	mov	r1, r2
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff fba5 	bl	8007b98 <validate>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008458:	2b00      	cmp	r3, #0
 800845a:	d103      	bne.n	8008464 <f_lseek+0x2e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7d5b      	ldrb	r3, [r3, #21]
 8008460:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008464:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <f_lseek+0x3c>
 800846c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008470:	e201      	b.n	8008876 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 80d9 	beq.w	800862e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d15a      	bne.n	800853a <f_lseek+0x104>
			tbl = fp->cltbl;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	1d1a      	adds	r2, r3, #4
 800848e:	627a      	str	r2, [r7, #36]	; 0x24
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	2302      	movs	r3, #2
 8008496:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d03a      	beq.n	800851a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80084a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	2300      	movs	r3, #0
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	3302      	adds	r3, #2
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	3301      	adds	r3, #1
 80084ba:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fd fb42 	bl	8005b4a <get_fat>
 80084c6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d804      	bhi.n	80084d8 <f_lseek+0xa2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	755a      	strb	r2, [r3, #21]
 80084d4:	2302      	movs	r3, #2
 80084d6:	e1ce      	b.n	8008876 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084de:	d104      	bne.n	80084ea <f_lseek+0xb4>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	755a      	strb	r2, [r3, #21]
 80084e6:	2301      	movs	r3, #1
 80084e8:	e1c5      	b.n	8008876 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3301      	adds	r3, #1
 80084ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d0de      	beq.n	80084b2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80084f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d809      	bhi.n	8008510 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	1d1a      	adds	r2, r3, #4
 8008500:	627a      	str	r2, [r7, #36]	; 0x24
 8008502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	1d1a      	adds	r2, r3, #4
 800850a:	627a      	str	r2, [r7, #36]	; 0x24
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008516:	429a      	cmp	r2, r3
 8008518:	d3c4      	bcc.n	80084a4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008520:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	429a      	cmp	r2, r3
 8008528:	d803      	bhi.n	8008532 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	e19f      	b.n	8008872 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008532:	2311      	movs	r3, #17
 8008534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008538:	e19b      	b.n	8008872 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d902      	bls.n	800854a <f_lseek+0x114>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 818d 	beq.w	8008872 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	3b01      	subs	r3, #1
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fd fde0 	bl	8006124 <clmt_clust>
 8008564:	4602      	mov	r2, r0
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	4619      	mov	r1, r3
 8008572:	4610      	mov	r0, r2
 8008574:	f7fd faca 	bl	8005b0c <clust2sect>
 8008578:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <f_lseek+0x154>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	755a      	strb	r2, [r3, #21]
 8008586:	2302      	movs	r3, #2
 8008588:	e175      	b.n	8008876 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	3b01      	subs	r3, #1
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	8992      	ldrh	r2, [r2, #12]
 8008592:	fbb3 f3f2 	udiv	r3, r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	8952      	ldrh	r2, [r2, #10]
 800859a:	3a01      	subs	r2, #1
 800859c:	4013      	ands	r3, r2
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	4413      	add	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	8992      	ldrh	r2, [r2, #12]
 80085ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80085b0:	fb02 f201 	mul.w	r2, r2, r1
 80085b4:	1a9b      	subs	r3, r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 815b 	beq.w	8008872 <f_lseek+0x43c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	f000 8155 	beq.w	8008872 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7d1b      	ldrb	r3, [r3, #20]
 80085cc:	b25b      	sxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	da18      	bge.n	8008604 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	7858      	ldrb	r0, [r3, #1]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a1a      	ldr	r2, [r3, #32]
 80085e0:	2301      	movs	r3, #1
 80085e2:	f7fc ff07 	bl	80053f4 <disk_write>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <f_lseek+0x1c0>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	755a      	strb	r2, [r3, #21]
 80085f2:	2301      	movs	r3, #1
 80085f4:	e13f      	b.n	8008876 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	7d1b      	ldrb	r3, [r3, #20]
 80085fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	7858      	ldrb	r0, [r3, #1]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800860e:	2301      	movs	r3, #1
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	f7fc fecf 	bl	80053b4 <disk_read>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <f_lseek+0x1f0>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	755a      	strb	r2, [r3, #21]
 8008622:	2301      	movs	r3, #1
 8008624:	e127      	b.n	8008876 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	621a      	str	r2, [r3, #32]
 800862c:	e121      	b.n	8008872 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d908      	bls.n	800864a <f_lseek+0x214>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7d1b      	ldrb	r3, [r3, #20]
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	637b      	str	r3, [r7, #52]	; 0x34
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008658:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 80b5 	beq.w	80087cc <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	895b      	ldrh	r3, [r3, #10]
 8008666:	461a      	mov	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	899b      	ldrh	r3, [r3, #12]
 800866c:	fb03 f302 	mul.w	r3, r3, r2
 8008670:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01b      	beq.n	80086b0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	1e5a      	subs	r2, r3, #1
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	1e59      	subs	r1, r3, #1
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800868c:	429a      	cmp	r2, r3
 800868e:	d30f      	bcc.n	80086b0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	1e5a      	subs	r2, r3, #1
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	425b      	negs	r3, r3
 8008698:	401a      	ands	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ae:	e022      	b.n	80086f6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d119      	bne.n	80086f0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2100      	movs	r1, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fd fc97 	bl	8005ff4 <create_chain>
 80086c6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d104      	bne.n	80086d8 <f_lseek+0x2a2>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2202      	movs	r2, #2
 80086d2:	755a      	strb	r2, [r3, #21]
 80086d4:	2302      	movs	r3, #2
 80086d6:	e0ce      	b.n	8008876 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086de:	d104      	bne.n	80086ea <f_lseek+0x2b4>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	755a      	strb	r2, [r3, #21]
 80086e6:	2301      	movs	r3, #1
 80086e8:	e0c5      	b.n	8008876 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ee:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086f4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d067      	beq.n	80087cc <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80086fc:	e03a      	b.n	8008774 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	603b      	str	r3, [r7, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	441a      	add	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7d1b      	ldrb	r3, [r3, #20]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008722:	4618      	mov	r0, r3
 8008724:	f7fd fc66 	bl	8005ff4 <create_chain>
 8008728:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	d108      	bne.n	8008742 <f_lseek+0x30c>
							ofs = 0; break;
 8008730:	2300      	movs	r3, #0
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	e022      	b.n	800877c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800873a:	4618      	mov	r0, r3
 800873c:	f7fd fa05 	bl	8005b4a <get_fat>
 8008740:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d104      	bne.n	8008754 <f_lseek+0x31e>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	755a      	strb	r2, [r3, #21]
 8008750:	2301      	movs	r3, #1
 8008752:	e090      	b.n	8008876 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	2b01      	cmp	r3, #1
 8008758:	d904      	bls.n	8008764 <f_lseek+0x32e>
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008760:	429a      	cmp	r2, r3
 8008762:	d304      	bcc.n	800876e <f_lseek+0x338>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	755a      	strb	r2, [r3, #21]
 800876a:	2302      	movs	r3, #2
 800876c:	e083      	b.n	8008876 <f_lseek+0x440>
					fp->clust = clst;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008772:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	429a      	cmp	r2, r3
 800877a:	d8c0      	bhi.n	80086fe <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699a      	ldr	r2, [r3, #24]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	441a      	add	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	899b      	ldrh	r3, [r3, #12]
 800878c:	461a      	mov	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	fbb3 f1f2 	udiv	r1, r3, r2
 8008794:	fb02 f201 	mul.w	r2, r2, r1
 8008798:	1a9b      	subs	r3, r3, r2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d016      	beq.n	80087cc <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fd f9b2 	bl	8005b0c <clust2sect>
 80087a8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80087aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <f_lseek+0x384>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	755a      	strb	r2, [r3, #21]
 80087b6:	2302      	movs	r3, #2
 80087b8:	e05d      	b.n	8008876 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	899b      	ldrh	r3, [r3, #12]
 80087be:	461a      	mov	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c8:	4413      	add	r3, r2
 80087ca:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699a      	ldr	r2, [r3, #24]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d90a      	bls.n	80087ee <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699a      	ldr	r2, [r3, #24]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7d1b      	ldrb	r3, [r3, #20]
 80087e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	8992      	ldrh	r2, [r2, #12]
 80087f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80087fa:	fb02 f201 	mul.w	r2, r2, r1
 80087fe:	1a9b      	subs	r3, r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d036      	beq.n	8008872 <f_lseek+0x43c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800880a:	429a      	cmp	r2, r3
 800880c:	d031      	beq.n	8008872 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	7d1b      	ldrb	r3, [r3, #20]
 8008812:	b25b      	sxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	da18      	bge.n	800884a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	7858      	ldrb	r0, [r3, #1]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1a      	ldr	r2, [r3, #32]
 8008826:	2301      	movs	r3, #1
 8008828:	f7fc fde4 	bl	80053f4 <disk_write>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d004      	beq.n	800883c <f_lseek+0x406>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	755a      	strb	r2, [r3, #21]
 8008838:	2301      	movs	r3, #1
 800883a:	e01c      	b.n	8008876 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7d1b      	ldrb	r3, [r3, #20]
 8008840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008844:	b2da      	uxtb	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	7858      	ldrb	r0, [r3, #1]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008854:	2301      	movs	r3, #1
 8008856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008858:	f7fc fdac 	bl	80053b4 <disk_read>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d004      	beq.n	800886c <f_lseek+0x436>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	755a      	strb	r2, [r3, #21]
 8008868:	2301      	movs	r3, #1
 800886a:	e004      	b.n	8008876 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008870:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008872:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008876:	4618      	mov	r0, r3
 8008878:	3740      	adds	r7, #64	; 0x40
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b086      	sub	sp, #24
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <f_opendir+0x14>
 800888e:	2309      	movs	r3, #9
 8008890:	e064      	b.n	800895c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008896:	f107 010c 	add.w	r1, r7, #12
 800889a:	463b      	mov	r3, r7
 800889c:	2200      	movs	r2, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fef2 	bl	8007688 <find_volume>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d14f      	bne.n	800894e <f_opendir+0xd0>
		obj->fs = fs;
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7fe fdd5 	bl	8007468 <follow_path>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d13d      	bne.n	8008944 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	db12      	blt.n	80088fa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	799b      	ldrb	r3, [r3, #6]
 80088d8:	f003 0310 	and.w	r3, r3, #16
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f7fd fdf9 	bl	80064e0 <ld_clust>
 80088ee:	4602      	mov	r2, r0
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	609a      	str	r2, [r3, #8]
 80088f4:	e001      	b.n	80088fa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80088f6:	2305      	movs	r3, #5
 80088f8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d121      	bne.n	8008944 <f_opendir+0xc6>
				obj->id = fs->id;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	88da      	ldrh	r2, [r3, #6]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fd fc42 	bl	8006194 <dir_sdi>
 8008910:	4603      	mov	r3, r0
 8008912:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d114      	bne.n	8008944 <f_opendir+0xc6>
					if (obj->sclust) {
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00d      	beq.n	800893e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008922:	2100      	movs	r1, #0
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fc ff21 	bl	800576c <inc_lock>
 800892a:	4602      	mov	r2, r0
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d105      	bne.n	8008944 <f_opendir+0xc6>
 8008938:	2312      	movs	r3, #18
 800893a:	75fb      	strb	r3, [r7, #23]
 800893c:	e002      	b.n	8008944 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2200      	movs	r2, #0
 8008942:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	2b04      	cmp	r3, #4
 8008948:	d101      	bne.n	800894e <f_opendir+0xd0>
 800894a:	2305      	movs	r3, #5
 800894c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <f_opendir+0xdc>
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800895a:	7dfb      	ldrb	r3, [r7, #23]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f107 0208 	add.w	r2, r7, #8
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff f90e 	bl	8007b98 <validate>
 800897c:	4603      	mov	r3, r0
 800897e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d126      	bne.n	80089d4 <f_readdir+0x70>
		if (!fno) {
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d106      	bne.n	800899a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800898c:	2100      	movs	r1, #0
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7fd fc00 	bl	8006194 <dir_sdi>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
 8008998:	e01c      	b.n	80089d4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800899a:	2100      	movs	r1, #0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7fd ffcc 	bl	800693a <dir_read>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d101      	bne.n	80089b0 <f_readdir+0x4c>
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10e      	bne.n	80089d4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fe fa1d 	bl	8006df8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80089be:	2100      	movs	r1, #0
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7fd fc70 	bl	80062a6 <dir_next>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d101      	bne.n	80089d4 <f_readdir+0x70>
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff ffba 	bl	8008964 <f_readdir>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d114      	bne.n	8008a24 <f_findnext+0x46>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d011      	beq.n	8008a24 <f_findnext+0x46>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	7d9b      	ldrb	r3, [r3, #22]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00d      	beq.n	8008a24 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f103 0116 	add.w	r1, r3, #22
 8008a12:	2300      	movs	r3, #0
 8008a14:	2200      	movs	r2, #0
 8008a16:	f7fe faf3 	bl	8007000 <pattern_matching>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d100      	bne.n	8008a22 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008a20:	e7e2      	b.n	80089e8 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008a22:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b086      	sub	sp, #24
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff ff1a 	bl	800887e <f_opendir>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d105      	bne.n	8008a60 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff ffc1 	bl	80089de <f_findnext>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3718      	adds	r7, #24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b092      	sub	sp, #72	; 0x48
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008a76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe fe01 	bl	8007688 <find_volume>
 8008a86:	4603      	mov	r3, r0
 8008a88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008a8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 8099 	bne.w	8008bc8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	3b02      	subs	r3, #2
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d804      	bhi.n	8008ab4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	699a      	ldr	r2, [r3, #24]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e089      	b.n	8008bc8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d128      	bne.n	8008b12 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008ac8:	f107 0314 	add.w	r3, r7, #20
 8008acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fd f83b 	bl	8005b4a <get_fat>
 8008ad4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d103      	bne.n	8008ae6 <f_getfree+0x7c>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ae4:	e063      	b.n	8008bae <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d103      	bne.n	8008af4 <f_getfree+0x8a>
 8008aec:	2302      	movs	r3, #2
 8008aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008af2:	e05c      	b.n	8008bae <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <f_getfree+0x96>
 8008afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008afc:	3301      	adds	r3, #1
 8008afe:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	3301      	adds	r3, #1
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d3db      	bcc.n	8008ac8 <f_getfree+0x5e>
 8008b10:	e04d      	b.n	8008bae <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
 8008b22:	2300      	movs	r3, #0
 8008b24:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d113      	bne.n	8008b54 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	63ba      	str	r2, [r7, #56]	; 0x38
 8008b34:	4619      	mov	r1, r3
 8008b36:	f7fc ff4b 	bl	80059d0 <move_window>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008b40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d131      	bne.n	8008bac <f_getfree+0x142>
							p = fs->win;
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	3338      	adds	r3, #56	; 0x38
 8008b4c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	899b      	ldrh	r3, [r3, #12]
 8008b52:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d10f      	bne.n	8008b7c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b5e:	f7fc fc87 	bl	8005470 <ld_word>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <f_getfree+0x104>
 8008b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b70:	3302      	adds	r3, #2
 8008b72:	633b      	str	r3, [r7, #48]	; 0x30
 8008b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b76:	3b02      	subs	r3, #2
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7a:	e010      	b.n	8008b9e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b7e:	f7fc fc8f 	bl	80054a0 <ld_dword>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <f_getfree+0x128>
 8008b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b8e:	3301      	adds	r3, #1
 8008b90:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	3304      	adds	r3, #4
 8008b96:	633b      	str	r3, [r7, #48]	; 0x30
 8008b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1bd      	bne.n	8008b26 <f_getfree+0xbc>
 8008baa:	e000      	b.n	8008bae <f_getfree+0x144>
							if (res != FR_OK) break;
 8008bac:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	791a      	ldrb	r2, [r3, #4]
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	f042 0201 	orr.w	r2, r2, #1
 8008bc4:	b2d2      	uxtb	r2, r2
 8008bc6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008bc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3748      	adds	r7, #72	; 0x48
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008be2:	2301      	movs	r3, #1
 8008be4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008bea:	4b1f      	ldr	r3, [pc, #124]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008bec:	7a5b      	ldrb	r3, [r3, #9]
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d131      	bne.n	8008c58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008bf4:	4b1c      	ldr	r3, [pc, #112]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008bf6:	7a5b      	ldrb	r3, [r3, #9]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4b1a      	ldr	r3, [pc, #104]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008bfe:	2100      	movs	r1, #0
 8008c00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008c02:	4b19      	ldr	r3, [pc, #100]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008c04:	7a5b      	ldrb	r3, [r3, #9]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008c14:	7a5b      	ldrb	r3, [r3, #9]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4b13      	ldr	r3, [pc, #76]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008c1c:	4413      	add	r3, r2
 8008c1e:	79fa      	ldrb	r2, [r7, #7]
 8008c20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008c22:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008c24:	7a5b      	ldrb	r3, [r3, #9]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	b2d1      	uxtb	r1, r2
 8008c2c:	4a0e      	ldr	r2, [pc, #56]	; (8008c68 <FATFS_LinkDriverEx+0x94>)
 8008c2e:	7251      	strb	r1, [r2, #9]
 8008c30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008c32:	7dbb      	ldrb	r3, [r7, #22]
 8008c34:	3330      	adds	r3, #48	; 0x30
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	223a      	movs	r2, #58	; 0x3a
 8008c42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	3302      	adds	r3, #2
 8008c48:	222f      	movs	r2, #47	; 0x2f
 8008c4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3303      	adds	r3, #3
 8008c50:	2200      	movs	r2, #0
 8008c52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	200002d4 	.word	0x200002d4

08008c6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008c76:	2200      	movs	r2, #0
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff ffaa 	bl	8008bd4 <FATFS_LinkDriverEx>
 8008c80:	4603      	mov	r3, r0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c9c:	d802      	bhi.n	8008ca4 <ff_convert+0x18>
		c = chr;
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	81fb      	strh	r3, [r7, #14]
 8008ca2:	e025      	b.n	8008cf0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008caa:	88fb      	ldrh	r3, [r7, #6]
 8008cac:	2bff      	cmp	r3, #255	; 0xff
 8008cae:	d805      	bhi.n	8008cbc <ff_convert+0x30>
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	3b80      	subs	r3, #128	; 0x80
 8008cb4:	4a12      	ldr	r2, [pc, #72]	; (8008d00 <ff_convert+0x74>)
 8008cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cba:	e000      	b.n	8008cbe <ff_convert+0x32>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	81fb      	strh	r3, [r7, #14]
 8008cc0:	e016      	b.n	8008cf0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	81fb      	strh	r3, [r7, #14]
 8008cc6:	e009      	b.n	8008cdc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008cc8:	89fb      	ldrh	r3, [r7, #14]
 8008cca:	4a0d      	ldr	r2, [pc, #52]	; (8008d00 <ff_convert+0x74>)
 8008ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd0:	88fa      	ldrh	r2, [r7, #6]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d006      	beq.n	8008ce4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008cd6:	89fb      	ldrh	r3, [r7, #14]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	81fb      	strh	r3, [r7, #14]
 8008cdc:	89fb      	ldrh	r3, [r7, #14]
 8008cde:	2b7f      	cmp	r3, #127	; 0x7f
 8008ce0:	d9f2      	bls.n	8008cc8 <ff_convert+0x3c>
 8008ce2:	e000      	b.n	8008ce6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008ce4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008ce6:	89fb      	ldrh	r3, [r7, #14]
 8008ce8:	3380      	adds	r3, #128	; 0x80
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	080098ec 	.word	0x080098ec

08008d04 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d14:	d201      	bcs.n	8008d1a <ff_wtoupper+0x16>
 8008d16:	4b3e      	ldr	r3, [pc, #248]	; (8008e10 <ff_wtoupper+0x10c>)
 8008d18:	e000      	b.n	8008d1c <ff_wtoupper+0x18>
 8008d1a:	4b3e      	ldr	r3, [pc, #248]	; (8008e14 <ff_wtoupper+0x110>)
 8008d1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	617a      	str	r2, [r7, #20]
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008d28:	8a7b      	ldrh	r3, [r7, #18]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d068      	beq.n	8008e00 <ff_wtoupper+0xfc>
 8008d2e:	88fa      	ldrh	r2, [r7, #6]
 8008d30:	8a7b      	ldrh	r3, [r7, #18]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d364      	bcc.n	8008e00 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	1c9a      	adds	r2, r3, #2
 8008d3a:	617a      	str	r2, [r7, #20]
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	823b      	strh	r3, [r7, #16]
 8008d40:	8a3b      	ldrh	r3, [r7, #16]
 8008d42:	0a1b      	lsrs	r3, r3, #8
 8008d44:	81fb      	strh	r3, [r7, #14]
 8008d46:	8a3b      	ldrh	r3, [r7, #16]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008d4c:	88fa      	ldrh	r2, [r7, #6]
 8008d4e:	8a79      	ldrh	r1, [r7, #18]
 8008d50:	8a3b      	ldrh	r3, [r7, #16]
 8008d52:	440b      	add	r3, r1
 8008d54:	429a      	cmp	r2, r3
 8008d56:	da49      	bge.n	8008dec <ff_wtoupper+0xe8>
			switch (cmd) {
 8008d58:	89fb      	ldrh	r3, [r7, #14]
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d84f      	bhi.n	8008dfe <ff_wtoupper+0xfa>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <ff_wtoupper+0x60>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008d89 	.word	0x08008d89
 8008d68:	08008d9b 	.word	0x08008d9b
 8008d6c:	08008db1 	.word	0x08008db1
 8008d70:	08008db9 	.word	0x08008db9
 8008d74:	08008dc1 	.word	0x08008dc1
 8008d78:	08008dc9 	.word	0x08008dc9
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008dd9 	.word	0x08008dd9
 8008d84:	08008de1 	.word	0x08008de1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008d88:	88fa      	ldrh	r2, [r7, #6]
 8008d8a:	8a7b      	ldrh	r3, [r7, #18]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	4413      	add	r3, r2
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	80fb      	strh	r3, [r7, #6]
 8008d98:	e027      	b.n	8008dea <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008d9a:	88fa      	ldrh	r2, [r7, #6]
 8008d9c:	8a7b      	ldrh	r3, [r7, #18]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	88fa      	ldrh	r2, [r7, #6]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	80fb      	strh	r3, [r7, #6]
 8008dae:	e01c      	b.n	8008dea <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	3b10      	subs	r3, #16
 8008db4:	80fb      	strh	r3, [r7, #6]
 8008db6:	e018      	b.n	8008dea <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008db8:	88fb      	ldrh	r3, [r7, #6]
 8008dba:	3b20      	subs	r3, #32
 8008dbc:	80fb      	strh	r3, [r7, #6]
 8008dbe:	e014      	b.n	8008dea <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	3b30      	subs	r3, #48	; 0x30
 8008dc4:	80fb      	strh	r3, [r7, #6]
 8008dc6:	e010      	b.n	8008dea <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	3b1a      	subs	r3, #26
 8008dcc:	80fb      	strh	r3, [r7, #6]
 8008dce:	e00c      	b.n	8008dea <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008dd0:	88fb      	ldrh	r3, [r7, #6]
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	80fb      	strh	r3, [r7, #6]
 8008dd6:	e008      	b.n	8008dea <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008dd8:	88fb      	ldrh	r3, [r7, #6]
 8008dda:	3b50      	subs	r3, #80	; 0x50
 8008ddc:	80fb      	strh	r3, [r7, #6]
 8008dde:	e004      	b.n	8008dea <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008de6:	80fb      	strh	r3, [r7, #6]
 8008de8:	bf00      	nop
			}
			break;
 8008dea:	e008      	b.n	8008dfe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008dec:	89fb      	ldrh	r3, [r7, #14]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d195      	bne.n	8008d1e <ff_wtoupper+0x1a>
 8008df2:	8a3b      	ldrh	r3, [r7, #16]
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	4413      	add	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008dfc:	e78f      	b.n	8008d1e <ff_wtoupper+0x1a>
			break;
 8008dfe:	bf00      	nop
	}

	return chr;
 8008e00:	88fb      	ldrh	r3, [r7, #6]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	080099ec 	.word	0x080099ec
 8008e14:	08009be0 	.word	0x08009be0

08008e18 <__errno>:
 8008e18:	4b01      	ldr	r3, [pc, #4]	; (8008e20 <__errno+0x8>)
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	20000024 	.word	0x20000024

08008e24 <__libc_init_array>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	4d0d      	ldr	r5, [pc, #52]	; (8008e5c <__libc_init_array+0x38>)
 8008e28:	4c0d      	ldr	r4, [pc, #52]	; (8008e60 <__libc_init_array+0x3c>)
 8008e2a:	1b64      	subs	r4, r4, r5
 8008e2c:	10a4      	asrs	r4, r4, #2
 8008e2e:	2600      	movs	r6, #0
 8008e30:	42a6      	cmp	r6, r4
 8008e32:	d109      	bne.n	8008e48 <__libc_init_array+0x24>
 8008e34:	4d0b      	ldr	r5, [pc, #44]	; (8008e64 <__libc_init_array+0x40>)
 8008e36:	4c0c      	ldr	r4, [pc, #48]	; (8008e68 <__libc_init_array+0x44>)
 8008e38:	f000 fc4e 	bl	80096d8 <_init>
 8008e3c:	1b64      	subs	r4, r4, r5
 8008e3e:	10a4      	asrs	r4, r4, #2
 8008e40:	2600      	movs	r6, #0
 8008e42:	42a6      	cmp	r6, r4
 8008e44:	d105      	bne.n	8008e52 <__libc_init_array+0x2e>
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
 8008e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4c:	4798      	blx	r3
 8008e4e:	3601      	adds	r6, #1
 8008e50:	e7ee      	b.n	8008e30 <__libc_init_array+0xc>
 8008e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e56:	4798      	blx	r3
 8008e58:	3601      	adds	r6, #1
 8008e5a:	e7f2      	b.n	8008e42 <__libc_init_array+0x1e>
 8008e5c:	08009cd8 	.word	0x08009cd8
 8008e60:	08009cd8 	.word	0x08009cd8
 8008e64:	08009cd8 	.word	0x08009cd8
 8008e68:	08009cdc 	.word	0x08009cdc

08008e6c <memset>:
 8008e6c:	4402      	add	r2, r0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d100      	bne.n	8008e76 <memset+0xa>
 8008e74:	4770      	bx	lr
 8008e76:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7a:	e7f9      	b.n	8008e70 <memset+0x4>

08008e7c <siprintf>:
 8008e7c:	b40e      	push	{r1, r2, r3}
 8008e7e:	b500      	push	{lr}
 8008e80:	b09c      	sub	sp, #112	; 0x70
 8008e82:	ab1d      	add	r3, sp, #116	; 0x74
 8008e84:	9002      	str	r0, [sp, #8]
 8008e86:	9006      	str	r0, [sp, #24]
 8008e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e8c:	4809      	ldr	r0, [pc, #36]	; (8008eb4 <siprintf+0x38>)
 8008e8e:	9107      	str	r1, [sp, #28]
 8008e90:	9104      	str	r1, [sp, #16]
 8008e92:	4909      	ldr	r1, [pc, #36]	; (8008eb8 <siprintf+0x3c>)
 8008e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e98:	9105      	str	r1, [sp, #20]
 8008e9a:	6800      	ldr	r0, [r0, #0]
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	a902      	add	r1, sp, #8
 8008ea0:	f000 f868 	bl	8008f74 <_svfiprintf_r>
 8008ea4:	9b02      	ldr	r3, [sp, #8]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	b01c      	add	sp, #112	; 0x70
 8008eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb0:	b003      	add	sp, #12
 8008eb2:	4770      	bx	lr
 8008eb4:	20000024 	.word	0x20000024
 8008eb8:	ffff0208 	.word	0xffff0208

08008ebc <__ssputs_r>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	688e      	ldr	r6, [r1, #8]
 8008ec2:	429e      	cmp	r6, r3
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	4690      	mov	r8, r2
 8008eca:	461f      	mov	r7, r3
 8008ecc:	d838      	bhi.n	8008f40 <__ssputs_r+0x84>
 8008ece:	898a      	ldrh	r2, [r1, #12]
 8008ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ed4:	d032      	beq.n	8008f3c <__ssputs_r+0x80>
 8008ed6:	6825      	ldr	r5, [r4, #0]
 8008ed8:	6909      	ldr	r1, [r1, #16]
 8008eda:	eba5 0901 	sub.w	r9, r5, r1
 8008ede:	6965      	ldr	r5, [r4, #20]
 8008ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ee8:	3301      	adds	r3, #1
 8008eea:	444b      	add	r3, r9
 8008eec:	106d      	asrs	r5, r5, #1
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	bf38      	it	cc
 8008ef2:	461d      	movcc	r5, r3
 8008ef4:	0553      	lsls	r3, r2, #21
 8008ef6:	d531      	bpl.n	8008f5c <__ssputs_r+0xa0>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f000 fb47 	bl	800958c <_malloc_r>
 8008efe:	4606      	mov	r6, r0
 8008f00:	b950      	cbnz	r0, 8008f18 <__ssputs_r+0x5c>
 8008f02:	230c      	movs	r3, #12
 8008f04:	f8ca 3000 	str.w	r3, [sl]
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f0e:	81a3      	strh	r3, [r4, #12]
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295
 8008f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f18:	6921      	ldr	r1, [r4, #16]
 8008f1a:	464a      	mov	r2, r9
 8008f1c:	f000 fabe 	bl	800949c <memcpy>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	6126      	str	r6, [r4, #16]
 8008f2e:	6165      	str	r5, [r4, #20]
 8008f30:	444e      	add	r6, r9
 8008f32:	eba5 0509 	sub.w	r5, r5, r9
 8008f36:	6026      	str	r6, [r4, #0]
 8008f38:	60a5      	str	r5, [r4, #8]
 8008f3a:	463e      	mov	r6, r7
 8008f3c:	42be      	cmp	r6, r7
 8008f3e:	d900      	bls.n	8008f42 <__ssputs_r+0x86>
 8008f40:	463e      	mov	r6, r7
 8008f42:	4632      	mov	r2, r6
 8008f44:	6820      	ldr	r0, [r4, #0]
 8008f46:	4641      	mov	r1, r8
 8008f48:	f000 fab6 	bl	80094b8 <memmove>
 8008f4c:	68a3      	ldr	r3, [r4, #8]
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	1b9b      	subs	r3, r3, r6
 8008f52:	4432      	add	r2, r6
 8008f54:	60a3      	str	r3, [r4, #8]
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e7db      	b.n	8008f14 <__ssputs_r+0x58>
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	f000 fb6f 	bl	8009640 <_realloc_r>
 8008f62:	4606      	mov	r6, r0
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d1e1      	bne.n	8008f2c <__ssputs_r+0x70>
 8008f68:	6921      	ldr	r1, [r4, #16]
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	f000 fabe 	bl	80094ec <_free_r>
 8008f70:	e7c7      	b.n	8008f02 <__ssputs_r+0x46>
	...

08008f74 <_svfiprintf_r>:
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	4698      	mov	r8, r3
 8008f7a:	898b      	ldrh	r3, [r1, #12]
 8008f7c:	061b      	lsls	r3, r3, #24
 8008f7e:	b09d      	sub	sp, #116	; 0x74
 8008f80:	4607      	mov	r7, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	4614      	mov	r4, r2
 8008f86:	d50e      	bpl.n	8008fa6 <_svfiprintf_r+0x32>
 8008f88:	690b      	ldr	r3, [r1, #16]
 8008f8a:	b963      	cbnz	r3, 8008fa6 <_svfiprintf_r+0x32>
 8008f8c:	2140      	movs	r1, #64	; 0x40
 8008f8e:	f000 fafd 	bl	800958c <_malloc_r>
 8008f92:	6028      	str	r0, [r5, #0]
 8008f94:	6128      	str	r0, [r5, #16]
 8008f96:	b920      	cbnz	r0, 8008fa2 <_svfiprintf_r+0x2e>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	e0d1      	b.n	8009146 <_svfiprintf_r+0x1d2>
 8008fa2:	2340      	movs	r3, #64	; 0x40
 8008fa4:	616b      	str	r3, [r5, #20]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8008faa:	2320      	movs	r3, #32
 8008fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fb4:	2330      	movs	r3, #48	; 0x30
 8008fb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009160 <_svfiprintf_r+0x1ec>
 8008fba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fbe:	f04f 0901 	mov.w	r9, #1
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	469a      	mov	sl, r3
 8008fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fca:	b10a      	cbz	r2, 8008fd0 <_svfiprintf_r+0x5c>
 8008fcc:	2a25      	cmp	r2, #37	; 0x25
 8008fce:	d1f9      	bne.n	8008fc4 <_svfiprintf_r+0x50>
 8008fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008fd4:	d00b      	beq.n	8008fee <_svfiprintf_r+0x7a>
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff ff6d 	bl	8008ebc <__ssputs_r>
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	f000 80aa 	beq.w	800913c <_svfiprintf_r+0x1c8>
 8008fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fea:	445a      	add	r2, fp
 8008fec:	9209      	str	r2, [sp, #36]	; 0x24
 8008fee:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 80a2 	beq.w	800913c <_svfiprintf_r+0x1c8>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009002:	f10a 0a01 	add.w	sl, sl, #1
 8009006:	9304      	str	r3, [sp, #16]
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800900e:	931a      	str	r3, [sp, #104]	; 0x68
 8009010:	4654      	mov	r4, sl
 8009012:	2205      	movs	r2, #5
 8009014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009018:	4851      	ldr	r0, [pc, #324]	; (8009160 <_svfiprintf_r+0x1ec>)
 800901a:	f7f7 f8f9 	bl	8000210 <memchr>
 800901e:	9a04      	ldr	r2, [sp, #16]
 8009020:	b9d8      	cbnz	r0, 800905a <_svfiprintf_r+0xe6>
 8009022:	06d0      	lsls	r0, r2, #27
 8009024:	bf44      	itt	mi
 8009026:	2320      	movmi	r3, #32
 8009028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902c:	0711      	lsls	r1, r2, #28
 800902e:	bf44      	itt	mi
 8009030:	232b      	movmi	r3, #43	; 0x2b
 8009032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009036:	f89a 3000 	ldrb.w	r3, [sl]
 800903a:	2b2a      	cmp	r3, #42	; 0x2a
 800903c:	d015      	beq.n	800906a <_svfiprintf_r+0xf6>
 800903e:	9a07      	ldr	r2, [sp, #28]
 8009040:	4654      	mov	r4, sl
 8009042:	2000      	movs	r0, #0
 8009044:	f04f 0c0a 	mov.w	ip, #10
 8009048:	4621      	mov	r1, r4
 800904a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800904e:	3b30      	subs	r3, #48	; 0x30
 8009050:	2b09      	cmp	r3, #9
 8009052:	d94e      	bls.n	80090f2 <_svfiprintf_r+0x17e>
 8009054:	b1b0      	cbz	r0, 8009084 <_svfiprintf_r+0x110>
 8009056:	9207      	str	r2, [sp, #28]
 8009058:	e014      	b.n	8009084 <_svfiprintf_r+0x110>
 800905a:	eba0 0308 	sub.w	r3, r0, r8
 800905e:	fa09 f303 	lsl.w	r3, r9, r3
 8009062:	4313      	orrs	r3, r2
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	46a2      	mov	sl, r4
 8009068:	e7d2      	b.n	8009010 <_svfiprintf_r+0x9c>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	1d19      	adds	r1, r3, #4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	9103      	str	r1, [sp, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	bfbb      	ittet	lt
 8009076:	425b      	neglt	r3, r3
 8009078:	f042 0202 	orrlt.w	r2, r2, #2
 800907c:	9307      	strge	r3, [sp, #28]
 800907e:	9307      	strlt	r3, [sp, #28]
 8009080:	bfb8      	it	lt
 8009082:	9204      	strlt	r2, [sp, #16]
 8009084:	7823      	ldrb	r3, [r4, #0]
 8009086:	2b2e      	cmp	r3, #46	; 0x2e
 8009088:	d10c      	bne.n	80090a4 <_svfiprintf_r+0x130>
 800908a:	7863      	ldrb	r3, [r4, #1]
 800908c:	2b2a      	cmp	r3, #42	; 0x2a
 800908e:	d135      	bne.n	80090fc <_svfiprintf_r+0x188>
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	1d1a      	adds	r2, r3, #4
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	9203      	str	r2, [sp, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfb8      	it	lt
 800909c:	f04f 33ff 	movlt.w	r3, #4294967295
 80090a0:	3402      	adds	r4, #2
 80090a2:	9305      	str	r3, [sp, #20]
 80090a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009170 <_svfiprintf_r+0x1fc>
 80090a8:	7821      	ldrb	r1, [r4, #0]
 80090aa:	2203      	movs	r2, #3
 80090ac:	4650      	mov	r0, sl
 80090ae:	f7f7 f8af 	bl	8000210 <memchr>
 80090b2:	b140      	cbz	r0, 80090c6 <_svfiprintf_r+0x152>
 80090b4:	2340      	movs	r3, #64	; 0x40
 80090b6:	eba0 000a 	sub.w	r0, r0, sl
 80090ba:	fa03 f000 	lsl.w	r0, r3, r0
 80090be:	9b04      	ldr	r3, [sp, #16]
 80090c0:	4303      	orrs	r3, r0
 80090c2:	3401      	adds	r4, #1
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ca:	4826      	ldr	r0, [pc, #152]	; (8009164 <_svfiprintf_r+0x1f0>)
 80090cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090d0:	2206      	movs	r2, #6
 80090d2:	f7f7 f89d 	bl	8000210 <memchr>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d038      	beq.n	800914c <_svfiprintf_r+0x1d8>
 80090da:	4b23      	ldr	r3, [pc, #140]	; (8009168 <_svfiprintf_r+0x1f4>)
 80090dc:	bb1b      	cbnz	r3, 8009126 <_svfiprintf_r+0x1b2>
 80090de:	9b03      	ldr	r3, [sp, #12]
 80090e0:	3307      	adds	r3, #7
 80090e2:	f023 0307 	bic.w	r3, r3, #7
 80090e6:	3308      	adds	r3, #8
 80090e8:	9303      	str	r3, [sp, #12]
 80090ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ec:	4433      	add	r3, r6
 80090ee:	9309      	str	r3, [sp, #36]	; 0x24
 80090f0:	e767      	b.n	8008fc2 <_svfiprintf_r+0x4e>
 80090f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090f6:	460c      	mov	r4, r1
 80090f8:	2001      	movs	r0, #1
 80090fa:	e7a5      	b.n	8009048 <_svfiprintf_r+0xd4>
 80090fc:	2300      	movs	r3, #0
 80090fe:	3401      	adds	r4, #1
 8009100:	9305      	str	r3, [sp, #20]
 8009102:	4619      	mov	r1, r3
 8009104:	f04f 0c0a 	mov.w	ip, #10
 8009108:	4620      	mov	r0, r4
 800910a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800910e:	3a30      	subs	r2, #48	; 0x30
 8009110:	2a09      	cmp	r2, #9
 8009112:	d903      	bls.n	800911c <_svfiprintf_r+0x1a8>
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0c5      	beq.n	80090a4 <_svfiprintf_r+0x130>
 8009118:	9105      	str	r1, [sp, #20]
 800911a:	e7c3      	b.n	80090a4 <_svfiprintf_r+0x130>
 800911c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009120:	4604      	mov	r4, r0
 8009122:	2301      	movs	r3, #1
 8009124:	e7f0      	b.n	8009108 <_svfiprintf_r+0x194>
 8009126:	ab03      	add	r3, sp, #12
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	462a      	mov	r2, r5
 800912c:	4b0f      	ldr	r3, [pc, #60]	; (800916c <_svfiprintf_r+0x1f8>)
 800912e:	a904      	add	r1, sp, #16
 8009130:	4638      	mov	r0, r7
 8009132:	f3af 8000 	nop.w
 8009136:	1c42      	adds	r2, r0, #1
 8009138:	4606      	mov	r6, r0
 800913a:	d1d6      	bne.n	80090ea <_svfiprintf_r+0x176>
 800913c:	89ab      	ldrh	r3, [r5, #12]
 800913e:	065b      	lsls	r3, r3, #25
 8009140:	f53f af2c 	bmi.w	8008f9c <_svfiprintf_r+0x28>
 8009144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009146:	b01d      	add	sp, #116	; 0x74
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	ab03      	add	r3, sp, #12
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	462a      	mov	r2, r5
 8009152:	4b06      	ldr	r3, [pc, #24]	; (800916c <_svfiprintf_r+0x1f8>)
 8009154:	a904      	add	r1, sp, #16
 8009156:	4638      	mov	r0, r7
 8009158:	f000 f87a 	bl	8009250 <_printf_i>
 800915c:	e7eb      	b.n	8009136 <_svfiprintf_r+0x1c2>
 800915e:	bf00      	nop
 8009160:	08009c9c 	.word	0x08009c9c
 8009164:	08009ca6 	.word	0x08009ca6
 8009168:	00000000 	.word	0x00000000
 800916c:	08008ebd 	.word	0x08008ebd
 8009170:	08009ca2 	.word	0x08009ca2

08009174 <_printf_common>:
 8009174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	4616      	mov	r6, r2
 800917a:	4699      	mov	r9, r3
 800917c:	688a      	ldr	r2, [r1, #8]
 800917e:	690b      	ldr	r3, [r1, #16]
 8009180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009184:	4293      	cmp	r3, r2
 8009186:	bfb8      	it	lt
 8009188:	4613      	movlt	r3, r2
 800918a:	6033      	str	r3, [r6, #0]
 800918c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009190:	4607      	mov	r7, r0
 8009192:	460c      	mov	r4, r1
 8009194:	b10a      	cbz	r2, 800919a <_printf_common+0x26>
 8009196:	3301      	adds	r3, #1
 8009198:	6033      	str	r3, [r6, #0]
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	0699      	lsls	r1, r3, #26
 800919e:	bf42      	ittt	mi
 80091a0:	6833      	ldrmi	r3, [r6, #0]
 80091a2:	3302      	addmi	r3, #2
 80091a4:	6033      	strmi	r3, [r6, #0]
 80091a6:	6825      	ldr	r5, [r4, #0]
 80091a8:	f015 0506 	ands.w	r5, r5, #6
 80091ac:	d106      	bne.n	80091bc <_printf_common+0x48>
 80091ae:	f104 0a19 	add.w	sl, r4, #25
 80091b2:	68e3      	ldr	r3, [r4, #12]
 80091b4:	6832      	ldr	r2, [r6, #0]
 80091b6:	1a9b      	subs	r3, r3, r2
 80091b8:	42ab      	cmp	r3, r5
 80091ba:	dc26      	bgt.n	800920a <_printf_common+0x96>
 80091bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091c0:	1e13      	subs	r3, r2, #0
 80091c2:	6822      	ldr	r2, [r4, #0]
 80091c4:	bf18      	it	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	0692      	lsls	r2, r2, #26
 80091ca:	d42b      	bmi.n	8009224 <_printf_common+0xb0>
 80091cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091d0:	4649      	mov	r1, r9
 80091d2:	4638      	mov	r0, r7
 80091d4:	47c0      	blx	r8
 80091d6:	3001      	adds	r0, #1
 80091d8:	d01e      	beq.n	8009218 <_printf_common+0xa4>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	68e5      	ldr	r5, [r4, #12]
 80091de:	6832      	ldr	r2, [r6, #0]
 80091e0:	f003 0306 	and.w	r3, r3, #6
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	bf08      	it	eq
 80091e8:	1aad      	subeq	r5, r5, r2
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	bf0c      	ite	eq
 80091f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f4:	2500      	movne	r5, #0
 80091f6:	4293      	cmp	r3, r2
 80091f8:	bfc4      	itt	gt
 80091fa:	1a9b      	subgt	r3, r3, r2
 80091fc:	18ed      	addgt	r5, r5, r3
 80091fe:	2600      	movs	r6, #0
 8009200:	341a      	adds	r4, #26
 8009202:	42b5      	cmp	r5, r6
 8009204:	d11a      	bne.n	800923c <_printf_common+0xc8>
 8009206:	2000      	movs	r0, #0
 8009208:	e008      	b.n	800921c <_printf_common+0xa8>
 800920a:	2301      	movs	r3, #1
 800920c:	4652      	mov	r2, sl
 800920e:	4649      	mov	r1, r9
 8009210:	4638      	mov	r0, r7
 8009212:	47c0      	blx	r8
 8009214:	3001      	adds	r0, #1
 8009216:	d103      	bne.n	8009220 <_printf_common+0xac>
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009220:	3501      	adds	r5, #1
 8009222:	e7c6      	b.n	80091b2 <_printf_common+0x3e>
 8009224:	18e1      	adds	r1, r4, r3
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	2030      	movs	r0, #48	; 0x30
 800922a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800922e:	4422      	add	r2, r4
 8009230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009238:	3302      	adds	r3, #2
 800923a:	e7c7      	b.n	80091cc <_printf_common+0x58>
 800923c:	2301      	movs	r3, #1
 800923e:	4622      	mov	r2, r4
 8009240:	4649      	mov	r1, r9
 8009242:	4638      	mov	r0, r7
 8009244:	47c0      	blx	r8
 8009246:	3001      	adds	r0, #1
 8009248:	d0e6      	beq.n	8009218 <_printf_common+0xa4>
 800924a:	3601      	adds	r6, #1
 800924c:	e7d9      	b.n	8009202 <_printf_common+0x8e>
	...

08009250 <_printf_i>:
 8009250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	4691      	mov	r9, r2
 8009258:	7e27      	ldrb	r7, [r4, #24]
 800925a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800925c:	2f78      	cmp	r7, #120	; 0x78
 800925e:	4680      	mov	r8, r0
 8009260:	469a      	mov	sl, r3
 8009262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009266:	d807      	bhi.n	8009278 <_printf_i+0x28>
 8009268:	2f62      	cmp	r7, #98	; 0x62
 800926a:	d80a      	bhi.n	8009282 <_printf_i+0x32>
 800926c:	2f00      	cmp	r7, #0
 800926e:	f000 80d8 	beq.w	8009422 <_printf_i+0x1d2>
 8009272:	2f58      	cmp	r7, #88	; 0x58
 8009274:	f000 80a3 	beq.w	80093be <_printf_i+0x16e>
 8009278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800927c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009280:	e03a      	b.n	80092f8 <_printf_i+0xa8>
 8009282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009286:	2b15      	cmp	r3, #21
 8009288:	d8f6      	bhi.n	8009278 <_printf_i+0x28>
 800928a:	a001      	add	r0, pc, #4	; (adr r0, 8009290 <_printf_i+0x40>)
 800928c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009290:	080092e9 	.word	0x080092e9
 8009294:	080092fd 	.word	0x080092fd
 8009298:	08009279 	.word	0x08009279
 800929c:	08009279 	.word	0x08009279
 80092a0:	08009279 	.word	0x08009279
 80092a4:	08009279 	.word	0x08009279
 80092a8:	080092fd 	.word	0x080092fd
 80092ac:	08009279 	.word	0x08009279
 80092b0:	08009279 	.word	0x08009279
 80092b4:	08009279 	.word	0x08009279
 80092b8:	08009279 	.word	0x08009279
 80092bc:	08009409 	.word	0x08009409
 80092c0:	0800932d 	.word	0x0800932d
 80092c4:	080093eb 	.word	0x080093eb
 80092c8:	08009279 	.word	0x08009279
 80092cc:	08009279 	.word	0x08009279
 80092d0:	0800942b 	.word	0x0800942b
 80092d4:	08009279 	.word	0x08009279
 80092d8:	0800932d 	.word	0x0800932d
 80092dc:	08009279 	.word	0x08009279
 80092e0:	08009279 	.word	0x08009279
 80092e4:	080093f3 	.word	0x080093f3
 80092e8:	680b      	ldr	r3, [r1, #0]
 80092ea:	1d1a      	adds	r2, r3, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	600a      	str	r2, [r1, #0]
 80092f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092f8:	2301      	movs	r3, #1
 80092fa:	e0a3      	b.n	8009444 <_printf_i+0x1f4>
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	6808      	ldr	r0, [r1, #0]
 8009300:	062e      	lsls	r6, r5, #24
 8009302:	f100 0304 	add.w	r3, r0, #4
 8009306:	d50a      	bpl.n	800931e <_printf_i+0xce>
 8009308:	6805      	ldr	r5, [r0, #0]
 800930a:	600b      	str	r3, [r1, #0]
 800930c:	2d00      	cmp	r5, #0
 800930e:	da03      	bge.n	8009318 <_printf_i+0xc8>
 8009310:	232d      	movs	r3, #45	; 0x2d
 8009312:	426d      	negs	r5, r5
 8009314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009318:	485e      	ldr	r0, [pc, #376]	; (8009494 <_printf_i+0x244>)
 800931a:	230a      	movs	r3, #10
 800931c:	e019      	b.n	8009352 <_printf_i+0x102>
 800931e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009322:	6805      	ldr	r5, [r0, #0]
 8009324:	600b      	str	r3, [r1, #0]
 8009326:	bf18      	it	ne
 8009328:	b22d      	sxthne	r5, r5
 800932a:	e7ef      	b.n	800930c <_printf_i+0xbc>
 800932c:	680b      	ldr	r3, [r1, #0]
 800932e:	6825      	ldr	r5, [r4, #0]
 8009330:	1d18      	adds	r0, r3, #4
 8009332:	6008      	str	r0, [r1, #0]
 8009334:	0628      	lsls	r0, r5, #24
 8009336:	d501      	bpl.n	800933c <_printf_i+0xec>
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	e002      	b.n	8009342 <_printf_i+0xf2>
 800933c:	0669      	lsls	r1, r5, #25
 800933e:	d5fb      	bpl.n	8009338 <_printf_i+0xe8>
 8009340:	881d      	ldrh	r5, [r3, #0]
 8009342:	4854      	ldr	r0, [pc, #336]	; (8009494 <_printf_i+0x244>)
 8009344:	2f6f      	cmp	r7, #111	; 0x6f
 8009346:	bf0c      	ite	eq
 8009348:	2308      	moveq	r3, #8
 800934a:	230a      	movne	r3, #10
 800934c:	2100      	movs	r1, #0
 800934e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009352:	6866      	ldr	r6, [r4, #4]
 8009354:	60a6      	str	r6, [r4, #8]
 8009356:	2e00      	cmp	r6, #0
 8009358:	bfa2      	ittt	ge
 800935a:	6821      	ldrge	r1, [r4, #0]
 800935c:	f021 0104 	bicge.w	r1, r1, #4
 8009360:	6021      	strge	r1, [r4, #0]
 8009362:	b90d      	cbnz	r5, 8009368 <_printf_i+0x118>
 8009364:	2e00      	cmp	r6, #0
 8009366:	d04d      	beq.n	8009404 <_printf_i+0x1b4>
 8009368:	4616      	mov	r6, r2
 800936a:	fbb5 f1f3 	udiv	r1, r5, r3
 800936e:	fb03 5711 	mls	r7, r3, r1, r5
 8009372:	5dc7      	ldrb	r7, [r0, r7]
 8009374:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009378:	462f      	mov	r7, r5
 800937a:	42bb      	cmp	r3, r7
 800937c:	460d      	mov	r5, r1
 800937e:	d9f4      	bls.n	800936a <_printf_i+0x11a>
 8009380:	2b08      	cmp	r3, #8
 8009382:	d10b      	bne.n	800939c <_printf_i+0x14c>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	07df      	lsls	r7, r3, #31
 8009388:	d508      	bpl.n	800939c <_printf_i+0x14c>
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	6861      	ldr	r1, [r4, #4]
 800938e:	4299      	cmp	r1, r3
 8009390:	bfde      	ittt	le
 8009392:	2330      	movle	r3, #48	; 0x30
 8009394:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009398:	f106 36ff 	addle.w	r6, r6, #4294967295
 800939c:	1b92      	subs	r2, r2, r6
 800939e:	6122      	str	r2, [r4, #16]
 80093a0:	f8cd a000 	str.w	sl, [sp]
 80093a4:	464b      	mov	r3, r9
 80093a6:	aa03      	add	r2, sp, #12
 80093a8:	4621      	mov	r1, r4
 80093aa:	4640      	mov	r0, r8
 80093ac:	f7ff fee2 	bl	8009174 <_printf_common>
 80093b0:	3001      	adds	r0, #1
 80093b2:	d14c      	bne.n	800944e <_printf_i+0x1fe>
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	b004      	add	sp, #16
 80093ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093be:	4835      	ldr	r0, [pc, #212]	; (8009494 <_printf_i+0x244>)
 80093c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	680e      	ldr	r6, [r1, #0]
 80093c8:	061f      	lsls	r7, r3, #24
 80093ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80093ce:	600e      	str	r6, [r1, #0]
 80093d0:	d514      	bpl.n	80093fc <_printf_i+0x1ac>
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	bf44      	itt	mi
 80093d6:	f043 0320 	orrmi.w	r3, r3, #32
 80093da:	6023      	strmi	r3, [r4, #0]
 80093dc:	b91d      	cbnz	r5, 80093e6 <_printf_i+0x196>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f023 0320 	bic.w	r3, r3, #32
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	2310      	movs	r3, #16
 80093e8:	e7b0      	b.n	800934c <_printf_i+0xfc>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	f043 0320 	orr.w	r3, r3, #32
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	2378      	movs	r3, #120	; 0x78
 80093f4:	4828      	ldr	r0, [pc, #160]	; (8009498 <_printf_i+0x248>)
 80093f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093fa:	e7e3      	b.n	80093c4 <_printf_i+0x174>
 80093fc:	065e      	lsls	r6, r3, #25
 80093fe:	bf48      	it	mi
 8009400:	b2ad      	uxthmi	r5, r5
 8009402:	e7e6      	b.n	80093d2 <_printf_i+0x182>
 8009404:	4616      	mov	r6, r2
 8009406:	e7bb      	b.n	8009380 <_printf_i+0x130>
 8009408:	680b      	ldr	r3, [r1, #0]
 800940a:	6826      	ldr	r6, [r4, #0]
 800940c:	6960      	ldr	r0, [r4, #20]
 800940e:	1d1d      	adds	r5, r3, #4
 8009410:	600d      	str	r5, [r1, #0]
 8009412:	0635      	lsls	r5, r6, #24
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	d501      	bpl.n	800941c <_printf_i+0x1cc>
 8009418:	6018      	str	r0, [r3, #0]
 800941a:	e002      	b.n	8009422 <_printf_i+0x1d2>
 800941c:	0671      	lsls	r1, r6, #25
 800941e:	d5fb      	bpl.n	8009418 <_printf_i+0x1c8>
 8009420:	8018      	strh	r0, [r3, #0]
 8009422:	2300      	movs	r3, #0
 8009424:	6123      	str	r3, [r4, #16]
 8009426:	4616      	mov	r6, r2
 8009428:	e7ba      	b.n	80093a0 <_printf_i+0x150>
 800942a:	680b      	ldr	r3, [r1, #0]
 800942c:	1d1a      	adds	r2, r3, #4
 800942e:	600a      	str	r2, [r1, #0]
 8009430:	681e      	ldr	r6, [r3, #0]
 8009432:	6862      	ldr	r2, [r4, #4]
 8009434:	2100      	movs	r1, #0
 8009436:	4630      	mov	r0, r6
 8009438:	f7f6 feea 	bl	8000210 <memchr>
 800943c:	b108      	cbz	r0, 8009442 <_printf_i+0x1f2>
 800943e:	1b80      	subs	r0, r0, r6
 8009440:	6060      	str	r0, [r4, #4]
 8009442:	6863      	ldr	r3, [r4, #4]
 8009444:	6123      	str	r3, [r4, #16]
 8009446:	2300      	movs	r3, #0
 8009448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944c:	e7a8      	b.n	80093a0 <_printf_i+0x150>
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	4632      	mov	r2, r6
 8009452:	4649      	mov	r1, r9
 8009454:	4640      	mov	r0, r8
 8009456:	47d0      	blx	sl
 8009458:	3001      	adds	r0, #1
 800945a:	d0ab      	beq.n	80093b4 <_printf_i+0x164>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	079b      	lsls	r3, r3, #30
 8009460:	d413      	bmi.n	800948a <_printf_i+0x23a>
 8009462:	68e0      	ldr	r0, [r4, #12]
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	4298      	cmp	r0, r3
 8009468:	bfb8      	it	lt
 800946a:	4618      	movlt	r0, r3
 800946c:	e7a4      	b.n	80093b8 <_printf_i+0x168>
 800946e:	2301      	movs	r3, #1
 8009470:	4632      	mov	r2, r6
 8009472:	4649      	mov	r1, r9
 8009474:	4640      	mov	r0, r8
 8009476:	47d0      	blx	sl
 8009478:	3001      	adds	r0, #1
 800947a:	d09b      	beq.n	80093b4 <_printf_i+0x164>
 800947c:	3501      	adds	r5, #1
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	9903      	ldr	r1, [sp, #12]
 8009482:	1a5b      	subs	r3, r3, r1
 8009484:	42ab      	cmp	r3, r5
 8009486:	dcf2      	bgt.n	800946e <_printf_i+0x21e>
 8009488:	e7eb      	b.n	8009462 <_printf_i+0x212>
 800948a:	2500      	movs	r5, #0
 800948c:	f104 0619 	add.w	r6, r4, #25
 8009490:	e7f5      	b.n	800947e <_printf_i+0x22e>
 8009492:	bf00      	nop
 8009494:	08009cad 	.word	0x08009cad
 8009498:	08009cbe 	.word	0x08009cbe

0800949c <memcpy>:
 800949c:	440a      	add	r2, r1
 800949e:	4291      	cmp	r1, r2
 80094a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80094a4:	d100      	bne.n	80094a8 <memcpy+0xc>
 80094a6:	4770      	bx	lr
 80094a8:	b510      	push	{r4, lr}
 80094aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094b2:	4291      	cmp	r1, r2
 80094b4:	d1f9      	bne.n	80094aa <memcpy+0xe>
 80094b6:	bd10      	pop	{r4, pc}

080094b8 <memmove>:
 80094b8:	4288      	cmp	r0, r1
 80094ba:	b510      	push	{r4, lr}
 80094bc:	eb01 0402 	add.w	r4, r1, r2
 80094c0:	d902      	bls.n	80094c8 <memmove+0x10>
 80094c2:	4284      	cmp	r4, r0
 80094c4:	4623      	mov	r3, r4
 80094c6:	d807      	bhi.n	80094d8 <memmove+0x20>
 80094c8:	1e43      	subs	r3, r0, #1
 80094ca:	42a1      	cmp	r1, r4
 80094cc:	d008      	beq.n	80094e0 <memmove+0x28>
 80094ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094d6:	e7f8      	b.n	80094ca <memmove+0x12>
 80094d8:	4402      	add	r2, r0
 80094da:	4601      	mov	r1, r0
 80094dc:	428a      	cmp	r2, r1
 80094de:	d100      	bne.n	80094e2 <memmove+0x2a>
 80094e0:	bd10      	pop	{r4, pc}
 80094e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ea:	e7f7      	b.n	80094dc <memmove+0x24>

080094ec <_free_r>:
 80094ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d048      	beq.n	8009584 <_free_r+0x98>
 80094f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f6:	9001      	str	r0, [sp, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f1a1 0404 	sub.w	r4, r1, #4
 80094fe:	bfb8      	it	lt
 8009500:	18e4      	addlt	r4, r4, r3
 8009502:	f000 f8d3 	bl	80096ac <__malloc_lock>
 8009506:	4a20      	ldr	r2, [pc, #128]	; (8009588 <_free_r+0x9c>)
 8009508:	9801      	ldr	r0, [sp, #4]
 800950a:	6813      	ldr	r3, [r2, #0]
 800950c:	4615      	mov	r5, r2
 800950e:	b933      	cbnz	r3, 800951e <_free_r+0x32>
 8009510:	6063      	str	r3, [r4, #4]
 8009512:	6014      	str	r4, [r2, #0]
 8009514:	b003      	add	sp, #12
 8009516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800951a:	f000 b8cd 	b.w	80096b8 <__malloc_unlock>
 800951e:	42a3      	cmp	r3, r4
 8009520:	d90b      	bls.n	800953a <_free_r+0x4e>
 8009522:	6821      	ldr	r1, [r4, #0]
 8009524:	1862      	adds	r2, r4, r1
 8009526:	4293      	cmp	r3, r2
 8009528:	bf04      	itt	eq
 800952a:	681a      	ldreq	r2, [r3, #0]
 800952c:	685b      	ldreq	r3, [r3, #4]
 800952e:	6063      	str	r3, [r4, #4]
 8009530:	bf04      	itt	eq
 8009532:	1852      	addeq	r2, r2, r1
 8009534:	6022      	streq	r2, [r4, #0]
 8009536:	602c      	str	r4, [r5, #0]
 8009538:	e7ec      	b.n	8009514 <_free_r+0x28>
 800953a:	461a      	mov	r2, r3
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	b10b      	cbz	r3, 8009544 <_free_r+0x58>
 8009540:	42a3      	cmp	r3, r4
 8009542:	d9fa      	bls.n	800953a <_free_r+0x4e>
 8009544:	6811      	ldr	r1, [r2, #0]
 8009546:	1855      	adds	r5, r2, r1
 8009548:	42a5      	cmp	r5, r4
 800954a:	d10b      	bne.n	8009564 <_free_r+0x78>
 800954c:	6824      	ldr	r4, [r4, #0]
 800954e:	4421      	add	r1, r4
 8009550:	1854      	adds	r4, r2, r1
 8009552:	42a3      	cmp	r3, r4
 8009554:	6011      	str	r1, [r2, #0]
 8009556:	d1dd      	bne.n	8009514 <_free_r+0x28>
 8009558:	681c      	ldr	r4, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	6053      	str	r3, [r2, #4]
 800955e:	4421      	add	r1, r4
 8009560:	6011      	str	r1, [r2, #0]
 8009562:	e7d7      	b.n	8009514 <_free_r+0x28>
 8009564:	d902      	bls.n	800956c <_free_r+0x80>
 8009566:	230c      	movs	r3, #12
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	e7d3      	b.n	8009514 <_free_r+0x28>
 800956c:	6825      	ldr	r5, [r4, #0]
 800956e:	1961      	adds	r1, r4, r5
 8009570:	428b      	cmp	r3, r1
 8009572:	bf04      	itt	eq
 8009574:	6819      	ldreq	r1, [r3, #0]
 8009576:	685b      	ldreq	r3, [r3, #4]
 8009578:	6063      	str	r3, [r4, #4]
 800957a:	bf04      	itt	eq
 800957c:	1949      	addeq	r1, r1, r5
 800957e:	6021      	streq	r1, [r4, #0]
 8009580:	6054      	str	r4, [r2, #4]
 8009582:	e7c7      	b.n	8009514 <_free_r+0x28>
 8009584:	b003      	add	sp, #12
 8009586:	bd30      	pop	{r4, r5, pc}
 8009588:	200002e0 	.word	0x200002e0

0800958c <_malloc_r>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	1ccd      	adds	r5, r1, #3
 8009590:	f025 0503 	bic.w	r5, r5, #3
 8009594:	3508      	adds	r5, #8
 8009596:	2d0c      	cmp	r5, #12
 8009598:	bf38      	it	cc
 800959a:	250c      	movcc	r5, #12
 800959c:	2d00      	cmp	r5, #0
 800959e:	4606      	mov	r6, r0
 80095a0:	db01      	blt.n	80095a6 <_malloc_r+0x1a>
 80095a2:	42a9      	cmp	r1, r5
 80095a4:	d903      	bls.n	80095ae <_malloc_r+0x22>
 80095a6:	230c      	movs	r3, #12
 80095a8:	6033      	str	r3, [r6, #0]
 80095aa:	2000      	movs	r0, #0
 80095ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ae:	f000 f87d 	bl	80096ac <__malloc_lock>
 80095b2:	4921      	ldr	r1, [pc, #132]	; (8009638 <_malloc_r+0xac>)
 80095b4:	680a      	ldr	r2, [r1, #0]
 80095b6:	4614      	mov	r4, r2
 80095b8:	b99c      	cbnz	r4, 80095e2 <_malloc_r+0x56>
 80095ba:	4f20      	ldr	r7, [pc, #128]	; (800963c <_malloc_r+0xb0>)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	b923      	cbnz	r3, 80095ca <_malloc_r+0x3e>
 80095c0:	4621      	mov	r1, r4
 80095c2:	4630      	mov	r0, r6
 80095c4:	f000 f862 	bl	800968c <_sbrk_r>
 80095c8:	6038      	str	r0, [r7, #0]
 80095ca:	4629      	mov	r1, r5
 80095cc:	4630      	mov	r0, r6
 80095ce:	f000 f85d 	bl	800968c <_sbrk_r>
 80095d2:	1c43      	adds	r3, r0, #1
 80095d4:	d123      	bne.n	800961e <_malloc_r+0x92>
 80095d6:	230c      	movs	r3, #12
 80095d8:	6033      	str	r3, [r6, #0]
 80095da:	4630      	mov	r0, r6
 80095dc:	f000 f86c 	bl	80096b8 <__malloc_unlock>
 80095e0:	e7e3      	b.n	80095aa <_malloc_r+0x1e>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	1b5b      	subs	r3, r3, r5
 80095e6:	d417      	bmi.n	8009618 <_malloc_r+0x8c>
 80095e8:	2b0b      	cmp	r3, #11
 80095ea:	d903      	bls.n	80095f4 <_malloc_r+0x68>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	441c      	add	r4, r3
 80095f0:	6025      	str	r5, [r4, #0]
 80095f2:	e004      	b.n	80095fe <_malloc_r+0x72>
 80095f4:	6863      	ldr	r3, [r4, #4]
 80095f6:	42a2      	cmp	r2, r4
 80095f8:	bf0c      	ite	eq
 80095fa:	600b      	streq	r3, [r1, #0]
 80095fc:	6053      	strne	r3, [r2, #4]
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 f85a 	bl	80096b8 <__malloc_unlock>
 8009604:	f104 000b 	add.w	r0, r4, #11
 8009608:	1d23      	adds	r3, r4, #4
 800960a:	f020 0007 	bic.w	r0, r0, #7
 800960e:	1ac2      	subs	r2, r0, r3
 8009610:	d0cc      	beq.n	80095ac <_malloc_r+0x20>
 8009612:	1a1b      	subs	r3, r3, r0
 8009614:	50a3      	str	r3, [r4, r2]
 8009616:	e7c9      	b.n	80095ac <_malloc_r+0x20>
 8009618:	4622      	mov	r2, r4
 800961a:	6864      	ldr	r4, [r4, #4]
 800961c:	e7cc      	b.n	80095b8 <_malloc_r+0x2c>
 800961e:	1cc4      	adds	r4, r0, #3
 8009620:	f024 0403 	bic.w	r4, r4, #3
 8009624:	42a0      	cmp	r0, r4
 8009626:	d0e3      	beq.n	80095f0 <_malloc_r+0x64>
 8009628:	1a21      	subs	r1, r4, r0
 800962a:	4630      	mov	r0, r6
 800962c:	f000 f82e 	bl	800968c <_sbrk_r>
 8009630:	3001      	adds	r0, #1
 8009632:	d1dd      	bne.n	80095f0 <_malloc_r+0x64>
 8009634:	e7cf      	b.n	80095d6 <_malloc_r+0x4a>
 8009636:	bf00      	nop
 8009638:	200002e0 	.word	0x200002e0
 800963c:	200002e4 	.word	0x200002e4

08009640 <_realloc_r>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	4607      	mov	r7, r0
 8009644:	4614      	mov	r4, r2
 8009646:	460e      	mov	r6, r1
 8009648:	b921      	cbnz	r1, 8009654 <_realloc_r+0x14>
 800964a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800964e:	4611      	mov	r1, r2
 8009650:	f7ff bf9c 	b.w	800958c <_malloc_r>
 8009654:	b922      	cbnz	r2, 8009660 <_realloc_r+0x20>
 8009656:	f7ff ff49 	bl	80094ec <_free_r>
 800965a:	4625      	mov	r5, r4
 800965c:	4628      	mov	r0, r5
 800965e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009660:	f000 f830 	bl	80096c4 <_malloc_usable_size_r>
 8009664:	42a0      	cmp	r0, r4
 8009666:	d20f      	bcs.n	8009688 <_realloc_r+0x48>
 8009668:	4621      	mov	r1, r4
 800966a:	4638      	mov	r0, r7
 800966c:	f7ff ff8e 	bl	800958c <_malloc_r>
 8009670:	4605      	mov	r5, r0
 8009672:	2800      	cmp	r0, #0
 8009674:	d0f2      	beq.n	800965c <_realloc_r+0x1c>
 8009676:	4631      	mov	r1, r6
 8009678:	4622      	mov	r2, r4
 800967a:	f7ff ff0f 	bl	800949c <memcpy>
 800967e:	4631      	mov	r1, r6
 8009680:	4638      	mov	r0, r7
 8009682:	f7ff ff33 	bl	80094ec <_free_r>
 8009686:	e7e9      	b.n	800965c <_realloc_r+0x1c>
 8009688:	4635      	mov	r5, r6
 800968a:	e7e7      	b.n	800965c <_realloc_r+0x1c>

0800968c <_sbrk_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4d06      	ldr	r5, [pc, #24]	; (80096a8 <_sbrk_r+0x1c>)
 8009690:	2300      	movs	r3, #0
 8009692:	4604      	mov	r4, r0
 8009694:	4608      	mov	r0, r1
 8009696:	602b      	str	r3, [r5, #0]
 8009698:	f7f8 f966 	bl	8001968 <_sbrk>
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d102      	bne.n	80096a6 <_sbrk_r+0x1a>
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	b103      	cbz	r3, 80096a6 <_sbrk_r+0x1a>
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	20002764 	.word	0x20002764

080096ac <__malloc_lock>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__malloc_lock+0x8>)
 80096ae:	f000 b811 	b.w	80096d4 <__retarget_lock_acquire_recursive>
 80096b2:	bf00      	nop
 80096b4:	2000276c 	.word	0x2000276c

080096b8 <__malloc_unlock>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__malloc_unlock+0x8>)
 80096ba:	f000 b80c 	b.w	80096d6 <__retarget_lock_release_recursive>
 80096be:	bf00      	nop
 80096c0:	2000276c 	.word	0x2000276c

080096c4 <_malloc_usable_size_r>:
 80096c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c8:	1f18      	subs	r0, r3, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bfbc      	itt	lt
 80096ce:	580b      	ldrlt	r3, [r1, r0]
 80096d0:	18c0      	addlt	r0, r0, r3
 80096d2:	4770      	bx	lr

080096d4 <__retarget_lock_acquire_recursive>:
 80096d4:	4770      	bx	lr

080096d6 <__retarget_lock_release_recursive>:
 80096d6:	4770      	bx	lr

080096d8 <_init>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr

080096e4 <_fini>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr
