
AMS_SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa88  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad1c  0800ad1c  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad24  0800ad24  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad24  0800ad24  0001ad24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad28  0800ad28  0001ad28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800ad2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d88  20000188  0800aeb4  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002f10  0800aeb4  00022f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c47  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004be6  00000000  00000000  00048dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0004d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0004ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f5b3  00000000  00000000  000502b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e009  00000000  00000000  0007f86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106b69  00000000  00000000  0009d874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a43dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005660  00000000  00000000  001a4430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000188 	.word	0x20000188
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800ac2c 	.word	0x0800ac2c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000018c 	.word	0x2000018c
 80001f8:	0800ac2c 	.word	0x0800ac2c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t block[BLOCK_SIZE];
uint8_t response = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fe2e 	bl	8001162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f87d 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f9a5 	bl	8000858 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800050e:	f000 f8cd 	bl	80006ac <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000512:	f000 f917 	bl	8000744 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000516:	f000 f961 	bl	80007dc <MX_SPI1_Init>
  MX_FATFS_Init();
 800051a:	f006 fd11 	bl	8006f40 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800051e:	f009 fd29 	bl	8009f74 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



  response = SD_init(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fb14 	bl	8000b50 <SD_init>
 8000528:	4603      	mov	r3, r0
 800052a:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
  response = SD_read(1, block, 500, 1);
 800052e:	4639      	mov	r1, r7
 8000530:	2301      	movs	r3, #1
 8000532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000536:	2001      	movs	r0, #1
 8000538:	f000 fb8f 	bl	8000c5a <SD_read>
 800053c:	4603      	mov	r3, r0
 800053e:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
  for (int i = 0; i < BLOCK_SIZE; i++){
 8000542:	2300      	movs	r3, #0
 8000544:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000548:	e00d      	b.n	8000566 <main+0x72>
  		  block[i] = i;
 800054a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800054e:	b2d9      	uxtb	r1, r3
 8000550:	463a      	mov	r2, r7
 8000552:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < BLOCK_SIZE; i++){
 800055c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000560:	3301      	adds	r3, #1
 8000562:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000566:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800056a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800056e:	dbec      	blt.n	800054a <main+0x56>
  }
  response = SD_write(1, block, 2000, 1);
 8000570:	4639      	mov	r1, r7
 8000572:	2301      	movs	r3, #1
 8000574:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fbb5 	bl	8000ce8 <SD_write>
 800057e:	4603      	mov	r3, r0
 8000580:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
  memset(block,0,BLOCK_SIZE);
 8000584:	463b      	mov	r3, r7
 8000586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f00a fb45 	bl	800ac1c <memset>
  response = SD_read(1, block, 2000, 1);
 8000592:	4639      	mov	r1, r7
 8000594:	2301      	movs	r3, #1
 8000596:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fb5d 	bl	8000c5a <SD_read>
 80005a0:	4603      	mov	r3, r0
 80005a2:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
	  /*for (int i = 0; i < BLOCK_SIZE; i++){
		  char string[64];
		  itoa(block[i],string,10);
		  HAL_UART_Transmit(&hlpuart1, string, 64, 100);
	  }*/
	  memset(block,1,BLOCK_SIZE);
 80005a6:	463b      	mov	r3, r7
 80005a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f00a fb34 	bl	800ac1c <memset>
	  response = SD_read(1, block, 2000, 1);
 80005b4:	4639      	mov	r1, r7
 80005b6:	2301      	movs	r3, #1
 80005b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fb4c 	bl	8000c5a <SD_read>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
	  memset(block,0,BLOCK_SIZE);
 80005c8:	463b      	mov	r3, r7
 80005ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f00a fb23 	bl	800ac1c <memset>
	  response = SD_getCSD(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 fbee 	bl	8000db8 <SD_getCSD>
 80005dc:	4603      	mov	r3, r0
 80005de:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
	  memcpy(block,&csd,16);
 80005e2:	463b      	mov	r3, r7
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <main+0x10c>)
 80005e6:	461c      	mov	r4, r3
 80005e8:	4613      	mov	r3, r2
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	6859      	ldr	r1, [r3, #4]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	  HAL_Delay(1000);
 80005f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f8:	f000 fe28 	bl	800124c <HAL_Delay>
	  memset(block,1,BLOCK_SIZE);
 80005fc:	e7d3      	b.n	80005a6 <main+0xb2>
 80005fe:	bf00      	nop
 8000600:	200005b4 	.word	0x200005b4

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00a fb02 	bl	800ac1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000626:	2000      	movs	r0, #0
 8000628:	f002 f9ec 	bl	8002a04 <HAL_PWREx_ControlVoltageScaling>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000632:	f000 f9b5 	bl	80009a0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000636:	2322      	movs	r3, #34	; 0x22
 8000638:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2340      	movs	r3, #64	; 0x40
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000654:	231e      	movs	r3, #30
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fa8f 	bl	8002b8c <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000674:	f000 f994 	bl	80009a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	2105      	movs	r1, #5
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fea0 	bl	80033d8 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800069e:	f000 f97f 	bl	80009a0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3758      	adds	r7, #88	; 0x58
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <MX_LPUART1_UART_Init+0x94>)
 80006b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006f6:	f004 fbcf 	bl	8004e98 <HAL_UART_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f94e 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 8000708:	f005 f8cc 	bl	80058a4 <HAL_UARTEx_SetTxFifoThreshold>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000712:	f000 f945 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 800071a:	f005 f901 	bl	8005920 <HAL_UARTEx_SetRxFifoThreshold>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 f93c 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 800072a:	f005 f882 	bl	8005832 <HAL_UARTEx_DisableFifoMode>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000734:	f000 f934 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200004bc 	.word	0x200004bc
 8000740:	40008000 	.word	0x40008000

08000744 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 800074a:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 800074c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 800078e:	f004 fb83 	bl	8004e98 <HAL_UART_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000798:	f000 f902 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 80007a0:	f005 f880 	bl	80058a4 <HAL_UARTEx_SetTxFifoThreshold>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007aa:	f000 f8f9 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 80007b2:	f005 f8b5 	bl	8005920 <HAL_UARTEx_SetRxFifoThreshold>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007bc:	f000 f8f0 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_USART3_UART_Init+0x90>)
 80007c2:	f005 f836 	bl	8005832 <HAL_UARTEx_DisableFifoMode>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007cc:	f000 f8e8 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000042c 	.word	0x2000042c
 80007d8:	40004800 	.word	0x40004800

080007dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_SPI1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_SPI1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_SPI1_Init+0x74>)
 80007e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_SPI1_Init+0x74>)
 80007f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_SPI1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_SPI1_Init+0x74>)
 800080a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800080e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_SPI1_Init+0x74>)
 8000812:	2220      	movs	r2, #32
 8000814:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_SPI1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_SPI1_Init+0x74>)
 800082a:	2207      	movs	r2, #7
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_SPI1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_SPI1_Init+0x74>)
 8000836:	2208      	movs	r2, #8
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_SPI1_Init+0x74>)
 800083c:	f003 fd96 	bl	800436c <HAL_SPI_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 f8ab 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000550 	.word	0x20000550
 8000854:	40013000 	.word	0x40013000

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b48      	ldr	r3, [pc, #288]	; (8000990 <MX_GPIO_Init+0x138>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a47      	ldr	r2, [pc, #284]	; (8000990 <MX_GPIO_Init+0x138>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b45      	ldr	r3, [pc, #276]	; (8000990 <MX_GPIO_Init+0x138>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	4b42      	ldr	r3, [pc, #264]	; (8000990 <MX_GPIO_Init+0x138>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a41      	ldr	r2, [pc, #260]	; (8000990 <MX_GPIO_Init+0x138>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <MX_GPIO_Init+0x138>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <MX_GPIO_Init+0x138>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a3b      	ldr	r2, [pc, #236]	; (8000990 <MX_GPIO_Init+0x138>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <MX_GPIO_Init+0x138>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b36      	ldr	r3, [pc, #216]	; (8000990 <MX_GPIO_Init+0x138>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a35      	ldr	r2, [pc, #212]	; (8000990 <MX_GPIO_Init+0x138>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <MX_GPIO_Init+0x138>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <MX_GPIO_Init+0x138>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a2f      	ldr	r2, [pc, #188]	; (8000990 <MX_GPIO_Init+0x138>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_GPIO_Init+0x138>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_GPIO_Init+0x138>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a29      	ldr	r2, [pc, #164]	; (8000990 <MX_GPIO_Init+0x138>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_GPIO_Init+0x138>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80008fe:	f002 f935 	bl	8002b6c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000908:	4822      	ldr	r0, [pc, #136]	; (8000994 <MX_GPIO_Init+0x13c>)
 800090a:	f000 ff67 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2120      	movs	r1, #32
 8000912:	4821      	ldr	r0, [pc, #132]	; (8000998 <MX_GPIO_Init+0x140>)
 8000914:	f000 ff62 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	481b      	ldr	r0, [pc, #108]	; (800099c <MX_GPIO_Init+0x144>)
 8000930:	f000 fdc2 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000934:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <MX_GPIO_Init+0x13c>)
 800094e:	f000 fdb3 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000952:	2320      	movs	r3, #32
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <MX_GPIO_Init+0x140>)
 800096a:	f000 fda5 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_GPIO_Init+0x140>)
 8000982:	f000 fd99 	bl	80014b8 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	48000400 	.word	0x48000400
 8000998:	48001800 	.word	0x48001800
 800099c:	48000800 	.word	0x48000800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <Error_Handler+0x1c>)
 80009ac:	f000 ff2e 	bl	800180c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80009b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b4:	f000 fc4a 	bl	800124c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009b8:	e7f6      	b.n	80009a8 <Error_Handler+0x8>
 80009ba:	bf00      	nop
 80009bc:	48000400 	.word	0x48000400

080009c0 <select>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin 4

extern SPI_HandleTypeDef hspi1;

static void select(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 ff06 	bl	80017dc <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <deselect>:

static void deselect(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2104      	movs	r1, #4
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 fefc 	bl	80017dc <HAL_GPIO_WritePin>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <spi_txByte>:

static HAL_StatusTypeDef spi_txByte(uint8_t data){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]

	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80009f2:	bf00      	nop
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <spi_txByte+0x30>)
 80009f6:	f004 f8dd 	bl	8004bb4 <HAL_SPI_GetState>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d1f9      	bne.n	80009f4 <spi_txByte+0xc>
	return HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000a00:	1df9      	adds	r1, r7, #7
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	2201      	movs	r2, #1
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <spi_txByte+0x30>)
 8000a0a:	f003 fd52 	bl	80044b2 <HAL_SPI_Transmit>
 8000a0e:	4603      	mov	r3, r0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000550 	.word	0x20000550

08000a1c <spi_rxByte>:

static uint8_t spi_rxByte(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 8000a26:	23ff      	movs	r3, #255	; 0xff
 8000a28:	71bb      	strb	r3, [r7, #6]
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000a2a:	bf00      	nop
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <spi_rxByte+0x38>)
 8000a2e:	f004 f8c1 	bl	8004bb4 <HAL_SPI_GetState>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d1f9      	bne.n	8000a2c <spi_rxByte+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000a38:	1dfa      	adds	r2, r7, #7
 8000a3a:	1db9      	adds	r1, r7, #6
 8000a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <spi_rxByte+0x38>)
 8000a46:	f003 fea2 	bl	800478e <HAL_SPI_TransmitReceive>
	return data;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000550 	.word	0x20000550

08000a58 <SD_sendCommand>:

static uint8_t SD_sendCommand(uint8_t cmd, uint32_t arg){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
	uint8_t resp;

	if(cmd == CMD17 || cmd == CMD18 || cmd == CMD24 || cmd == CMD25 || cmd == CMD32 || cmd == CMD33) {
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b51      	cmp	r3, #81	; 0x51
 8000a68:	d00e      	beq.n	8000a88 <SD_sendCommand+0x30>
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b52      	cmp	r3, #82	; 0x52
 8000a6e:	d00b      	beq.n	8000a88 <SD_sendCommand+0x30>
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b58      	cmp	r3, #88	; 0x58
 8000a74:	d008      	beq.n	8000a88 <SD_sendCommand+0x30>
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b59      	cmp	r3, #89	; 0x59
 8000a7a:	d005      	beq.n	8000a88 <SD_sendCommand+0x30>
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b60      	cmp	r3, #96	; 0x60
 8000a80:	d002      	beq.n	8000a88 <SD_sendCommand+0x30>
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b61      	cmp	r3, #97	; 0x61
 8000a86:	d102      	bne.n	8000a8e <SD_sendCommand+0x36>
		arg = arg << 9;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	025b      	lsls	r3, r3, #9
 8000a8c:	603b      	str	r3, [r7, #0]
	}

	select();
 8000a8e:	f7ff ff97 	bl	80009c0 <select>
	spi_txByte(cmd | 0b01000000);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffa4 	bl	80009e8 <spi_txByte>
	spi_txByte(arg >> 24);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	0e1b      	lsrs	r3, r3, #24
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff9e 	bl	80009e8 <spi_txByte>
	spi_txByte(arg >> 16);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	0c1b      	lsrs	r3, r3, #16
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff98 	bl	80009e8 <spi_txByte>
	spi_txByte(arg >> 8);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff92 	bl	80009e8 <spi_txByte>
	spi_txByte(arg >> 0);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff8d 	bl	80009e8 <spi_txByte>

	if(cmd == CMD8){
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b48      	cmp	r3, #72	; 0x48
 8000ad2:	d103      	bne.n	8000adc <SD_sendCommand+0x84>
		spi_txByte(0x87);
 8000ad4:	2087      	movs	r0, #135	; 0x87
 8000ad6:	f7ff ff87 	bl	80009e8 <spi_txByte>
 8000ada:	e002      	b.n	8000ae2 <SD_sendCommand+0x8a>
	} else {
		spi_txByte(0x95);
 8000adc:	2095      	movs	r0, #149	; 0x95
 8000ade:	f7ff ff83 	bl	80009e8 <spi_txByte>
	}

	while ((resp = spi_rxByte()) == 0xff);
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ff9a 	bl	8000a1c <spi_rxByte>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	2bff      	cmp	r3, #255	; 0xff
 8000af0:	d0f8      	beq.n	8000ae4 <SD_sendCommand+0x8c>
		if (resp == 0 && cmd == CMD58){
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d116      	bne.n	8000b26 <SD_sendCommand+0xce>
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b7a      	cmp	r3, #122	; 0x7a
 8000afc:	d113      	bne.n	8000b26 <SD_sendCommand+0xce>
			uint8_t status = spi_rxByte();
 8000afe:	f7ff ff8d 	bl	8000a1c <spi_rxByte>
 8000b02:	4603      	mov	r3, r0
 8000b04:	73bb      	strb	r3, [r7, #14]
			if(status == 0x40){
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	2b40      	cmp	r3, #64	; 0x40
 8000b0a:	d103      	bne.n	8000b14 <SD_sendCommand+0xbc>
				SDHC_flag = 1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <SD_sendCommand+0xf4>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e002      	b.n	8000b1a <SD_sendCommand+0xc2>
			} else {
				SDHC_flag = 0;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <SD_sendCommand+0xf4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
			}
			spi_rxByte();
 8000b1a:	f7ff ff7f 	bl	8000a1c <spi_rxByte>
			spi_rxByte();
 8000b1e:	f7ff ff7d 	bl	8000a1c <spi_rxByte>
			spi_rxByte();
 8000b22:	f7ff ff7b 	bl	8000a1c <spi_rxByte>
		}

	if(cmd == CMD38){
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b66      	cmp	r3, #102	; 0x66
 8000b2a:	d105      	bne.n	8000b38 <SD_sendCommand+0xe0>
		while (spi_rxByte() == 0);
 8000b2c:	bf00      	nop
 8000b2e:	f7ff ff75 	bl	8000a1c <spi_rxByte>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0fa      	beq.n	8000b2e <SD_sendCommand+0xd6>
	}
	spi_rxByte();
 8000b38:	f7ff ff70 	bl	8000a1c <spi_rxByte>
	deselect();
 8000b3c:	f7ff ff4a 	bl	80009d4 <deselect>
	return resp;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000054c 	.word	0x2000054c

08000b50 <SD_init>:

DSTATUS SD_init(BYTE pdrv){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	uint8_t resp, retry;
	for(int i = 0; i<10; i++){
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	e005      	b.n	8000b6c <SD_init+0x1c>
		spi_txByte(0xff);
 8000b60:	20ff      	movs	r0, #255	; 0xff
 8000b62:	f7ff ff41 	bl	80009e8 <spi_txByte>
	for(int i = 0; i<10; i++){
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	2b09      	cmp	r3, #9
 8000b70:	ddf6      	ble.n	8000b60 <SD_init+0x10>
	}
	select();
 8000b72:	f7ff ff25 	bl	80009c0 <select>

	retry=0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	75fb      	strb	r3, [r7, #23]
	do {
		resp = SD_sendCommand(CMD0, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2040      	movs	r0, #64	; 0x40
 8000b7e:	f7ff ff6b 	bl	8000a58 <SD_sendCommand>
 8000b82:	4603      	mov	r3, r0
 8000b84:	73fb      	strb	r3, [r7, #15]
		retry++;
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	75fb      	strb	r3, [r7, #23]
		if(retry == 0xff){
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	2bff      	cmp	r3, #255	; 0xff
 8000b90:	d101      	bne.n	8000b96 <SD_init+0x46>
			return 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e03c      	b.n	8000c10 <SD_init+0xc0>
		}
	} while (resp != 0x01);
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d1ee      	bne.n	8000b7a <SD_init+0x2a>

	deselect();
 8000b9c:	f7ff ff1a 	bl	80009d4 <deselect>
	spi_txByte(0xff);
 8000ba0:	20ff      	movs	r0, #255	; 0xff
 8000ba2:	f7ff ff21 	bl	80009e8 <spi_txByte>
	spi_txByte(0xff);
 8000ba6:	20ff      	movs	r0, #255	; 0xff
 8000ba8:	f7ff ff1e 	bl	80009e8 <spi_txByte>

	uint8_t version = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	73bb      	strb	r3, [r7, #14]

	do {
		resp = SD_sendCommand(CMD8, 0x000001AA);
 8000bb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000bb4:	2048      	movs	r0, #72	; 0x48
 8000bb6:	f7ff ff4f 	bl	8000a58 <SD_sendCommand>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]
	} while (resp != 0x01);
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d1f5      	bne.n	8000bb0 <SD_init+0x60>

	do {
		resp = SD_sendCommand(CMD55, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2077      	movs	r0, #119	; 0x77
 8000bc8:	f7ff ff46 	bl	8000a58 <SD_sendCommand>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]
		resp = SD_sendCommand(CMD41, 0x40000000);
 8000bd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000bd4:	2069      	movs	r0, #105	; 0x69
 8000bd6:	f7ff ff3f 	bl	8000a58 <SD_sendCommand>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
	} while (resp != 0);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1ef      	bne.n	8000bc4 <SD_init+0x74>

	SDHC_flag = 0;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <SD_init+0xc8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]

	if (version == 2){
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d108      	bne.n	8000c02 <SD_init+0xb2>
		do {
			resp = SD_sendCommand(CMD58, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	207a      	movs	r0, #122	; 0x7a
 8000bf4:	f7ff ff30 	bl	8000a58 <SD_sendCommand>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
		} while (resp != 0);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f6      	bne.n	8000bf0 <SD_init+0xa0>


	}

	resp = SD_sendCommand(CMD59, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	207b      	movs	r0, #123	; 0x7b
 8000c06:	f7ff ff27 	bl	8000a58 <SD_sendCommand>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	return 0;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000054c 	.word	0x2000054c

08000c1c <SD_status>:

DSTATUS SD_status(BYTE pdrv){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	uint8_t resp = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	resp = SD_sendCommand(CMD13, 0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	204d      	movs	r0, #77	; 0x4d
 8000c2e:	f7ff ff13 	bl	8000a58 <SD_sendCommand>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
	if(resp != 0){
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SD_status+0x24>
		return resp;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	e008      	b.n	8000c52 <SD_status+0x36>
	}
	select();
 8000c40:	f7ff febe 	bl	80009c0 <select>
	status = spi_rxByte();
 8000c44:	f7ff feea 	bl	8000a1c <spi_rxByte>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73bb      	strb	r3, [r7, #14]
	deselect();
 8000c4c:	f7ff fec2 	bl	80009d4 <deselect>
	return status;
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <SD_read>:

DSTATUS SD_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count){
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b088      	sub	sp, #32
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4603      	mov	r3, r0
 8000c68:	73fb      	strb	r3, [r7, #15]
	uint8_t resp = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75fb      	strb	r3, [r7, #23]

	for (int j = 0; j<count; j++){
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e02c      	b.n	8000cce <SD_read+0x74>
		resp = SD_sendCommand(CMD17, sector);
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	2051      	movs	r0, #81	; 0x51
 8000c78:	f7ff feee 	bl	8000a58 <SD_sendCommand>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	75fb      	strb	r3, [r7, #23]

		if(resp != 0){
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SD_read+0x30>
			return resp;
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	e02a      	b.n	8000ce0 <SD_read+0x86>
		}

		select();
 8000c8a:	f7ff fe99 	bl	80009c0 <select>

		while(spi_rxByte() != TOKEN);
 8000c8e:	bf00      	nop
 8000c90:	f7ff fec4 	bl	8000a1c <spi_rxByte>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2bfe      	cmp	r3, #254	; 0xfe
 8000c98:	d1fa      	bne.n	8000c90 <SD_read+0x36>

		for(int i = 0 ; i<BLOCK_SIZE; i++){
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	e00b      	b.n	8000cb8 <SD_read+0x5e>
			*buff = spi_rxByte();
 8000ca0:	f7ff febc 	bl	8000a1c <spi_rxByte>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	701a      	strb	r2, [r3, #0]
			buff++;
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
		for(int i = 0 ; i<BLOCK_SIZE; i++){
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cbe:	dbef      	blt.n	8000ca0 <SD_read+0x46>
		}

		spi_rxByte();
 8000cc0:	f7ff feac 	bl	8000a1c <spi_rxByte>
		spi_rxByte();
 8000cc4:	f7ff feaa 	bl	8000a1c <spi_rxByte>
	for (int j = 0; j<count; j++){
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d8ce      	bhi.n	8000c74 <SD_read+0x1a>
	}
	spi_rxByte();
 8000cd6:	f7ff fea1 	bl	8000a1c <spi_rxByte>

	deselect();
 8000cda:	f7ff fe7b 	bl	80009d4 <deselect>

	return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SD_write>:
DSTATUS SD_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	73fb      	strb	r3, [r7, #15]
	uint8_t resp = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	75fb      	strb	r3, [r7, #23]

	for (int j = 0; j<count; j++){
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	e03d      	b.n	8000d7e <SD_write+0x96>
		resp = SD_sendCommand(CMD24, sector);
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	2058      	movs	r0, #88	; 0x58
 8000d06:	f7ff fea7 	bl	8000a58 <SD_sendCommand>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	75fb      	strb	r3, [r7, #23]
		if(resp != 0){
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SD_write+0x30>
			return resp;
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	e03c      	b.n	8000d92 <SD_write+0xaa>
		}
		select();
 8000d18:	f7ff fe52 	bl	80009c0 <select>
		spi_txByte(TOKEN);
 8000d1c:	20fe      	movs	r0, #254	; 0xfe
 8000d1e:	f7ff fe63 	bl	80009e8 <spi_txByte>
		for(int i = 0 ; i<BLOCK_SIZE; i++){
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	e00a      	b.n	8000d3e <SD_write+0x56>
			spi_txByte(*buff);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fe5b 	bl	80009e8 <spi_txByte>
			buff++;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
		for(int i = 0 ; i<BLOCK_SIZE; i++){
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d44:	dbf0      	blt.n	8000d28 <SD_write+0x40>
		}
		spi_txByte(0xFF);
 8000d46:	20ff      	movs	r0, #255	; 0xff
 8000d48:	f7ff fe4e 	bl	80009e8 <spi_txByte>
		spi_txByte(0xFF);
 8000d4c:	20ff      	movs	r0, #255	; 0xff
 8000d4e:	f7ff fe4b 	bl	80009e8 <spi_txByte>
		resp = spi_rxByte();
 8000d52:	f7ff fe63 	bl	8000a1c <spi_rxByte>
 8000d56:	4603      	mov	r3, r0
 8000d58:	75fb      	strb	r3, [r7, #23]

		if( (resp & 0b00011111) != 0b00000101){
 8000d5a:	7dfb      	ldrb	r3, [r7, #23]
 8000d5c:	f003 031f 	and.w	r3, r3, #31
 8000d60:	2b05      	cmp	r3, #5
 8000d62:	d003      	beq.n	8000d6c <SD_write+0x84>
			deselect();
 8000d64:	f7ff fe36 	bl	80009d4 <deselect>
			return resp;
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	e012      	b.n	8000d92 <SD_write+0xaa>
		}

		while (spi_rxByte() == 0);
 8000d6c:	bf00      	nop
 8000d6e:	f7ff fe55 	bl	8000a1c <spi_rxByte>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0fa      	beq.n	8000d6e <SD_write+0x86>
	for (int j = 0; j<count; j++){
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d8bd      	bhi.n	8000d02 <SD_write+0x1a>
	}
	deselect();
 8000d86:	f7ff fe25 	bl	80009d4 <deselect>
	spi_txByte(0xFF);
 8000d8a:	20ff      	movs	r0, #255	; 0xff
 8000d8c:	f7ff fe2c 	bl	80009e8 <spi_txByte>
	return 0;
 8000d90:	2300      	movs	r3, #0

}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <SD_ioctl>:
DSTATUS SD_ioctl(BYTE pdrv, BYTE cmd, void* buff){
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	603a      	str	r2, [r7, #0]
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	460b      	mov	r3, r1
 8000da8:	71bb      	strb	r3, [r7, #6]
	return 0;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SD_getCSD>:
	resp = SD_sendCommand(CMD38, 0);
	if(resp != 0)
				return resp;
}

DSTATUS SD_getCSD(BYTE pdrv){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	uint8_t resp = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	72fb      	strb	r3, [r7, #11]

	resp = SD_sendCommand(CMD9, 0);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2049      	movs	r0, #73	; 0x49
 8000dca:	f7ff fe45 	bl	8000a58 <SD_sendCommand>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	72fb      	strb	r3, [r7, #11]

	if(resp != 0){
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SD_getCSD+0x24>
		return resp;
 8000dd8:	7afb      	ldrb	r3, [r7, #11]
 8000dda:	e022      	b.n	8000e22 <SD_getCSD+0x6a>
	}

	select();
 8000ddc:	f7ff fdf0 	bl	80009c0 <select>

	while(spi_rxByte() != TOKEN);
 8000de0:	bf00      	nop
 8000de2:	f7ff fe1b 	bl	8000a1c <spi_rxByte>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2bfe      	cmp	r3, #254	; 0xfe
 8000dea:	d1fa      	bne.n	8000de2 <SD_getCSD+0x2a>

	for(int i = 0 ; i<16; i++){
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e00b      	b.n	8000e0a <SD_getCSD+0x52>
		csd.reg[i] = spi_rxByte();
 8000df2:	f7ff fe13 	bl	8000a1c <spi_rxByte>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <SD_getCSD+0x74>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	460a      	mov	r2, r1
 8000e02:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i<16; i++){
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	ddf0      	ble.n	8000df2 <SD_getCSD+0x3a>
	}

	spi_rxByte();
 8000e10:	f7ff fe04 	bl	8000a1c <spi_rxByte>
	spi_rxByte();
 8000e14:	f7ff fe02 	bl	8000a1c <spi_rxByte>
	spi_rxByte();
 8000e18:	f7ff fe00 	bl	8000a1c <spi_rxByte>

	deselect();
 8000e1c:	f7ff fdda 	bl	80009d4 <deselect>

	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200005b4 	.word	0x200005b4

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_MspInit+0x44>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_MspInit+0x44>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6613      	str	r3, [r2, #96]	; 0x60
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_MspInit+0x44>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_MspInit+0x44>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x44>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x44>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0b0      	sub	sp, #192	; 0xc0
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	2294      	movs	r2, #148	; 0x94
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f009 febf 	bl	800ac1c <memset>
  if(huart->Instance==LPUART1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a43      	ldr	r2, [pc, #268]	; (8000fb0 <HAL_UART_MspInit+0x138>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d13e      	bne.n	8000f26 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0318 	add.w	r3, r7, #24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fd41 	bl	800393c <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec0:	f7ff fd6e 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000ef4:	f001 fe3a 	bl	8002b6c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ef8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f12:	2308      	movs	r3, #8
 8000f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <HAL_UART_MspInit+0x140>)
 8000f20:	f000 faca 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f24:	e040      	b.n	8000fa8 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <HAL_UART_MspInit+0x144>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d13b      	bne.n	8000fa8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f30:	2304      	movs	r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fcfd 	bl	800393c <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000f48:	f7ff fd2a 	bl	80009a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f56:	6593      	str	r3, [r2, #88]	; 0x58
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f96:	2307      	movs	r3, #7
 8000f98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <HAL_UART_MspInit+0x148>)
 8000fa4:	f000 fa88 	bl	80014b8 <HAL_GPIO_Init>
}
 8000fa8:	bf00      	nop
 8000faa:	37c0      	adds	r7, #192	; 0xc0
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40008000 	.word	0x40008000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48001800 	.word	0x48001800
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	48000c00 	.word	0x48000c00

08000fc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a25      	ldr	r2, [pc, #148]	; (8001078 <HAL_SPI_MspInit+0xb4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d144      	bne.n	8001070 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_SPI_MspInit+0xb8>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fea:	4a24      	ldr	r2, [pc, #144]	; (800107c <HAL_SPI_MspInit+0xb8>)
 8000fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_SPI_MspInit+0xb8>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_SPI_MspInit+0xb8>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <HAL_SPI_MspInit+0xb8>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_SPI_MspInit+0xb8>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_SPI_MspInit+0xb8>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a18      	ldr	r2, [pc, #96]	; (800107c <HAL_SPI_MspInit+0xb8>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_SPI_MspInit+0xb8>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800102e:	2310      	movs	r3, #16
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103e:	2305      	movs	r3, #5
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f000 fa34 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001050:	2338      	movs	r3, #56	; 0x38
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001060:	2305      	movs	r3, #5
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_SPI_MspInit+0xbc>)
 800106c:	f000 fa24 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40013000 	.word	0x40013000
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f89c 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <OTG_FS_IRQHandler+0x10>)
 80010de:	f000 fd02 	bl	8001ae6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20002b08 	.word	0x20002b08

080010ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001114:	f7ff ffea 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	; (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	; (800115c <LoopForever+0x16>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f009 fd49 	bl	800abd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001142:	f7ff f9d7 	bl	80004f4 <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001148:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001154:	0800ad2c 	.word	0x0800ad2c
  ldr r2, =_sbss
 8001158:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 800115c:	20002f10 	.word	0x20002f10

08001160 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_IRQHandler>

08001162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f961 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f80e 	bl	8001194 <HAL_InitTick>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	e001      	b.n	8001188 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001184:	f7ff fe54 	bl	8000e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001188:	79fb      	ldrb	r3, [r7, #7]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_InitTick+0x6c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d023      	beq.n	80011f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_InitTick+0x70>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f96d 	bl	800149e <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d809      	bhi.n	80011e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f937 	bl	800144a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_InitTick+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e004      	b.n	80011f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e001      	b.n	80011f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	20000000 	.word	0x20000000
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	200005c4 	.word	0x200005c4

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200005c4 	.word	0x200005c4

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff3e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff31 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e166      	b.n	8001796 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8158 	beq.w	8001790 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d005      	beq.n	80014f8 <HAL_GPIO_Init+0x40>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 0201 	and.w	r2, r3, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b03      	cmp	r3, #3
 8001564:	d017      	beq.n	8001596 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d123      	bne.n	80015ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	6939      	ldr	r1, [r7, #16]
 80015e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0203 	and.w	r2, r3, #3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80b2 	beq.w	8001790 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162c:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_GPIO_Init+0x2fc>)
 800162e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001630:	4a60      	ldr	r2, [pc, #384]	; (80017b4 <HAL_GPIO_Init+0x2fc>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6613      	str	r3, [r2, #96]	; 0x60
 8001638:	4b5e      	ldr	r3, [pc, #376]	; (80017b4 <HAL_GPIO_Init+0x2fc>)
 800163a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001644:	4a5c      	ldr	r2, [pc, #368]	; (80017b8 <HAL_GPIO_Init+0x300>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800166e:	d02b      	beq.n	80016c8 <HAL_GPIO_Init+0x210>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a52      	ldr	r2, [pc, #328]	; (80017bc <HAL_GPIO_Init+0x304>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d025      	beq.n	80016c4 <HAL_GPIO_Init+0x20c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <HAL_GPIO_Init+0x308>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d01f      	beq.n	80016c0 <HAL_GPIO_Init+0x208>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a50      	ldr	r2, [pc, #320]	; (80017c4 <HAL_GPIO_Init+0x30c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d019      	beq.n	80016bc <HAL_GPIO_Init+0x204>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a4f      	ldr	r2, [pc, #316]	; (80017c8 <HAL_GPIO_Init+0x310>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d013      	beq.n	80016b8 <HAL_GPIO_Init+0x200>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a4e      	ldr	r2, [pc, #312]	; (80017cc <HAL_GPIO_Init+0x314>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1fc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4d      	ldr	r2, [pc, #308]	; (80017d0 <HAL_GPIO_Init+0x318>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1f8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a4c      	ldr	r2, [pc, #304]	; (80017d4 <HAL_GPIO_Init+0x31c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1f4>
 80016a8:	2307      	movs	r3, #7
 80016aa:	e00e      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016ac:	2308      	movs	r3, #8
 80016ae:	e00c      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016b0:	2306      	movs	r3, #6
 80016b2:	e00a      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016b4:	2305      	movs	r3, #5
 80016b6:	e008      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016bc:	2303      	movs	r3, #3
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016c8:	2300      	movs	r3, #0
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016da:	4937      	ldr	r1, [pc, #220]	; (80017b8 <HAL_GPIO_Init+0x300>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e8:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_GPIO_Init+0x320>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170c:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <HAL_GPIO_Init+0x320>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_GPIO_Init+0x320>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001736:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <HAL_GPIO_Init+0x320>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_GPIO_Init+0x320>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_GPIO_Init+0x320>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <HAL_GPIO_Init+0x320>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_GPIO_Init+0x320>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f47f ae91 	bne.w	80014c8 <HAL_GPIO_Init+0x10>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	48001000 	.word	0x48001000
 80017cc:	48001400 	.word	0x48001400
 80017d0:	48001800 	.word	0x48001800
 80017d4:	48001c00 	.word	0x48001c00
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4013      	ands	r3, r2
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43d9      	mvns	r1, r3
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	400b      	ands	r3, r1
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	b08f      	sub	sp, #60	; 0x3c
 8001844:	af0a      	add	r7, sp, #40	; 0x28
 8001846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e116      	b.n	8001a80 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d106      	bne.n	8001872 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f008 fd37 	bl	800a2e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f004 f9aa 	bl	8005bea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	687e      	ldr	r6, [r7, #4]
 800189e:	466d      	mov	r5, sp
 80018a0:	f106 0410 	add.w	r4, r6, #16
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b4:	1d33      	adds	r3, r6, #4
 80018b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f004 f8bd 	bl	8005a38 <USB_CoreInit>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0d7      	b.n	8001a80 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f004 f998 	bl	8005c0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e04a      	b.n	8001978 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	333d      	adds	r3, #61	; 0x3d
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	333c      	adds	r3, #60	; 0x3c
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	b298      	uxth	r0, r3
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3342      	adds	r3, #66	; 0x42
 800191e:	4602      	mov	r2, r0
 8001920:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	333f      	adds	r3, #63	; 0x3f
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3344      	adds	r3, #68	; 0x44
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	3348      	adds	r3, #72	; 0x48
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	3350      	adds	r3, #80	; 0x50
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	3301      	adds	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d3af      	bcc.n	80018e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e044      	b.n	8001a12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3b5      	bcc.n	8001988 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	687e      	ldr	r6, [r7, #4]
 8001a24:	466d      	mov	r5, sp
 8001a26:	f106 0410 	add.w	r4, r6, #16
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a3a:	1d33      	adds	r3, r6, #4
 8001a3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a3e:	6838      	ldr	r0, [r7, #0]
 8001a40:	f004 f930 	bl	8005ca4 <USB_DevInit>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e014      	b.n	8001a80 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 ff84 	bl	800297c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f005 f902 	bl	8006c82 <USB_DevDisconnect>

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_PCD_Start+0x1c>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e01c      	b.n	8001ade <HAL_PCD_Start+0x56>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 f87f 	bl	8005bc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f005 f8b6 	bl	8006c40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ae6:	b590      	push	{r4, r7, lr}
 8001ae8:	b08d      	sub	sp, #52	; 0x34
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f005 f974 	bl	8006dea <USB_GetMode>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f040 8384 	bne.w	8002212 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f005 f8d8 	bl	8006cc4 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 837a 	beq.w	8002210 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f005 f8cf 	bl	8006cc4 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d107      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f002 0202 	and.w	r2, r2, #2
 8001b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f005 f8bd 	bl	8006cc4 <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d161      	bne.n	8001c18 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0210 	bic.w	r2, r2, #16
 8001b62:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f003 020f 	and.w	r2, r3, #15
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	3304      	adds	r3, #4
 8001b82:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	0c5b      	lsrs	r3, r3, #17
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d124      	bne.n	8001bda <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d035      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	6a38      	ldr	r0, [r7, #32]
 8001bb0:	f004 fef4 	bl	800699c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc0:	441a      	add	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd2:	441a      	add	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	619a      	str	r2, [r3, #24]
 8001bd8:	e016      	b.n	8001c08 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	0c5b      	lsrs	r3, r3, #17
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d110      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bec:	2208      	movs	r2, #8
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6a38      	ldr	r0, [r7, #32]
 8001bf2:	f004 fed3 	bl	800699c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c02:	441a      	add	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0210 	orr.w	r2, r2, #16
 8001c16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f005 f851 	bl	8006cc4 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c2c:	d16e      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f005 f857 	bl	8006cea <USB_ReadDevAllOutEpInterrupt>
 8001c3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c3e:	e062      	b.n	8001d06 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d057      	beq.n	8001cfa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f005 f87c 	bl	8006d52 <USB_ReadDevOutEPInterrupt>
 8001c5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00c      	beq.n	8001c80 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c72:	461a      	mov	r2, r3
 8001c74:	2301      	movs	r3, #1
 8001c76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fda4 	bl	80027c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00c      	beq.n	8001ca4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c96:	461a      	mov	r2, r3
 8001c98:	2308      	movs	r3, #8
 8001c9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fde0 	bl	8002864 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2320      	movs	r3, #32
 8001cda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d199      	bne.n	8001c40 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 ffd7 	bl	8006cc4 <USB_ReadInterrupts>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d20:	f040 808c 	bne.w	8001e3c <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 fff8 	bl	8006d1e <USB_ReadDevAllInEpInterrupt>
 8001d2e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d34:	e07e      	b.n	8001e34 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d073      	beq.n	8001e28 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 f81f 	bl	8006d8e <USB_ReadDevInEPInterrupt>
 8001d50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d020      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	2201      	movs	r2, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69f9      	ldr	r1, [r7, #28]
 8001d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4619      	mov	r1, r3
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f008 fb62 	bl	800a462 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db4:	461a      	mov	r2, r3
 8001db6:	2308      	movs	r3, #8
 8001db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2310      	movs	r3, #16
 8001dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dec:	461a      	mov	r2, r3
 8001dee:	2340      	movs	r3, #64	; 0x40
 8001df0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00c      	beq.n	8001e16 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dfe:	6a38      	ldr	r0, [r7, #32]
 8001e00:	f004 f89c 	bl	8005f3c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e10:	461a      	mov	r2, r3
 8001e12:	2302      	movs	r3, #2
 8001e14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fc47 	bl	80026b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f47f af7d 	bne.w	8001d36 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 ff3f 	bl	8006cc4 <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e50:	d122      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f008 fe3e 	bl	800aafc <HAL_PCDEx_LPM_Callback>
 8001e80:	e002      	b.n	8001e88 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f008 fb5a 	bl	800a53c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 ff11 	bl	8006cc4 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eac:	d112      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d102      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f008 fb16 	bl	800a4f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 fef3 	bl	8006cc4 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ee8:	d121      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ef8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d111      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f008 fdeb 	bl	800aafc <HAL_PCDEx_LPM_Callback>
 8001f26:	e002      	b.n	8001f2e <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f008 fae1 	bl	800a4f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fec6 	bl	8006cc4 <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f42:	f040 80b5 	bne.w	80020b0 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2110      	movs	r1, #16
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 ffeb 	bl	8005f3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6a:	e046      	b.n	8001ffa <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f90:	0151      	lsls	r1, r2, #5
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	440a      	add	r2, r1
 8001f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fac:	461a      	mov	r2, r3
 8001fae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc4:	0151      	lsls	r1, r2, #5
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	440a      	add	r2, r1
 8001fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ff2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002000:	429a      	cmp	r2, r3
 8002002:	d3b3      	bcc.n	8001f6c <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002012:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002016:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	2b00      	cmp	r3, #0
 800201e:	d016      	beq.n	800204e <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002030:	f043 030b 	orr.w	r3, r3, #11
 8002034:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002046:	f043 030b 	orr.w	r3, r3, #11
 800204a:	6453      	str	r3, [r2, #68]	; 0x44
 800204c:	e015      	b.n	800207a <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002060:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002064:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002074:	f043 030b 	orr.w	r3, r3, #11
 8002078:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002088:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800208c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f004 fed6 	bl	8006e4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 fe05 	bl	8006cc4 <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c4:	d124      	bne.n	8002110 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fe9b 	bl	8006e06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 ffaa 	bl	800602e <USB_GetDevSpeed>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681c      	ldr	r4, [r3, #0]
 80020e6:	f001 fb2f 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 80020ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	4620      	mov	r0, r4
 80020f6:	f003 fccb 	bl	8005a90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f008 f9d9 	bl	800a4b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800210e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fdd5 	bl	8006cc4 <USB_ReadInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b08      	cmp	r3, #8
 8002122:	d10a      	bne.n	800213a <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f008 f9b6 	bl	800a496 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f002 0208 	and.w	r2, r2, #8
 8002138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fdc0 	bl	8006cc4 <USB_ReadInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800214e:	d10f      	bne.n	8002170 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f008 fa28 	bl	800a5b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800216e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f004 fda5 	bl	8006cc4 <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002180:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002184:	d10f      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f008 f9fb 	bl	800a58c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80021a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 fd8a 	bl	8006cc4 <USB_ReadInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ba:	d10a      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f008 fa09 	bl	800a5d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fd74 	bl	8006cc4 <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d115      	bne.n	8002212 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f008 f9f9 	bl	800a5f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	e000      	b.n	8002212 <HAL_PCD_IRQHandler+0x72c>
      return;
 8002210:	bf00      	nop
    }
  }
}
 8002212:	3734      	adds	r7, #52	; 0x34
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_PCD_SetAddress+0x1a>
 800222e:	2302      	movs	r3, #2
 8002230:	e013      	b.n	800225a <HAL_PCD_SetAddress+0x42>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fcd2 	bl	8006bf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	4608      	mov	r0, r1
 800226c:	4611      	mov	r1, r2
 800226e:	461a      	mov	r2, r3
 8002270:	4603      	mov	r3, r0
 8002272:	70fb      	strb	r3, [r7, #3]
 8002274:	460b      	mov	r3, r1
 8002276:	803b      	strh	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da0f      	bge.n	80022a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	3338      	adds	r3, #56	; 0x38
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	705a      	strb	r2, [r3, #1]
 80022a6:	e00f      	b.n	80022c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 020f 	and.w	r2, r3, #15
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022d4:	883a      	ldrh	r2, [r7, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	78ba      	ldrb	r2, [r7, #2]
 80022de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022f2:	78bb      	ldrb	r3, [r7, #2]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d102      	bne.n	80022fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_PCD_EP_Open+0xaa>
 8002308:	2302      	movs	r3, #2
 800230a:	e00e      	b.n	800232a <HAL_PCD_EP_Open+0xc8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fea6 	bl	800606c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002328:	7afb      	ldrb	r3, [r7, #11]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800233e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002342:	2b00      	cmp	r3, #0
 8002344:	da0f      	bge.n	8002366 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	3338      	adds	r3, #56	; 0x38
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	3304      	adds	r3, #4
 800235c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	705a      	strb	r2, [r3, #1]
 8002364:	e00f      	b.n	8002386 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	b2da      	uxtb	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_PCD_EP_Close+0x6e>
 800239c:	2302      	movs	r3, #2
 800239e:	e00e      	b.n	80023be <HAL_PCD_EP_Close+0x8c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fee4 	bl	800617c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	460b      	mov	r3, r1
 80023d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002408:	7afb      	ldrb	r3, [r7, #11]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	b2da      	uxtb	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6979      	ldr	r1, [r7, #20]
 8002424:	4618      	mov	r0, r3
 8002426:	f004 f961 	bl	80066ec <USB_EP0StartXfer>
 800242a:	e005      	b.n	8002438 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6979      	ldr	r1, [r7, #20]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 ff7e 	bl	8006334 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002464:	681b      	ldr	r3, [r3, #0]
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	460b      	mov	r3, r1
 8002480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002482:	7afb      	ldrb	r3, [r7, #11]
 8002484:	f003 020f 	and.w	r2, r3, #15
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	3338      	adds	r3, #56	; 0x38
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2201      	movs	r2, #1
 80024b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b2:	7afb      	ldrb	r3, [r7, #11]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6979      	ldr	r1, [r7, #20]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 f90c 	bl	80066ec <USB_EP0StartXfer>
 80024d4:	e005      	b.n	80024e2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6979      	ldr	r1, [r7, #20]
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 ff29 	bl	8006334 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d901      	bls.n	800250a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e04e      	b.n	80025a8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800250a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800250e:	2b00      	cmp	r3, #0
 8002510:	da0f      	bge.n	8002532 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	f003 020f 	and.w	r2, r3, #15
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	3338      	adds	r3, #56	; 0x38
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	705a      	strb	r2, [r3, #1]
 8002530:	e00d      	b.n	800254e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_PCD_EP_SetStall+0x82>
 800256a:	2302      	movs	r3, #2
 800256c:	e01c      	b.n	80025a8 <HAL_PCD_EP_SetStall+0xbc>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68f9      	ldr	r1, [r7, #12]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fa65 	bl	8006a4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002596:	4619      	mov	r1, r3
 8002598:	4610      	mov	r0, r2
 800259a:	f004 fc57 	bl	8006e4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	f003 020f 	and.w	r2, r3, #15
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d901      	bls.n	80025ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e042      	b.n	8002654 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da0f      	bge.n	80025f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	3338      	adds	r3, #56	; 0x38
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	705a      	strb	r2, [r3, #1]
 80025f4:	e00f      	b.n	8002616 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 020f 	and.w	r2, r3, #15
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	3304      	adds	r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	b2da      	uxtb	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_PCD_EP_ClrStall+0x86>
 8002632:	2302      	movs	r3, #2
 8002634:	e00e      	b.n	8002654 <HAL_PCD_EP_ClrStall+0xa4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	4618      	mov	r0, r3
 8002646:	f004 fa6f 	bl	8006b28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_PCD_EP_Flush+0x1a>
 8002672:	2302      	movs	r3, #2
 8002674:	e01b      	b.n	80026ae <HAL_PCD_EP_Flush+0x52>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800267e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da09      	bge.n	800269a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f003 fc52 	bl	8005f3c <USB_FlushTxFifo>
 8002698:	e004      	b.n	80026a4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fc7e 	bl	8005fa0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b088      	sub	sp, #32
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	3338      	adds	r3, #56	; 0x38
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d901      	bls.n	80026ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e067      	b.n	80027be <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	429a      	cmp	r2, r3
 8002702:	d902      	bls.n	800270a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3303      	adds	r3, #3
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002712:	e026      	b.n	8002762 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	429a      	cmp	r2, r3
 8002728:	d902      	bls.n	8002730 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3303      	adds	r3, #3
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68d9      	ldr	r1, [r3, #12]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	b29b      	uxth	r3, r3
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	f004 f8ef 	bl	8006928 <USB_WritePacket>

    ep->xfer_buff  += len;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	441a      	add	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	b29b      	uxth	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	429a      	cmp	r2, r3
 8002776:	d809      	bhi.n	800278c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002780:	429a      	cmp	r2, r3
 8002782:	d203      	bcs.n	800278c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1c3      	bne.n	8002714 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	429a      	cmp	r2, r3
 8002796:	d811      	bhi.n	80027bc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	2201      	movs	r2, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	6939      	ldr	r1, [r7, #16]
 80027b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027b8:	4013      	ands	r3, r2
 80027ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	333c      	adds	r3, #60	; 0x3c
 80027e0:	3304      	adds	r3, #4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <PCD_EP_OutXfrComplete_int+0x98>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d124      	bne.n	8002848 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002814:	461a      	mov	r2, r3
 8002816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281a:	6093      	str	r3, [r2, #8]
 800281c:	e01a      	b.n	8002854 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	2320      	movs	r3, #32
 8002838:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f007 fdf3 	bl	800a42c <HAL_PCD_DataOutStageCallback>
 8002846:	e005      	b.n	8002854 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f007 fdec 	bl	800a42c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	4f54310a 	.word	0x4f54310a

08002864 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	333c      	adds	r3, #60	; 0x3c
 800287c:	3304      	adds	r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <PCD_EP_OutSetupPacket_int+0x64>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d90e      	bls.n	80028b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f007 fda5 	bl	800a408 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	4f54300a 	.word	0x4f54300a

080028cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
 80028d8:	4613      	mov	r3, r2
 80028da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d107      	bne.n	80028fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028ea:	883b      	ldrh	r3, [r7, #0]
 80028ec:	0419      	lsls	r1, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
 80028f8:	e028      	b.n	800294c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4413      	add	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e00d      	b.n	800292a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	3340      	adds	r3, #64	; 0x40
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4413      	add	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	3301      	adds	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	3b01      	subs	r3, #1
 8002930:	429a      	cmp	r2, r3
 8002932:	d3ec      	bcc.n	800290e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002934:	883b      	ldrh	r3, [r7, #0]
 8002936:	0418      	lsls	r0, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	3b01      	subs	r3, #1
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	4302      	orrs	r2, r0
 8002944:	3340      	adds	r3, #64	; 0x40
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ae:	f043 0303 	orr.w	r3, r3, #3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d102      	bne.n	80029dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029da:	e00b      	b.n	80029f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d102      	bne.n	80029f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	e000      	b.n	80029f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80029f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d141      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a12:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d131      	bne.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a26:	4a46      	ldr	r2, [pc, #280]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a30:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2232      	movs	r2, #50	; 0x32
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a56:	e002      	b.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5e:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d102      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7e:	d158      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e057      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a94:	e04d      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9c:	d141      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d131      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab2:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2232      	movs	r2, #50	; 0x32
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	0c9b      	lsrs	r3, r3, #18
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae2:	e002      	b.n	8002aea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d102      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f2      	bne.n	8002ae4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	d112      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e011      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b20:	e007      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b30:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40007000 	.word	0x40007000
 8002b44:	20000000 	.word	0x20000000
 8002b48:	431bde83 	.word	0x431bde83

08002b4c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5a:	6053      	str	r3, [r2, #4]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40007000 	.word	0x40007000

08002b6c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7a:	6053      	str	r3, [r2, #4]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f000 bc16 	b.w	80033cc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba0:	4ba0      	ldr	r3, [pc, #640]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002baa:	4b9e      	ldr	r3, [pc, #632]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80e4 	beq.w	8002d8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4c>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	f040 808b 	bne.w	8002ce6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	f040 8087 	bne.w	8002ce6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd8:	4b92      	ldr	r3, [pc, #584]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x64>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e3ed      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_RCC_OscConfig+0x7e>
 8002c00:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c08:	e005      	b.n	8002c16 <HAL_RCC_OscConfig+0x8a>
 8002c0a:	4b86      	ldr	r3, [pc, #536]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d223      	bcs.n	8002c62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fdca 	bl	80037b8 <RCC_SetFlashLatencyFromMSIRange>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e3ce      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2e:	4b7d      	ldr	r3, [pc, #500]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7c      	ldr	r2, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4977      	ldr	r1, [pc, #476]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4c:	4b75      	ldr	r3, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	4972      	ldr	r1, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e025      	b.n	8002cae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c62:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6f      	ldr	r2, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c68:	f043 0308 	orr.w	r3, r3, #8
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	496a      	ldr	r1, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	4965      	ldr	r1, [pc, #404]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fd8a 	bl	80037b8 <RCC_SetFlashLatencyFromMSIRange>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e38e      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cae:	f000 fcbf 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	495a      	ldr	r1, [pc, #360]	; (8002e28 <HAL_RCC_OscConfig+0x29c>)
 8002cc0:	5ccb      	ldrb	r3, [r1, r3]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_OscConfig+0x2a0>)
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cce:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fa5e 	bl	8001194 <HAL_InitTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d052      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	e372      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d032      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cee:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fa9b 	bl	8001234 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d02:	f7fe fa97 	bl	8001234 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e35b      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d20:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a3f      	ldr	r2, [pc, #252]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d26:	f043 0308 	orr.w	r3, r3, #8
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	493a      	ldr	r1, [pc, #232]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d3e:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	4935      	ldr	r1, [pc, #212]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
 8002d52:	e01a      	b.n	8002d8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d54:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fa68 	bl	8001234 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d68:	f7fe fa64 	bl	8001234 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e328      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1dc>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d073      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_OscConfig+0x21c>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d10e      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d10b      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d063      	beq.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d15f      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e305      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d106      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01d      	b.n	8002e14 <HAL_RCC_OscConfig+0x288>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x270>
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0x288>
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01b      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fa0a 	bl	8001234 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e22:	e010      	b.n	8002e46 <HAL_RCC_OscConfig+0x2ba>
 8002e24:	40021000 	.word	0x40021000
 8002e28:	0800ac88 	.word	0x0800ac88
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe f9fe 	bl	8001234 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e2c2      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e46:	4baf      	ldr	r3, [pc, #700]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x2a8>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe f9ee 	bl	8001234 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe f9ea 	bl	8001234 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e2ae      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e6e:	4ba5      	ldr	r3, [pc, #660]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2d0>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d060      	beq.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_OscConfig+0x310>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d119      	bne.n	8002eca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d116      	bne.n	8002eca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e9c:	4b99      	ldr	r3, [pc, #612]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x328>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e28b      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b93      	ldr	r3, [pc, #588]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	4990      	ldr	r1, [pc, #576]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec8:	e040      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d023      	beq.n	8002f1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed2:	4b8c      	ldr	r3, [pc, #560]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a8b      	ldr	r2, [pc, #556]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe f9a9 	bl	8001234 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe f9a5 	bl	8001234 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e269      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef8:	4b82      	ldr	r3, [pc, #520]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b7f      	ldr	r3, [pc, #508]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	497c      	ldr	r1, [pc, #496]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b7a      	ldr	r3, [pc, #488]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a79      	ldr	r2, [pc, #484]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe f985 	bl	8001234 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe f981 	bl	8001234 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e245      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f40:	4b70      	ldr	r3, [pc, #448]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d03c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f60:	4b68      	ldr	r3, [pc, #416]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	4a67      	ldr	r2, [pc, #412]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe f960 	bl	8001234 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe f95c 	bl	8001234 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e220      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8a:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCC_OscConfig+0x3ec>
 8002f98:	e01b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9a:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe f943 	bl	8001234 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe f93f 	bl	8001234 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e203      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ef      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80a6 	beq.w	800312c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fe4:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10d      	bne.n	800300c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b44      	ldr	r3, [pc, #272]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4a43      	ldr	r2, [pc, #268]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffc:	4b41      	ldr	r3, [pc, #260]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003008:	2301      	movs	r3, #1
 800300a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300c:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_RCC_OscConfig+0x57c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d118      	bne.n	800304a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003018:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_OscConfig+0x57c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a3a      	ldr	r2, [pc, #232]	; (8003108 <HAL_RCC_OscConfig+0x57c>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003024:	f7fe f906 	bl	8001234 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7fe f902 	bl	8001234 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1c6      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303e:	4b32      	ldr	r3, [pc, #200]	; (8003108 <HAL_RCC_OscConfig+0x57c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x4d8>
 8003052:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003062:	e024      	b.n	80030ae <HAL_RCC_OscConfig+0x522>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b05      	cmp	r3, #5
 800306a:	d110      	bne.n	800308e <HAL_RCC_OscConfig+0x502>
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a24      	ldr	r2, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	4a20      	ldr	r2, [pc, #128]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308c:	e00f      	b.n	80030ae <HAL_RCC_OscConfig+0x522>
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	4a17      	ldr	r2, [pc, #92]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fe f8bd 	bl	8001234 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe f8b9 	bl	8001234 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e17b      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ed      	beq.n	80030be <HAL_RCC_OscConfig+0x532>
 80030e2:	e01a      	b.n	800311a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe f8a6 	bl	8001234 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ea:	e00f      	b.n	800310c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe f8a2 	bl	8001234 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d906      	bls.n	800310c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e164      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800310c:	4ba8      	ldr	r3, [pc, #672]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e8      	bne.n	80030ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311a:	7ffb      	ldrb	r3, [r7, #31]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003120:	4ba3      	ldr	r3, [pc, #652]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4aa2      	ldr	r2, [pc, #648]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01c      	beq.n	800317a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003140:	4b9b      	ldr	r3, [pc, #620]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003146:	4a9a      	ldr	r2, [pc, #616]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe f870 	bl	8001234 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003158:	f7fe f86c 	bl	8001234 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e130      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800316a:	4b91      	ldr	r3, [pc, #580]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800316c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ef      	beq.n	8003158 <HAL_RCC_OscConfig+0x5cc>
 8003178:	e01b      	b.n	80031b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800317a:	4b8d      	ldr	r3, [pc, #564]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800317c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003180:	4a8b      	ldr	r2, [pc, #556]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fe f853 	bl	8001234 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003192:	f7fe f84f 	bl	8001234 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e113      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031a4:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 80031a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ef      	bne.n	8003192 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8107 	beq.w	80033ca <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	f040 80cb 	bne.w	800335c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031c6:	4b7a      	ldr	r3, [pc, #488]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 0203 	and.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d12c      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	3b01      	subs	r3, #1
 80031e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d123      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d11b      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d113      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d109      	bne.n	8003234 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d06d      	beq.n	8003310 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d068      	beq.n	800330c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800323a:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003246:	4b5a      	ldr	r3, [pc, #360]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0ba      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003256:	4b56      	ldr	r3, [pc, #344]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a55      	ldr	r2, [pc, #340]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800325c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003260:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003262:	f7fd ffe7 	bl	8001234 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fd ffe3 	bl	8001234 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0a7      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327c:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003288:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_RCC_OscConfig+0x828>)
 800328e:	4013      	ands	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003298:	3a01      	subs	r2, #1
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a2:	0212      	lsls	r2, r2, #8
 80032a4:	4311      	orrs	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032aa:	0852      	lsrs	r2, r2, #1
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0552      	lsls	r2, r2, #21
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032b6:	0852      	lsrs	r2, r2, #1
 80032b8:	3a01      	subs	r2, #1
 80032ba:	0652      	lsls	r2, r2, #25
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032c2:	06d2      	lsls	r2, r2, #27
 80032c4:	430a      	orrs	r2, r1
 80032c6:	493a      	ldr	r1, [pc, #232]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032cc:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 80032de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e4:	f7fd ffa6 	bl	8001234 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fd ffa2 	bl	8001234 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e066      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330a:	e05e      	b.n	80033ca <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e05d      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d156      	bne.n	80033ca <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003334:	f7fd ff7e 	bl	8001234 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fd ff7a 	bl	8001234 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e03e      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x7b0>
 800335a:	e036      	b.n	80033ca <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d031      	beq.n	80033c6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d105      	bne.n	8003386 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4a0c      	ldr	r2, [pc, #48]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003380:	f023 0303 	bic.w	r3, r3, #3
 8003384:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_OscConfig+0x824>)
 800338c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003394:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fd ff4d 	bl	8001234 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339c:	e00c      	b.n	80033b8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339e:	f7fd ff49 	bl	8001234 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d905      	bls.n	80033b8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e00d      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
 80033b0:	40021000 	.word	0x40021000
 80033b4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_OscConfig+0x848>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ec      	bne.n	800339e <HAL_RCC_OscConfig+0x812>
 80033c4:	e001      	b.n	80033ca <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e10f      	b.n	8003610 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f0:	4b89      	ldr	r3, [pc, #548]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d910      	bls.n	8003420 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b86      	ldr	r3, [pc, #536]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 020f 	bic.w	r2, r3, #15
 8003406:	4984      	ldr	r1, [pc, #528]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0f7      	b.n	8003610 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8089 	beq.w	8003540 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d133      	bne.n	800349e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003436:	4b79      	ldr	r3, [pc, #484]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0e4      	b.n	8003610 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003446:	f000 fa11 	bl	800386c <RCC_GetSysClockFreqFromPLLSource>
 800344a:	4603      	mov	r3, r0
 800344c:	4a74      	ldr	r2, [pc, #464]	; (8003620 <HAL_RCC_ClockConfig+0x248>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d955      	bls.n	80034fe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003452:	4b72      	ldr	r3, [pc, #456]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800345e:	4b6f      	ldr	r3, [pc, #444]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003466:	4a6d      	ldr	r2, [pc, #436]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e044      	b.n	80034fe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d03e      	beq.n	80034fe <HAL_RCC_ClockConfig+0x126>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d13a      	bne.n	80034fe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003488:	4b64      	ldr	r3, [pc, #400]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003490:	4a62      	ldr	r2, [pc, #392]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003496:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e02f      	b.n	80034fe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a6:	4b5d      	ldr	r3, [pc, #372]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0ac      	b.n	8003610 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0a0      	b.n	8003610 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ce:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e098      	b.n	8003610 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80034de:	f000 f8a7 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4a4e      	ldr	r2, [pc, #312]	; (8003620 <HAL_RCC_ClockConfig+0x248>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d909      	bls.n	80034fe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ea:	4b4c      	ldr	r3, [pc, #304]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f2:	4a4a      	ldr	r2, [pc, #296]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4944      	ldr	r1, [pc, #272]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fd fe90 	bl	8001234 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fd fe8c 	bl	8001234 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e070      	b.n	8003610 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b33      	ldr	r3, [pc, #204]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4930      	ldr	r1, [pc, #192]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
 800355e:	e008      	b.n	8003572 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d105      	bne.n	8003572 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a2c      	ldr	r2, [pc, #176]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 800356c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003570:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003572:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d210      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 020f 	bic.w	r2, r3, #15
 8003588:	4923      	ldr	r1, [pc, #140]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e036      	b.n	8003610 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	4918      	ldr	r1, [pc, #96]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4910      	ldr	r1, [pc, #64]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e0:	f000 f826 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	490c      	ldr	r1, [pc, #48]	; (8003624 <HAL_RCC_ClockConfig+0x24c>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <HAL_RCC_ClockConfig+0x250>)
 80035fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_RCC_ClockConfig+0x254>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fdc5 	bl	8001194 <HAL_InitTick>
 800360a:	4603      	mov	r3, r0
 800360c:	73fb      	strb	r3, [r7, #15]

  return status;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40022000 	.word	0x40022000
 800361c:	40021000 	.word	0x40021000
 8003620:	04c4b400 	.word	0x04c4b400
 8003624:	0800ac88 	.word	0x0800ac88
 8003628:	20000000 	.word	0x20000000
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363e:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x34>
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d121      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d11e      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e005      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800368c:	4a2b      	ldr	r2, [pc, #172]	; (800373c <HAL_RCC_GetSysClockFreq+0x10c>)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_GetSysClockFreq+0x110>)
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e004      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_RCC_GetSysClockFreq+0x114>)
 80036b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d134      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d003      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0xac>
 80036d4:	e005      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036d6:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_RCC_GetSysClockFreq+0x110>)
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	e005      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_GetSysClockFreq+0x114>)
 80036de:	617b      	str	r3, [r7, #20]
      break;
 80036e0:	e002      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	617b      	str	r3, [r7, #20]
      break;
 80036e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	3301      	adds	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	fb02 f203 	mul.w	r2, r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	0e5b      	lsrs	r3, r3, #25
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	3301      	adds	r3, #1
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003728:	69bb      	ldr	r3, [r7, #24]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	0800aca0 	.word	0x0800aca0
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200

08003748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCC_GetHCLKFreq+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003764:	f7ff fff0 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4904      	ldr	r1, [pc, #16]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	0800ac98 	.word	0x0800ac98

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003790:	f7ff ffda 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0adb      	lsrs	r3, r3, #11
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	0800ac98 	.word	0x0800ac98

080037b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037d0:	f7ff f8f8 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 80037d4:	6178      	str	r0, [r7, #20]
 80037d6:	e014      	b.n	8003802 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	4b22      	ldr	r3, [pc, #136]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	4a21      	ldr	r2, [pc, #132]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6593      	str	r3, [r2, #88]	; 0x58
 80037e4:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037f0:	f7ff f8e8 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 80037f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003808:	d10b      	bne.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d913      	bls.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2ba0      	cmp	r3, #160	; 0xa0
 8003814:	d902      	bls.n	800381c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003816:	2302      	movs	r3, #2
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e00d      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800381c:	2301      	movs	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	e00a      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b7f      	cmp	r3, #127	; 0x7f
 8003826:	d902      	bls.n	800382e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003828:	2302      	movs	r3, #2
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e004      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d101      	bne.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003834:	2301      	movs	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 020f 	bic.w	r2, r3, #15
 8003840:	4909      	ldr	r1, [pc, #36]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	40022000 	.word	0x40022000

0800386c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d118      	bne.n	80038b4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003882:	4b2a      	ldr	r3, [pc, #168]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e005      	b.n	80038aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038aa:	4a21      	ldr	r2, [pc, #132]	; (8003930 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d003      	beq.n	80038cc <RCC_GetSysClockFreqFromPLLSource+0x60>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d003      	beq.n	80038d2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80038ca:	e005      	b.n	80038d8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80038ce:	613b      	str	r3, [r7, #16]
    break;
 80038d0:	e005      	b.n	80038de <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80038d4:	613b      	str	r3, [r7, #16]
    break;
 80038d6:	e002      	b.n	80038de <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	613b      	str	r3, [r7, #16]
    break;
 80038dc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	3301      	adds	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	fb02 f203 	mul.w	r2, r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0e5b      	lsrs	r3, r3, #25
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	3301      	adds	r3, #1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800391e:	683b      	ldr	r3, [r7, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40021000 	.word	0x40021000
 8003930:	0800aca0 	.word	0x0800aca0
 8003934:	00f42400 	.word	0x00f42400
 8003938:	007a1200 	.word	0x007a1200

0800393c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003944:	2300      	movs	r3, #0
 8003946:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003948:	2300      	movs	r3, #0
 800394a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003954:	2b00      	cmp	r3, #0
 8003956:	d040      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d02a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d825      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d026      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d821      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d006      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d81d      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d010      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800397c:	e018      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800397e:	4b89      	ldr	r3, [pc, #548]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4a88      	ldr	r2, [pc, #544]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800398a:	e015      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fb02 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800399c:	e00c      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3320      	adds	r3, #32
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fbed 	bl	8004184 <RCCEx_PLLSAI2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	74fb      	strb	r3, [r7, #19]
      break;
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80039b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039be:	4b79      	ldr	r3, [pc, #484]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039cc:	4975      	ldr	r1, [pc, #468]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039d4:	e001      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d047      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ee:	d030      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	d82a      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fa:	d02a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a00:	d824      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0c:	d81e      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	d010      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a18:	e018      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4a61      	ldr	r2, [pc, #388]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a26:	e015      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fab4 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a38:	e00c      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3320      	adds	r3, #32
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fb9f 	bl	8004184 <RCCEx_PLLSAI2_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a4a:	e003      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	74fb      	strb	r3, [r7, #19]
      break;
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a5a:	4b52      	ldr	r3, [pc, #328]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	494e      	ldr	r1, [pc, #312]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a70:	e001      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 809f 	beq.w	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a88:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00d      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	4a40      	ldr	r2, [pc, #256]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aaa:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3a      	ldr	r2, [pc, #232]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fbb5 	bl	8001234 <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003acc:	e009      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ace:	f7fd fbb1 	bl	8001234 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d902      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	74fb      	strb	r3, [r7, #19]
        break;
 8003ae0:	e005      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ae2:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ef      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d15b      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003af4:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01f      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d019      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b1e:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b3e:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d016      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fb70 	bl	8001234 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b56:	e00b      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fd fb6c 	bl	8001234 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d902      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b6e:	e006      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ec      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b84:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	74bb      	strb	r3, [r7, #18]
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb0:	7c7b      	ldrb	r3, [r7, #17]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d105      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb6:	4ba0      	ldr	r3, [pc, #640]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	4a9f      	ldr	r2, [pc, #636]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bce:	4b9a      	ldr	r3, [pc, #616]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f023 0203 	bic.w	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	4996      	ldr	r1, [pc, #600]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bf0:	4b91      	ldr	r3, [pc, #580]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f023 020c 	bic.w	r2, r3, #12
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	498e      	ldr	r1, [pc, #568]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c12:	4b89      	ldr	r3, [pc, #548]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	4985      	ldr	r1, [pc, #532]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c34:	4b80      	ldr	r3, [pc, #512]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c42:	497d      	ldr	r1, [pc, #500]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c56:	4b78      	ldr	r3, [pc, #480]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c64:	4974      	ldr	r1, [pc, #464]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c78:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	496c      	ldr	r1, [pc, #432]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c9a:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca8:	4963      	ldr	r1, [pc, #396]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cbc:	4b5e      	ldr	r3, [pc, #376]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cca:	495b      	ldr	r1, [pc, #364]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cde:	4b56      	ldr	r3, [pc, #344]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	4952      	ldr	r1, [pc, #328]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d00:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	494a      	ldr	r1, [pc, #296]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d22:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	4941      	ldr	r1, [pc, #260]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d44:	4b3c      	ldr	r3, [pc, #240]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	4939      	ldr	r1, [pc, #228]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d66:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	4930      	ldr	r1, [pc, #192]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d84:	d106      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d90:	60d3      	str	r3, [r2, #12]
 8003d92:	e011      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f8f9 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d108      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dde:	e012      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003de0:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfe:	490e      	ldr	r1, [pc, #56]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e1a:	60d3      	str	r3, [r2, #12]
 8003e1c:	e020      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e26:	d109      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a02      	ldr	r2, [pc, #8]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	60d3      	str	r3, [r2, #12]
 8003e34:	e014      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f8a5 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d028      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e6c:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7a:	4947      	ldr	r1, [pc, #284]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a41      	ldr	r2, [pc, #260]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
 8003e98:	e011      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea2:	d10c      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f876 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01e      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eca:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eda:	492f      	ldr	r1, [pc, #188]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f851 	bl	8003f9c <RCCEx_PLLSAI1_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f1a:	f023 0204 	bic.w	r2, r3, #4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f24:	491c      	ldr	r1, [pc, #112]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f38:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f3e:	f023 0218 	bic.w	r2, r3, #24
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	4913      	ldr	r1, [pc, #76]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d017      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	490a      	ldr	r1, [pc, #40]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000

08003f9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003faa:	4b72      	ldr	r3, [pc, #456]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0203 	and.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d103      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d142      	bne.n	8004054 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
 8003fd2:	e03f      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d018      	beq.n	800400e <RCCEx_PLLSAI1_Config+0x72>
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d825      	bhi.n	800402c <RCCEx_PLLSAI1_Config+0x90>
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d002      	beq.n	8003fea <RCCEx_PLLSAI1_Config+0x4e>
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d009      	beq.n	8003ffc <RCCEx_PLLSAI1_Config+0x60>
 8003fe8:	e020      	b.n	800402c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fea:	4b62      	ldr	r3, [pc, #392]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11d      	bne.n	8004032 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ffa:	e01a      	b.n	8004032 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ffc:	4b5d      	ldr	r3, [pc, #372]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d116      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400c:	e013      	b.n	8004036 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400e:	4b59      	ldr	r3, [pc, #356]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800401a:	4b56      	ldr	r3, [pc, #344]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800402a:	e006      	b.n	800403a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e004      	b.n	800403c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004032:	bf00      	nop
 8004034:	e002      	b.n	800403c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800403a:	bf00      	nop
    }

    if(status == HAL_OK)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d108      	bne.n	8004054 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4949      	ldr	r1, [pc, #292]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004050:	4313      	orrs	r3, r2
 8004052:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 8086 	bne.w	8004168 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800405c:	4b45      	ldr	r3, [pc, #276]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a44      	ldr	r2, [pc, #272]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004062:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004068:	f7fd f8e4 	bl	8001234 <HAL_GetTick>
 800406c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800406e:	e009      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004070:	f7fd f8e0 	bl	8001234 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d902      	bls.n	8004084 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	73fb      	strb	r3, [r7, #15]
        break;
 8004082:	e005      	b.n	8004090 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004084:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ef      	bne.n	8004070 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d168      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d113      	bne.n	80040c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	4b35      	ldr	r3, [pc, #212]	; (8004178 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6892      	ldr	r2, [r2, #8]
 80040a8:	0211      	lsls	r1, r2, #8
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68d2      	ldr	r2, [r2, #12]
 80040ae:	06d2      	lsls	r2, r2, #27
 80040b0:	4311      	orrs	r1, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6852      	ldr	r2, [r2, #4]
 80040b6:	3a01      	subs	r2, #1
 80040b8:	0112      	lsls	r2, r2, #4
 80040ba:	430a      	orrs	r2, r1
 80040bc:	492d      	ldr	r1, [pc, #180]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
 80040c2:	e02d      	b.n	8004120 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d115      	bne.n	80040f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	4b2b      	ldr	r3, [pc, #172]	; (800417c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6892      	ldr	r2, [r2, #8]
 80040d6:	0211      	lsls	r1, r2, #8
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6912      	ldr	r2, [r2, #16]
 80040dc:	0852      	lsrs	r2, r2, #1
 80040de:	3a01      	subs	r2, #1
 80040e0:	0552      	lsls	r2, r2, #21
 80040e2:	4311      	orrs	r1, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6852      	ldr	r2, [r2, #4]
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	430a      	orrs	r2, r1
 80040ee:	4921      	ldr	r1, [pc, #132]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	610b      	str	r3, [r1, #16]
 80040f4:	e014      	b.n	8004120 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f6:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6892      	ldr	r2, [r2, #8]
 8004102:	0211      	lsls	r1, r2, #8
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6952      	ldr	r2, [r2, #20]
 8004108:	0852      	lsrs	r2, r2, #1
 800410a:	3a01      	subs	r2, #1
 800410c:	0652      	lsls	r2, r2, #25
 800410e:	4311      	orrs	r1, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6852      	ldr	r2, [r2, #4]
 8004114:	3a01      	subs	r2, #1
 8004116:	0112      	lsls	r2, r2, #4
 8004118:	430a      	orrs	r2, r1
 800411a:	4916      	ldr	r1, [pc, #88]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800411c:	4313      	orrs	r3, r2
 800411e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd f882 	bl	8001234 <HAL_GetTick>
 8004130:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004132:	e009      	b.n	8004148 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004134:	f7fd f87e 	bl	8001234 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d902      	bls.n	8004148 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	73fb      	strb	r3, [r7, #15]
          break;
 8004146:	e005      	b.n	8004154 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ef      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4904      	ldr	r1, [pc, #16]	; (8004174 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004164:	4313      	orrs	r3, r2
 8004166:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	07ff800f 	.word	0x07ff800f
 800417c:	ff9f800f 	.word	0xff9f800f
 8004180:	f9ff800f 	.word	0xf9ff800f

08004184 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004192:	4b72      	ldr	r3, [pc, #456]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800419e:	4b6f      	ldr	r3, [pc, #444]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0203 	and.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d103      	bne.n	80041b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
       ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d142      	bne.n	800423c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e03f      	b.n	800423c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d018      	beq.n	80041f6 <RCCEx_PLLSAI2_Config+0x72>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d825      	bhi.n	8004214 <RCCEx_PLLSAI2_Config+0x90>
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d002      	beq.n	80041d2 <RCCEx_PLLSAI2_Config+0x4e>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d009      	beq.n	80041e4 <RCCEx_PLLSAI2_Config+0x60>
 80041d0:	e020      	b.n	8004214 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041d2:	4b62      	ldr	r3, [pc, #392]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11d      	bne.n	800421a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e2:	e01a      	b.n	800421a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e4:	4b5d      	ldr	r3, [pc, #372]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e013      	b.n	800421e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f6:	4b59      	ldr	r3, [pc, #356]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004202:	4b56      	ldr	r3, [pc, #344]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004212:	e006      	b.n	8004222 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e004      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004222:	bf00      	nop
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800422a:	4b4c      	ldr	r3, [pc, #304]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4949      	ldr	r1, [pc, #292]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 8086 	bne.w	8004350 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a44      	ldr	r2, [pc, #272]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fc fff0 	bl	8001234 <HAL_GetTick>
 8004254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004256:	e009      	b.n	800426c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004258:	f7fc ffec 	bl	8001234 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d902      	bls.n	800426c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	73fb      	strb	r3, [r7, #15]
        break;
 800426a:	e005      	b.n	8004278 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800426c:	4b3b      	ldr	r3, [pc, #236]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ef      	bne.n	8004258 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d168      	bne.n	8004350 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d113      	bne.n	80042ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <RCCEx_PLLSAI2_Config+0x1dc>)
 800428a:	4013      	ands	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6892      	ldr	r2, [r2, #8]
 8004290:	0211      	lsls	r1, r2, #8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68d2      	ldr	r2, [r2, #12]
 8004296:	06d2      	lsls	r2, r2, #27
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6852      	ldr	r2, [r2, #4]
 800429e:	3a01      	subs	r2, #1
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	430a      	orrs	r2, r1
 80042a4:	492d      	ldr	r1, [pc, #180]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	614b      	str	r3, [r1, #20]
 80042aa:	e02d      	b.n	8004308 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d115      	bne.n	80042de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <RCCEx_PLLSAI2_Config+0x1e0>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6892      	ldr	r2, [r2, #8]
 80042be:	0211      	lsls	r1, r2, #8
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6912      	ldr	r2, [r2, #16]
 80042c4:	0852      	lsrs	r2, r2, #1
 80042c6:	3a01      	subs	r2, #1
 80042c8:	0552      	lsls	r2, r2, #21
 80042ca:	4311      	orrs	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	3a01      	subs	r2, #1
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	430a      	orrs	r2, r1
 80042d6:	4921      	ldr	r1, [pc, #132]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	614b      	str	r3, [r1, #20]
 80042dc:	e014      	b.n	8004308 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042de:	4b1f      	ldr	r3, [pc, #124]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <RCCEx_PLLSAI2_Config+0x1e4>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6892      	ldr	r2, [r2, #8]
 80042ea:	0211      	lsls	r1, r2, #8
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6952      	ldr	r2, [r2, #20]
 80042f0:	0852      	lsrs	r2, r2, #1
 80042f2:	3a01      	subs	r2, #1
 80042f4:	0652      	lsls	r2, r2, #25
 80042f6:	4311      	orrs	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6852      	ldr	r2, [r2, #4]
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	430a      	orrs	r2, r1
 8004302:	4916      	ldr	r1, [pc, #88]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a13      	ldr	r2, [pc, #76]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fc ff8e 	bl	8001234 <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800431a:	e009      	b.n	8004330 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800431c:	f7fc ff8a 	bl	8001234 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	73fb      	strb	r3, [r7, #15]
          break;
 800432e:	e005      	b.n	800433c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ef      	beq.n	800431c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	4904      	ldr	r1, [pc, #16]	; (800435c <RCCEx_PLLSAI2_Config+0x1d8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	07ff800f 	.word	0x07ff800f
 8004364:	ff9f800f 	.word	0xff9f800f
 8004368:	f9ff800f 	.word	0xf9ff800f

0800436c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e095      	b.n	80044aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d108      	bne.n	8004398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438e:	d009      	beq.n	80043a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	61da      	str	r2, [r3, #28]
 8004396:	e005      	b.n	80043a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc fe00 	bl	8000fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043e4:	d902      	bls.n	80043ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e002      	b.n	80043f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043fa:	d007      	beq.n	800440c <HAL_SPI_Init+0xa0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004404:	d002      	beq.n	800440c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	ea42 0103 	orr.w	r1, r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	0c1b      	lsrs	r3, r3, #16
 8004468:	f003 0204 	and.w	r2, r3, #4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004488:	ea42 0103 	orr.w	r1, r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b088      	sub	sp, #32
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_SPI_Transmit+0x22>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e158      	b.n	8004786 <HAL_SPI_Transmit+0x2d4>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044dc:	f7fc feaa 	bl	8001234 <HAL_GetTick>
 80044e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
 80044f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044f6:	e13d      	b.n	8004774 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Transmit+0x52>
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004508:	e134      	b.n	8004774 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004554:	d10f      	bne.n	8004576 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004574:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d007      	beq.n	8004594 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800459c:	d94b      	bls.n	8004636 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_Transmit+0xfa>
 80045a6:	8afb      	ldrh	r3, [r7, #22]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d13e      	bne.n	800462a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045d0:	e02b      	b.n	800462a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d112      	bne.n	8004606 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004604:	e011      	b.n	800462a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004606:	f7fc fe15 	bl	8001234 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d803      	bhi.n	800461e <HAL_SPI_Transmit+0x16c>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d102      	bne.n	8004624 <HAL_SPI_Transmit+0x172>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004628:	e0a4      	b.n	8004774 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ce      	bne.n	80045d2 <HAL_SPI_Transmit+0x120>
 8004634:	e07c      	b.n	8004730 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_SPI_Transmit+0x192>
 800463e:	8afb      	ldrh	r3, [r7, #22]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d170      	bne.n	8004726 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d912      	bls.n	8004674 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b02      	subs	r3, #2
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004672:	e058      	b.n	8004726 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800469a:	e044      	b.n	8004726 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d12b      	bne.n	8004702 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d912      	bls.n	80046da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	1c9a      	adds	r2, r3, #2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b02      	subs	r3, #2
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046d8:	e025      	b.n	8004726 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004700:	e011      	b.n	8004726 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004702:	f7fc fd97 	bl	8001234 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d803      	bhi.n	800471a <HAL_SPI_Transmit+0x268>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d102      	bne.n	8004720 <HAL_SPI_Transmit+0x26e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004724:	e026      	b.n	8004774 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1b5      	bne.n	800469c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fb69 	bl	8004e0c <SPI_EndRxTxTransaction>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e000      	b.n	8004774 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004772:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004784:	7ffb      	ldrb	r3, [r7, #31]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b08a      	sub	sp, #40	; 0x28
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800479c:	2301      	movs	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_SPI_TransmitReceive+0x26>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e1fb      	b.n	8004bac <HAL_SPI_TransmitReceive+0x41e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047bc:	f7fc fd3a 	bl	8001234 <HAL_GetTick>
 80047c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047d4:	887b      	ldrh	r3, [r7, #2]
 80047d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047d8:	7efb      	ldrb	r3, [r7, #27]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d00e      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x6e>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e4:	d106      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x66>
 80047ee:	7efb      	ldrb	r3, [r7, #27]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d003      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047fa:	e1cd      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_SPI_TransmitReceive+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_SPI_TransmitReceive+0x80>
 8004808:	887b      	ldrh	r3, [r7, #2]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004814:	e1c0      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b04      	cmp	r3, #4
 8004820:	d003      	beq.n	800482a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2205      	movs	r2, #5
 8004826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	887a      	ldrh	r2, [r7, #2]
 800483a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	887a      	ldrh	r2, [r7, #2]
 8004842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	887a      	ldrh	r2, [r7, #2]
 8004856:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800486c:	d802      	bhi.n	8004874 <HAL_SPI_TransmitReceive+0xe6>
 800486e:	8a3b      	ldrh	r3, [r7, #16]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d908      	bls.n	8004886 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	e007      	b.n	8004896 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004894:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d007      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048bc:	d97c      	bls.n	80049b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x13e>
 80048c6:	8a7b      	ldrh	r3, [r7, #18]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d169      	bne.n	80049a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	881a      	ldrh	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	1c9a      	adds	r2, r3, #2
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f0:	e056      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d11b      	bne.n	8004938 <HAL_SPI_TransmitReceive+0x1aa>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d016      	beq.n	8004938 <HAL_SPI_TransmitReceive+0x1aa>
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	2b01      	cmp	r3, #1
 800490e:	d113      	bne.n	8004938 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	881a      	ldrh	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	1c9a      	adds	r2, r3, #2
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d11c      	bne.n	8004980 <HAL_SPI_TransmitReceive+0x1f2>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	b292      	uxth	r2, r2
 800495e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800497c:	2301      	movs	r3, #1
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004980:	f7fc fc58 	bl	8001234 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498c:	429a      	cmp	r2, r3
 800498e:	d807      	bhi.n	80049a0 <HAL_SPI_TransmitReceive+0x212>
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d003      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800499e:	e0fb      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1a3      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x164>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d19d      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x164>
 80049b6:	e0df      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x23a>
 80049c0:	8a7b      	ldrh	r3, [r7, #18]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	f040 80cb 	bne.w	8004b5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d912      	bls.n	80049f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b02      	subs	r3, #2
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049f6:	e0b2      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a1e:	e09e      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d134      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x30a>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02f      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x30a>
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d12c      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d912      	bls.n	8004a6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	881a      	ldrh	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	1c9a      	adds	r2, r3, #2
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b02      	subs	r3, #2
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a6c:	e012      	b.n	8004a94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	7812      	ldrb	r2, [r2, #0]
 8004a7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d148      	bne.n	8004b38 <HAL_SPI_TransmitReceive+0x3aa>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d042      	beq.n	8004b38 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d923      	bls.n	8004b06 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	b292      	uxth	r2, r2
 8004aca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b02      	subs	r3, #2
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d81f      	bhi.n	8004b34 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	e016      	b.n	8004b34 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f103 020c 	add.w	r2, r3, #12
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b34:	2301      	movs	r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b38:	f7fc fb7c 	bl	8001234 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d803      	bhi.n	8004b50 <HAL_SPI_TransmitReceive+0x3c2>
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d102      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x3c8>
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b5c:	e01c      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f47f af5b 	bne.w	8004a20 <HAL_SPI_TransmitReceive+0x292>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f47f af54 	bne.w	8004a20 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f945 	bl	8004e0c <SPI_EndRxTxTransaction>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
 8004b94:	e000      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004b96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3728      	adds	r7, #40	; 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bc2:	b2db      	uxtb	r3, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004be0:	f7fc fb28 	bl	8001234 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	4413      	add	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bf0:	f7fc fb20 	bl	8001234 <HAL_GetTick>
 8004bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bf6:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	015b      	lsls	r3, r3, #5
 8004bfc:	0d1b      	lsrs	r3, r3, #20
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c06:	e054      	b.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d050      	beq.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c10:	f7fc fb10 	bl	8001234 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d902      	bls.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d13d      	bne.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3e:	d111      	bne.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c48:	d004      	beq.n	8004c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c52:	d107      	bne.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6c:	d10f      	bne.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e017      	b.n	8004cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d19b      	bne.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000000 	.word	0x20000000

08004ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	; 0x28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cf2:	f7fc fa9f 	bl	8001234 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	4413      	add	r3, r2
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004d02:	f7fc fa97 	bl	8001234 <HAL_GetTick>
 8004d06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d10:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	00da      	lsls	r2, r3, #3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	0d1b      	lsrs	r3, r3, #20
 8004d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d28:	e060      	b.n	8004dec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d30:	d107      	bne.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d050      	beq.n	8004dec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d4a:	f7fc fa73 	bl	8001234 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d902      	bls.n	8004d60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d13d      	bne.n	8004ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d78:	d111      	bne.n	8004d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d82:	d004      	beq.n	8004d8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d107      	bne.n	8004d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da6:	d10f      	bne.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e010      	b.n	8004dfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d196      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000000 	.word	0x20000000

08004e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff ff5b 	bl	8004ce0 <SPI_WaitFifoStateUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e027      	b.n	8004e90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7ff fec0 	bl	8004bd0 <SPI_WaitFlagStateUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	f043 0220 	orr.w	r2, r3, #32
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e014      	b.n	8004e90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff ff34 	bl	8004ce0 <SPI_WaitFifoStateUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e000      	b.n	8004e90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e042      	b.n	8004f30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fb ffdb 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2224      	movs	r2, #36	; 0x24
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f82c 	bl	8004f38 <UART_SetConfig>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e022      	b.n	8004f30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fae8 	bl	80054c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fb6f 	bl	800560c <UART_CheckIdleState>
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4bb1      	ldr	r3, [pc, #708]	; (8005228 <UART_SetConfig+0x2f0>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	69f9      	ldr	r1, [r7, #28]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4aa6      	ldr	r2, [pc, #664]	; (800522c <UART_SetConfig+0x2f4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004faa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	69f9      	ldr	r1, [r7, #28]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f023 010f 	bic.w	r1, r3, #15
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a97      	ldr	r2, [pc, #604]	; (8005230 <UART_SetConfig+0x2f8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d120      	bne.n	800501a <UART_SetConfig+0xe2>
 8004fd8:	4b96      	ldr	r3, [pc, #600]	; (8005234 <UART_SetConfig+0x2fc>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d816      	bhi.n	8005014 <UART_SetConfig+0xdc>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <UART_SetConfig+0xb4>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08004ffd 	.word	0x08004ffd
 8004ff0:	08005009 	.word	0x08005009
 8004ff4:	08005003 	.word	0x08005003
 8004ff8:	0800500f 	.word	0x0800500f
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	76fb      	strb	r3, [r7, #27]
 8005000:	e0e7      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005002:	2302      	movs	r3, #2
 8005004:	76fb      	strb	r3, [r7, #27]
 8005006:	e0e4      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005008:	2304      	movs	r3, #4
 800500a:	76fb      	strb	r3, [r7, #27]
 800500c:	e0e1      	b.n	80051d2 <UART_SetConfig+0x29a>
 800500e:	2308      	movs	r3, #8
 8005010:	76fb      	strb	r3, [r7, #27]
 8005012:	e0de      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005014:	2310      	movs	r3, #16
 8005016:	76fb      	strb	r3, [r7, #27]
 8005018:	e0db      	b.n	80051d2 <UART_SetConfig+0x29a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a86      	ldr	r2, [pc, #536]	; (8005238 <UART_SetConfig+0x300>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d132      	bne.n	800508a <UART_SetConfig+0x152>
 8005024:	4b83      	ldr	r3, [pc, #524]	; (8005234 <UART_SetConfig+0x2fc>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b0c      	cmp	r3, #12
 8005030:	d828      	bhi.n	8005084 <UART_SetConfig+0x14c>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <UART_SetConfig+0x100>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	0800506d 	.word	0x0800506d
 800503c:	08005085 	.word	0x08005085
 8005040:	08005085 	.word	0x08005085
 8005044:	08005085 	.word	0x08005085
 8005048:	08005079 	.word	0x08005079
 800504c:	08005085 	.word	0x08005085
 8005050:	08005085 	.word	0x08005085
 8005054:	08005085 	.word	0x08005085
 8005058:	08005073 	.word	0x08005073
 800505c:	08005085 	.word	0x08005085
 8005060:	08005085 	.word	0x08005085
 8005064:	08005085 	.word	0x08005085
 8005068:	0800507f 	.word	0x0800507f
 800506c:	2300      	movs	r3, #0
 800506e:	76fb      	strb	r3, [r7, #27]
 8005070:	e0af      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005072:	2302      	movs	r3, #2
 8005074:	76fb      	strb	r3, [r7, #27]
 8005076:	e0ac      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005078:	2304      	movs	r3, #4
 800507a:	76fb      	strb	r3, [r7, #27]
 800507c:	e0a9      	b.n	80051d2 <UART_SetConfig+0x29a>
 800507e:	2308      	movs	r3, #8
 8005080:	76fb      	strb	r3, [r7, #27]
 8005082:	e0a6      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005084:	2310      	movs	r3, #16
 8005086:	76fb      	strb	r3, [r7, #27]
 8005088:	e0a3      	b.n	80051d2 <UART_SetConfig+0x29a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a6b      	ldr	r2, [pc, #428]	; (800523c <UART_SetConfig+0x304>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d120      	bne.n	80050d6 <UART_SetConfig+0x19e>
 8005094:	4b67      	ldr	r3, [pc, #412]	; (8005234 <UART_SetConfig+0x2fc>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800509e:	2b30      	cmp	r3, #48	; 0x30
 80050a0:	d013      	beq.n	80050ca <UART_SetConfig+0x192>
 80050a2:	2b30      	cmp	r3, #48	; 0x30
 80050a4:	d814      	bhi.n	80050d0 <UART_SetConfig+0x198>
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d009      	beq.n	80050be <UART_SetConfig+0x186>
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d810      	bhi.n	80050d0 <UART_SetConfig+0x198>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <UART_SetConfig+0x180>
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d006      	beq.n	80050c4 <UART_SetConfig+0x18c>
 80050b6:	e00b      	b.n	80050d0 <UART_SetConfig+0x198>
 80050b8:	2300      	movs	r3, #0
 80050ba:	76fb      	strb	r3, [r7, #27]
 80050bc:	e089      	b.n	80051d2 <UART_SetConfig+0x29a>
 80050be:	2302      	movs	r3, #2
 80050c0:	76fb      	strb	r3, [r7, #27]
 80050c2:	e086      	b.n	80051d2 <UART_SetConfig+0x29a>
 80050c4:	2304      	movs	r3, #4
 80050c6:	76fb      	strb	r3, [r7, #27]
 80050c8:	e083      	b.n	80051d2 <UART_SetConfig+0x29a>
 80050ca:	2308      	movs	r3, #8
 80050cc:	76fb      	strb	r3, [r7, #27]
 80050ce:	e080      	b.n	80051d2 <UART_SetConfig+0x29a>
 80050d0:	2310      	movs	r3, #16
 80050d2:	76fb      	strb	r3, [r7, #27]
 80050d4:	e07d      	b.n	80051d2 <UART_SetConfig+0x29a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a59      	ldr	r2, [pc, #356]	; (8005240 <UART_SetConfig+0x308>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d120      	bne.n	8005122 <UART_SetConfig+0x1ea>
 80050e0:	4b54      	ldr	r3, [pc, #336]	; (8005234 <UART_SetConfig+0x2fc>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050ea:	2bc0      	cmp	r3, #192	; 0xc0
 80050ec:	d013      	beq.n	8005116 <UART_SetConfig+0x1de>
 80050ee:	2bc0      	cmp	r3, #192	; 0xc0
 80050f0:	d814      	bhi.n	800511c <UART_SetConfig+0x1e4>
 80050f2:	2b80      	cmp	r3, #128	; 0x80
 80050f4:	d009      	beq.n	800510a <UART_SetConfig+0x1d2>
 80050f6:	2b80      	cmp	r3, #128	; 0x80
 80050f8:	d810      	bhi.n	800511c <UART_SetConfig+0x1e4>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <UART_SetConfig+0x1cc>
 80050fe:	2b40      	cmp	r3, #64	; 0x40
 8005100:	d006      	beq.n	8005110 <UART_SetConfig+0x1d8>
 8005102:	e00b      	b.n	800511c <UART_SetConfig+0x1e4>
 8005104:	2300      	movs	r3, #0
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	e063      	b.n	80051d2 <UART_SetConfig+0x29a>
 800510a:	2302      	movs	r3, #2
 800510c:	76fb      	strb	r3, [r7, #27]
 800510e:	e060      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005110:	2304      	movs	r3, #4
 8005112:	76fb      	strb	r3, [r7, #27]
 8005114:	e05d      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005116:	2308      	movs	r3, #8
 8005118:	76fb      	strb	r3, [r7, #27]
 800511a:	e05a      	b.n	80051d2 <UART_SetConfig+0x29a>
 800511c:	2310      	movs	r3, #16
 800511e:	76fb      	strb	r3, [r7, #27]
 8005120:	e057      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a47      	ldr	r2, [pc, #284]	; (8005244 <UART_SetConfig+0x30c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d125      	bne.n	8005178 <UART_SetConfig+0x240>
 800512c:	4b41      	ldr	r3, [pc, #260]	; (8005234 <UART_SetConfig+0x2fc>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513a:	d017      	beq.n	800516c <UART_SetConfig+0x234>
 800513c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005140:	d817      	bhi.n	8005172 <UART_SetConfig+0x23a>
 8005142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005146:	d00b      	beq.n	8005160 <UART_SetConfig+0x228>
 8005148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514c:	d811      	bhi.n	8005172 <UART_SetConfig+0x23a>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <UART_SetConfig+0x222>
 8005152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005156:	d006      	beq.n	8005166 <UART_SetConfig+0x22e>
 8005158:	e00b      	b.n	8005172 <UART_SetConfig+0x23a>
 800515a:	2300      	movs	r3, #0
 800515c:	76fb      	strb	r3, [r7, #27]
 800515e:	e038      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005160:	2302      	movs	r3, #2
 8005162:	76fb      	strb	r3, [r7, #27]
 8005164:	e035      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005166:	2304      	movs	r3, #4
 8005168:	76fb      	strb	r3, [r7, #27]
 800516a:	e032      	b.n	80051d2 <UART_SetConfig+0x29a>
 800516c:	2308      	movs	r3, #8
 800516e:	76fb      	strb	r3, [r7, #27]
 8005170:	e02f      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005172:	2310      	movs	r3, #16
 8005174:	76fb      	strb	r3, [r7, #27]
 8005176:	e02c      	b.n	80051d2 <UART_SetConfig+0x29a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2b      	ldr	r2, [pc, #172]	; (800522c <UART_SetConfig+0x2f4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d125      	bne.n	80051ce <UART_SetConfig+0x296>
 8005182:	4b2c      	ldr	r3, [pc, #176]	; (8005234 <UART_SetConfig+0x2fc>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800518c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005190:	d017      	beq.n	80051c2 <UART_SetConfig+0x28a>
 8005192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005196:	d817      	bhi.n	80051c8 <UART_SetConfig+0x290>
 8005198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519c:	d00b      	beq.n	80051b6 <UART_SetConfig+0x27e>
 800519e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a2:	d811      	bhi.n	80051c8 <UART_SetConfig+0x290>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <UART_SetConfig+0x278>
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ac:	d006      	beq.n	80051bc <UART_SetConfig+0x284>
 80051ae:	e00b      	b.n	80051c8 <UART_SetConfig+0x290>
 80051b0:	2300      	movs	r3, #0
 80051b2:	76fb      	strb	r3, [r7, #27]
 80051b4:	e00d      	b.n	80051d2 <UART_SetConfig+0x29a>
 80051b6:	2302      	movs	r3, #2
 80051b8:	76fb      	strb	r3, [r7, #27]
 80051ba:	e00a      	b.n	80051d2 <UART_SetConfig+0x29a>
 80051bc:	2304      	movs	r3, #4
 80051be:	76fb      	strb	r3, [r7, #27]
 80051c0:	e007      	b.n	80051d2 <UART_SetConfig+0x29a>
 80051c2:	2308      	movs	r3, #8
 80051c4:	76fb      	strb	r3, [r7, #27]
 80051c6:	e004      	b.n	80051d2 <UART_SetConfig+0x29a>
 80051c8:	2310      	movs	r3, #16
 80051ca:	76fb      	strb	r3, [r7, #27]
 80051cc:	e001      	b.n	80051d2 <UART_SetConfig+0x29a>
 80051ce:	2310      	movs	r3, #16
 80051d0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <UART_SetConfig+0x2f4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	f040 809f 	bne.w	800531c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051de:	7efb      	ldrb	r3, [r7, #27]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d837      	bhi.n	8005254 <UART_SetConfig+0x31c>
 80051e4:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0x2b4>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005255 	.word	0x08005255
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005255 	.word	0x08005255
 80051fc:	0800521f 	.word	0x0800521f
 8005200:	08005255 	.word	0x08005255
 8005204:	08005255 	.word	0x08005255
 8005208:	08005255 	.word	0x08005255
 800520c:	0800524d 	.word	0x0800524d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7fe faa6 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8005214:	6178      	str	r0, [r7, #20]
        break;
 8005216:	e022      	b.n	800525e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <UART_SetConfig+0x310>)
 800521a:	617b      	str	r3, [r7, #20]
        break;
 800521c:	e01f      	b.n	800525e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fe fa07 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8005222:	6178      	str	r0, [r7, #20]
        break;
 8005224:	e01b      	b.n	800525e <UART_SetConfig+0x326>
 8005226:	bf00      	nop
 8005228:	cfff69f3 	.word	0xcfff69f3
 800522c:	40008000 	.word	0x40008000
 8005230:	40013800 	.word	0x40013800
 8005234:	40021000 	.word	0x40021000
 8005238:	40004400 	.word	0x40004400
 800523c:	40004800 	.word	0x40004800
 8005240:	40004c00 	.word	0x40004c00
 8005244:	40005000 	.word	0x40005000
 8005248:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005250:	617b      	str	r3, [r7, #20]
        break;
 8005252:	e004      	b.n	800525e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	76bb      	strb	r3, [r7, #26]
        break;
 800525c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8119 	beq.w	8005498 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	4a95      	ldr	r2, [pc, #596]	; (80054c0 <UART_SetConfig+0x588>)
 800526c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005270:	461a      	mov	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	fbb3 f3f2 	udiv	r3, r3, r2
 8005278:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	d305      	bcc.n	8005296 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d902      	bls.n	800529c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	76bb      	strb	r3, [r7, #26]
 800529a:	e0fd      	b.n	8005498 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4618      	mov	r0, r3
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	4a85      	ldr	r2, [pc, #532]	; (80054c0 <UART_SetConfig+0x588>)
 80052aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	f7fa ffa2 	bl	80001fc <__aeabi_uldivmod>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	020b      	lsls	r3, r1, #8
 80052ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052ce:	0202      	lsls	r2, r0, #8
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	6849      	ldr	r1, [r1, #4]
 80052d4:	0849      	lsrs	r1, r1, #1
 80052d6:	4608      	mov	r0, r1
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	1814      	adds	r4, r2, r0
 80052de:	eb43 0501 	adc.w	r5, r3, r1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fa ff84 	bl	80001fc <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4613      	mov	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005302:	d308      	bcc.n	8005316 <UART_SetConfig+0x3de>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530a:	d204      	bcs.n	8005316 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	e0c0      	b.n	8005498 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	76bb      	strb	r3, [r7, #26]
 800531a:	e0bd      	b.n	8005498 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005324:	d164      	bne.n	80053f0 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005326:	7efb      	ldrb	r3, [r7, #27]
 8005328:	2b08      	cmp	r3, #8
 800532a:	d828      	bhi.n	800537e <UART_SetConfig+0x446>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0x3fc>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005359 	.word	0x08005359
 8005338:	08005361 	.word	0x08005361
 800533c:	08005369 	.word	0x08005369
 8005340:	0800537f 	.word	0x0800537f
 8005344:	0800536f 	.word	0x0800536f
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800537f 	.word	0x0800537f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005358:	f7fe fa02 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 800535c:	6178      	str	r0, [r7, #20]
        break;
 800535e:	e013      	b.n	8005388 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fe fa14 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8005364:	6178      	str	r0, [r7, #20]
        break;
 8005366:	e00f      	b.n	8005388 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b56      	ldr	r3, [pc, #344]	; (80054c4 <UART_SetConfig+0x58c>)
 800536a:	617b      	str	r3, [r7, #20]
        break;
 800536c:	e00c      	b.n	8005388 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fe f95f 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8005372:	6178      	str	r0, [r7, #20]
        break;
 8005374:	e008      	b.n	8005388 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537a:	617b      	str	r3, [r7, #20]
        break;
 800537c:	e004      	b.n	8005388 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	76bb      	strb	r3, [r7, #26]
        break;
 8005386:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8084 	beq.w	8005498 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	4a4a      	ldr	r2, [pc, #296]	; (80054c0 <UART_SetConfig+0x588>)
 8005396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539a:	461a      	mov	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	fbb3 f3f2 	udiv	r3, r3, r2
 80053a2:	005a      	lsls	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	441a      	add	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b0f      	cmp	r3, #15
 80053ba:	d916      	bls.n	80053ea <UART_SetConfig+0x4b2>
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c2:	d212      	bcs.n	80053ea <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f023 030f 	bic.w	r3, r3, #15
 80053cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	b29a      	uxth	r2, r3
 80053da:	89fb      	ldrh	r3, [r7, #14]
 80053dc:	4313      	orrs	r3, r2
 80053de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	89fa      	ldrh	r2, [r7, #14]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	e056      	b.n	8005498 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	76bb      	strb	r3, [r7, #26]
 80053ee:	e053      	b.n	8005498 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053f0:	7efb      	ldrb	r3, [r7, #27]
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d827      	bhi.n	8005446 <UART_SetConfig+0x50e>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x4c4>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	08005447 	.word	0x08005447
 800540c:	08005437 	.word	0x08005437
 8005410:	08005447 	.word	0x08005447
 8005414:	08005447 	.word	0x08005447
 8005418:	08005447 	.word	0x08005447
 800541c:	0800543f 	.word	0x0800543f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fe f99e 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8005424:	6178      	str	r0, [r7, #20]
        break;
 8005426:	e013      	b.n	8005450 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe f9b0 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 800542c:	6178      	str	r0, [r7, #20]
        break;
 800542e:	e00f      	b.n	8005450 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005430:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <UART_SetConfig+0x58c>)
 8005432:	617b      	str	r3, [r7, #20]
        break;
 8005434:	e00c      	b.n	8005450 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7fe f8fb 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 800543a:	6178      	str	r0, [r7, #20]
        break;
 800543c:	e008      	b.n	8005450 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005442:	617b      	str	r3, [r7, #20]
        break;
 8005444:	e004      	b.n	8005450 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	76bb      	strb	r3, [r7, #26]
        break;
 800544e:	bf00      	nop
    }

    if (pclk != 0U)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <UART_SetConfig+0x588>)
 800545c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005460:	461a      	mov	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	fbb3 f2f2 	udiv	r2, r3, r2
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	441a      	add	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	2b0f      	cmp	r3, #15
 800547e:	d909      	bls.n	8005494 <UART_SetConfig+0x55c>
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005486:	d205      	bcs.n	8005494 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	e001      	b.n	8005498 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80054b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bdb0      	pop	{r4, r5, r7, pc}
 80054be:	bf00      	nop
 80054c0:	0800acd0 	.word	0x0800acd0
 80054c4:	00f42400 	.word	0x00f42400

080054c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01a      	beq.n	80055de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c6:	d10a      	bne.n	80055de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800561c:	f7fb fe0a 	bl	8001234 <HAL_GetTick>
 8005620:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b08      	cmp	r3, #8
 800562e:	d10e      	bne.n	800564e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f82f 	bl	80056a2 <UART_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e025      	b.n	800569a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d10e      	bne.n	800567a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f819 	bl	80056a2 <UART_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e00f      	b.n	800569a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b09c      	sub	sp, #112	; 0x70
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b2:	e0a9      	b.n	8005808 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	f000 80a5 	beq.w	8005808 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056be:	f7fb fdb9 	bl	8001234 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d302      	bcc.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80056ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d140      	bne.n	8005756 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056e8:	667b      	str	r3, [r7, #100]	; 0x64
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e6      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	663b      	str	r3, [r7, #96]	; 0x60
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005726:	64ba      	str	r2, [r7, #72]	; 0x48
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800572c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e5      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e069      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d051      	beq.n	8005808 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800576e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005772:	d149      	bne.n	8005808 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800577c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
 800579e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	613b      	str	r3, [r7, #16]
   return(result);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3308      	adds	r3, #8
 80057ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057d0:	623a      	str	r2, [r7, #32]
 80057d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	69f9      	ldr	r1, [r7, #28]
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e010      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69da      	ldr	r2, [r3, #28]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4013      	ands	r3, r2
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	429a      	cmp	r2, r3
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	429a      	cmp	r2, r3
 8005824:	f43f af46 	beq.w	80056b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3770      	adds	r7, #112	; 0x70
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UARTEx_DisableFifoMode+0x16>
 8005844:	2302      	movs	r3, #2
 8005846:	e027      	b.n	8005898 <HAL_UARTEx_DisableFifoMode+0x66>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	; 0x24
 8005854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005876:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e02d      	b.n	8005918 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f84f 	bl	800599c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005934:	2302      	movs	r3, #2
 8005936:	e02d      	b.n	8005994 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2224      	movs	r2, #36	; 0x24
 8005944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f811 	bl	800599c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d108      	bne.n	80059be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059bc:	e031      	b.n	8005a22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059be:	2308      	movs	r3, #8
 80059c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059c2:	2308      	movs	r3, #8
 80059c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	0e5b      	lsrs	r3, r3, #25
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	0f5b      	lsrs	r3, r3, #29
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	7b3a      	ldrb	r2, [r7, #12]
 80059ea:	4911      	ldr	r1, [pc, #68]	; (8005a30 <UARTEx_SetNbDataToProcess+0x94>)
 80059ec:	5c8a      	ldrb	r2, [r1, r2]
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059f2:	7b3a      	ldrb	r2, [r7, #12]
 80059f4:	490f      	ldr	r1, [pc, #60]	; (8005a34 <UARTEx_SetNbDataToProcess+0x98>)
 80059f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	7b7a      	ldrb	r2, [r7, #13]
 8005a08:	4909      	ldr	r1, [pc, #36]	; (8005a30 <UARTEx_SetNbDataToProcess+0x94>)
 8005a0a:	5c8a      	ldrb	r2, [r1, r2]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a10:	7b7a      	ldrb	r2, [r7, #13]
 8005a12:	4908      	ldr	r1, [pc, #32]	; (8005a34 <UARTEx_SetNbDataToProcess+0x98>)
 8005a14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a16:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	0800ace8 	.word	0x0800ace8
 8005a34:	0800acf0 	.word	0x0800acf0

08005a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a38:	b084      	sub	sp, #16
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	f107 001c 	add.w	r0, r7, #28
 8005a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fa40 	bl	8006edc <USB_CoreReset>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
 8005a72:	e005      	b.n	8005a80 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a8c:	b004      	add	sp, #16
 8005a8e:	4770      	bx	lr

08005a90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d165      	bne.n	8005b70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a3e      	ldr	r2, [pc, #248]	; (8005ba0 <USB_SetTurnaroundTime+0x110>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d906      	bls.n	8005aba <USB_SetTurnaroundTime+0x2a>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4a3d      	ldr	r2, [pc, #244]	; (8005ba4 <USB_SetTurnaroundTime+0x114>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d202      	bcs.n	8005aba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ab4:	230f      	movs	r3, #15
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e05c      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4a39      	ldr	r2, [pc, #228]	; (8005ba4 <USB_SetTurnaroundTime+0x114>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d306      	bcc.n	8005ad0 <USB_SetTurnaroundTime+0x40>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4a38      	ldr	r2, [pc, #224]	; (8005ba8 <USB_SetTurnaroundTime+0x118>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d202      	bcs.n	8005ad0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005aca:	230e      	movs	r3, #14
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e051      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4a35      	ldr	r2, [pc, #212]	; (8005ba8 <USB_SetTurnaroundTime+0x118>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d306      	bcc.n	8005ae6 <USB_SetTurnaroundTime+0x56>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4a34      	ldr	r2, [pc, #208]	; (8005bac <USB_SetTurnaroundTime+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d202      	bcs.n	8005ae6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ae0:	230d      	movs	r3, #13
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e046      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4a30      	ldr	r2, [pc, #192]	; (8005bac <USB_SetTurnaroundTime+0x11c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d306      	bcc.n	8005afc <USB_SetTurnaroundTime+0x6c>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4a2f      	ldr	r2, [pc, #188]	; (8005bb0 <USB_SetTurnaroundTime+0x120>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d802      	bhi.n	8005afc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005af6:	230c      	movs	r3, #12
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	e03b      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4a2c      	ldr	r2, [pc, #176]	; (8005bb0 <USB_SetTurnaroundTime+0x120>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d906      	bls.n	8005b12 <USB_SetTurnaroundTime+0x82>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a2b      	ldr	r2, [pc, #172]	; (8005bb4 <USB_SetTurnaroundTime+0x124>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d802      	bhi.n	8005b12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b0c:	230b      	movs	r3, #11
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	e030      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4a27      	ldr	r2, [pc, #156]	; (8005bb4 <USB_SetTurnaroundTime+0x124>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d906      	bls.n	8005b28 <USB_SetTurnaroundTime+0x98>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4a26      	ldr	r2, [pc, #152]	; (8005bb8 <USB_SetTurnaroundTime+0x128>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d802      	bhi.n	8005b28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b22:	230a      	movs	r3, #10
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	e025      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4a23      	ldr	r2, [pc, #140]	; (8005bb8 <USB_SetTurnaroundTime+0x128>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d906      	bls.n	8005b3e <USB_SetTurnaroundTime+0xae>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <USB_SetTurnaroundTime+0x12c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d202      	bcs.n	8005b3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b38:	2309      	movs	r3, #9
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e01a      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <USB_SetTurnaroundTime+0x12c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d306      	bcc.n	8005b54 <USB_SetTurnaroundTime+0xc4>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <USB_SetTurnaroundTime+0x130>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d802      	bhi.n	8005b54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b4e:	2308      	movs	r3, #8
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e00f      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <USB_SetTurnaroundTime+0x130>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d906      	bls.n	8005b6a <USB_SetTurnaroundTime+0xda>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <USB_SetTurnaroundTime+0x134>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d202      	bcs.n	8005b6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b64:	2307      	movs	r3, #7
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e004      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b6a:	2306      	movs	r3, #6
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	e001      	b.n	8005b74 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b70:	2309      	movs	r3, #9
 8005b72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	029b      	lsls	r3, r3, #10
 8005b88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	00d8acbf 	.word	0x00d8acbf
 8005ba4:	00e4e1c0 	.word	0x00e4e1c0
 8005ba8:	00f42400 	.word	0x00f42400
 8005bac:	01067380 	.word	0x01067380
 8005bb0:	011a499f 	.word	0x011a499f
 8005bb4:	01312cff 	.word	0x01312cff
 8005bb8:	014ca43f 	.word	0x014ca43f
 8005bbc:	016e3600 	.word	0x016e3600
 8005bc0:	01a6ab1f 	.word	0x01a6ab1f
 8005bc4:	01e84800 	.word	0x01e84800

08005bc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f043 0201 	orr.w	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f023 0201 	bic.w	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d115      	bne.n	8005c5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	f7fb fb06 	bl	800124c <HAL_Delay>
      ms++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 f8cf 	bl	8006dea <USB_GetMode>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d01e      	beq.n	8005c90 <USB_SetCurrentMode+0x84>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b31      	cmp	r3, #49	; 0x31
 8005c56:	d9f0      	bls.n	8005c3a <USB_SetCurrentMode+0x2e>
 8005c58:	e01a      	b.n	8005c90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d115      	bne.n	8005c8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	f7fb faed 	bl	800124c <HAL_Delay>
      ms++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 f8b6 	bl	8006dea <USB_GetMode>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <USB_SetCurrentMode+0x84>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b31      	cmp	r3, #49	; 0x31
 8005c88:	d9f0      	bls.n	8005c6c <USB_SetCurrentMode+0x60>
 8005c8a:	e001      	b.n	8005c90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e005      	b.n	8005c9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b32      	cmp	r3, #50	; 0x32
 8005c94:	d101      	bne.n	8005c9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b086      	sub	sp, #24
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	e009      	b.n	8005cd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	3340      	adds	r3, #64	; 0x40
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b0e      	cmp	r3, #14
 8005cdc:	d9f2      	bls.n	8005cc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d11c      	bne.n	8005d1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf2:	f043 0302 	orr.w	r3, r3, #2
 8005cf6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e005      	b.n	8005d2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	461a      	mov	r2, r3
 8005d46:	680b      	ldr	r3, [r1, #0]
 8005d48:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d4a:	2103      	movs	r1, #3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f955 	bl	8005ffc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d52:	2110      	movs	r1, #16
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f8f1 	bl	8005f3c <USB_FlushTxFifo>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f91b 	bl	8005fa0 <USB_FlushRxFifo>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	461a      	mov	r2, r3
 8005d88:	2300      	movs	r3, #0
 8005d8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	461a      	mov	r2, r3
 8005d94:	2300      	movs	r3, #0
 8005d96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e043      	b.n	8005e26 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db4:	d118      	bne.n	8005de8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e013      	b.n	8005dfa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dde:	461a      	mov	r2, r3
 8005de0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e008      	b.n	8005dfa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	461a      	mov	r2, r3
 8005df6:	2300      	movs	r3, #0
 8005df8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e06:	461a      	mov	r2, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	3301      	adds	r3, #1
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d3b7      	bcc.n	8005d9e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e043      	b.n	8005ebc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e4a:	d118      	bne.n	8005e7e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e013      	b.n	8005e90 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	461a      	mov	r2, r3
 8005e76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	e008      	b.n	8005e90 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3b7      	bcc.n	8005e34 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ee4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f043 0210 	orr.w	r2, r3, #16
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <USB_DevInit+0x294>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f043 0208 	orr.w	r2, r3, #8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d107      	bne.n	8005f26 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f32:	b004      	add	sp, #16
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	803c3800 	.word	0x803c3800

08005f3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <USB_FlushTxFifo+0x60>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e01a      	b.n	8005f90 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	daf3      	bge.n	8005f4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	019b      	lsls	r3, r3, #6
 8005f6a:	f043 0220 	orr.w	r2, r3, #32
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <USB_FlushTxFifo+0x60>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e006      	b.n	8005f90 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d0f1      	beq.n	8005f72 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	00030d40 	.word	0x00030d40

08005fa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	4a11      	ldr	r2, [pc, #68]	; (8005ff8 <USB_FlushRxFifo+0x58>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e017      	b.n	8005fec <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	daf3      	bge.n	8005fac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2210      	movs	r2, #16
 8005fcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <USB_FlushRxFifo+0x58>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e006      	b.n	8005fec <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d0f1      	beq.n	8005fce <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	00030d40 	.word	0x00030d40

08005ffc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800601c:	4313      	orrs	r3, r2
 800601e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800602e:	b480      	push	{r7}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0306 	and.w	r3, r3, #6
 8006046:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d002      	beq.n	8006054 <USB_GetDevSpeed+0x26>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b06      	cmp	r3, #6
 8006052:	d102      	bne.n	800605a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006054:	2302      	movs	r3, #2
 8006056:	75fb      	strb	r3, [r7, #23]
 8006058:	e001      	b.n	800605e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800605a:	230f      	movs	r3, #15
 800605c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d13a      	bne.n	80060fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	2101      	movs	r1, #1
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	b29b      	uxth	r3, r3
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a6:	4313      	orrs	r3, r2
 80060a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d155      	bne.n	800616c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	78db      	ldrb	r3, [r3, #3]
 80060da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	059b      	lsls	r3, r3, #22
 80060e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060e4:	4313      	orrs	r3, r2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	e036      	b.n	800616c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	2101      	movs	r1, #1
 8006110:	fa01 f303 	lsl.w	r3, r1, r3
 8006114:	041b      	lsls	r3, r3, #16
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800611c:	4313      	orrs	r3, r2
 800611e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d11a      	bne.n	800616c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	78db      	ldrb	r3, [r3, #3]
 8006150:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006152:	430b      	orrs	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d161      	bne.n	800625c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ae:	d11f      	bne.n	80061f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	2101      	movs	r1, #1
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	b29b      	uxth	r3, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006210:	4013      	ands	r3, r2
 8006212:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	2101      	movs	r1, #1
 8006226:	fa01 f303 	lsl.w	r3, r1, r3
 800622a:	b29b      	uxth	r3, r3
 800622c:	43db      	mvns	r3, r3
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006234:	4013      	ands	r3, r2
 8006236:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	0159      	lsls	r1, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	440b      	add	r3, r1
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	4619      	mov	r1, r3
 8006254:	4b35      	ldr	r3, [pc, #212]	; (800632c <USB_DeactivateEndpoint+0x1b0>)
 8006256:	4013      	ands	r3, r2
 8006258:	600b      	str	r3, [r1, #0]
 800625a:	e060      	b.n	800631e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800626e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006272:	d11f      	bne.n	80062b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006292:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	43db      	mvns	r3, r3
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d4:	4013      	ands	r3, r2
 80062d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	2101      	movs	r1, #1
 80062ea:	fa01 f303 	lsl.w	r3, r1, r3
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	43db      	mvns	r3, r3
 80062f2:	68f9      	ldr	r1, [r7, #12]
 80062f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062f8:	4013      	ands	r3, r2
 80062fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	0159      	lsls	r1, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	440b      	add	r3, r1
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	4619      	mov	r1, r3
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <USB_DeactivateEndpoint+0x1b4>)
 800631a:	4013      	ands	r3, r2
 800631c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	ec337800 	.word	0xec337800
 8006330:	eff37800 	.word	0xeff37800

08006334 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	2b01      	cmp	r3, #1
 800634e:	f040 810a 	bne.w	8006566 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d132      	bne.n	80063c0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006374:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006378:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800637c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800639c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	0cdb      	lsrs	r3, r3, #19
 80063ba:	04db      	lsls	r3, r3, #19
 80063bc:	6113      	str	r3, [r2, #16]
 80063be:	e074      	b.n	80064aa <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063da:	0cdb      	lsrs	r3, r3, #19
 80063dc:	04db      	lsls	r3, r3, #19
 80063de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006402:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6959      	ldr	r1, [r3, #20]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	440b      	add	r3, r1
 800641c:	1e59      	subs	r1, r3, #1
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	fbb1 f3f3 	udiv	r3, r1, r3
 8006426:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006428:	4baf      	ldr	r3, [pc, #700]	; (80066e8 <USB_EPStartXfer+0x3b4>)
 800642a:	400b      	ands	r3, r1
 800642c:	6939      	ldr	r1, [r7, #16]
 800642e:	0148      	lsls	r0, r1, #5
 8006430:	6979      	ldr	r1, [r7, #20]
 8006432:	4401      	add	r1, r0
 8006434:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006438:	4313      	orrs	r3, r2
 800643a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006452:	6939      	ldr	r1, [r7, #16]
 8006454:	0148      	lsls	r0, r1, #5
 8006456:	6979      	ldr	r1, [r7, #20]
 8006458:	4401      	add	r1, r0
 800645a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800645e:	4313      	orrs	r3, r2
 8006460:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	78db      	ldrb	r3, [r3, #3]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d11f      	bne.n	80064aa <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006484:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006488:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064a8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064c8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	78db      	ldrb	r3, [r3, #3]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d015      	beq.n	80064fe <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8100 	beq.w	80066dc <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	2101      	movs	r1, #1
 80064ee:	fa01 f303 	lsl.w	r3, r1, r3
 80064f2:	6979      	ldr	r1, [r7, #20]
 80064f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f8:	4313      	orrs	r3, r2
 80064fa:	634b      	str	r3, [r1, #52]	; 0x34
 80064fc:	e0ee      	b.n	80066dc <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d110      	bne.n	8006530 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	e00f      	b.n	8006550 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	440a      	add	r2, r1
 8006546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800654e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68d9      	ldr	r1, [r3, #12]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	b29b      	uxth	r3, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9e2 	bl	8006928 <USB_WritePacket>
 8006564:	e0ba      	b.n	80066dc <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006580:	0cdb      	lsrs	r3, r3, #19
 8006582:	04db      	lsls	r3, r3, #19
 8006584:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d123      	bne.n	80065fa <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c8:	6939      	ldr	r1, [r7, #16]
 80065ca:	0148      	lsls	r0, r1, #5
 80065cc:	6979      	ldr	r1, [r7, #20]
 80065ce:	4401      	add	r1, r0
 80065d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065d4:	4313      	orrs	r3, r2
 80065d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f6:	6113      	str	r3, [r2, #16]
 80065f8:	e033      	b.n	8006662 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	4413      	add	r3, r2
 8006604:	1e5a      	subs	r2, r3, #1
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	89fb      	ldrh	r3, [r7, #14]
 8006620:	04d9      	lsls	r1, r3, #19
 8006622:	4b31      	ldr	r3, [pc, #196]	; (80066e8 <USB_EPStartXfer+0x3b4>)
 8006624:	400b      	ands	r3, r1
 8006626:	6939      	ldr	r1, [r7, #16]
 8006628:	0148      	lsls	r0, r1, #5
 800662a:	6979      	ldr	r1, [r7, #20]
 800662c:	4401      	add	r1, r0
 800662e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006632:	4313      	orrs	r3, r2
 8006634:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	89f9      	ldrh	r1, [r7, #14]
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006652:	6939      	ldr	r1, [r7, #16]
 8006654:	0148      	lsls	r0, r1, #5
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	4401      	add	r1, r0
 800665a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800665e:	4313      	orrs	r3, r2
 8006660:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	78db      	ldrb	r3, [r3, #3]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d128      	bne.n	80066bc <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d110      	bne.n	800669c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e00f      	b.n	80066bc <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	0151      	lsls	r1, r2, #5
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	440a      	add	r2, r1
 80066b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	1ff80000 	.word	0x1ff80000

080066ec <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b01      	cmp	r3, #1
 8006706:	f040 80ab 	bne.w	8006860 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d132      	bne.n	8006778 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	440a      	add	r2, r1
 8006728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006730:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006734:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	440a      	add	r2, r1
 800674c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	440a      	add	r2, r1
 800676c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006770:	0cdb      	lsrs	r3, r3, #19
 8006772:	04db      	lsls	r3, r3, #19
 8006774:	6113      	str	r3, [r2, #16]
 8006776:	e04e      	b.n	8006816 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006792:	0cdb      	lsrs	r3, r3, #19
 8006794:	04db      	lsls	r3, r3, #19
 8006796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d903      	bls.n	80067d0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	0148      	lsls	r0, r1, #5
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	4401      	add	r1, r0
 800680e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006812:	4313      	orrs	r3, r2
 8006814:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006834:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d06d      	beq.n	800691a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	2101      	movs	r1, #1
 8006850:	fa01 f303 	lsl.w	r3, r1, r3
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800685a:	4313      	orrs	r3, r2
 800685c:	634b      	str	r3, [r1, #52]	; 0x34
 800685e:	e05c      	b.n	800691a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687a:	0cdb      	lsrs	r3, r3, #19
 800687c:	04db      	lsls	r3, r3, #19
 800687e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	0151      	lsls	r1, r2, #5
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	440a      	add	r2, r1
 8006896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800689e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	0148      	lsls	r0, r1, #5
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	4401      	add	r1, r0
 80068f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068f6:	4313      	orrs	r3, r2
 80068f8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006914:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006918:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006928:	b480      	push	{r7}
 800692a:	b089      	sub	sp, #36	; 0x24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4611      	mov	r1, r2
 8006934:	461a      	mov	r2, r3
 8006936:	460b      	mov	r3, r1
 8006938:	71fb      	strb	r3, [r7, #7]
 800693a:	4613      	mov	r3, r2
 800693c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006946:	88bb      	ldrh	r3, [r7, #4]
 8006948:	3303      	adds	r3, #3
 800694a:	089b      	lsrs	r3, r3, #2
 800694c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e018      	b.n	8006986 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	031a      	lsls	r2, r3, #12
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	4413      	add	r3, r2
 800695c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006960:	461a      	mov	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	3301      	adds	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	3301      	adds	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	3301      	adds	r3, #1
 8006978:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	3301      	adds	r3, #1
 800697e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	3301      	adds	r3, #1
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	d3e2      	bcc.n	8006954 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3724      	adds	r7, #36	; 0x24
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800699c:	b480      	push	{r7}
 800699e:	b08b      	sub	sp, #44	; 0x2c
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	089b      	lsrs	r3, r3, #2
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069ba:	88fb      	ldrh	r3, [r7, #6]
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	623b      	str	r3, [r7, #32]
 80069c6:	e014      	b.n	80069f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	3301      	adds	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	3301      	adds	r3, #1
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	3301      	adds	r3, #1
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	3301      	adds	r3, #1
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	3301      	adds	r3, #1
 80069f0:	623b      	str	r3, [r7, #32]
 80069f2:	6a3a      	ldr	r2, [r7, #32]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d3e6      	bcc.n	80069c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80069fa:	8bfb      	ldrh	r3, [r7, #30]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f107 0310 	add.w	r3, r7, #16
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	701a      	strb	r2, [r3, #0]
      i++;
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	3301      	adds	r3, #1
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a32:	8bfb      	ldrh	r3, [r7, #30]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a38:	8bfb      	ldrh	r3, [r7, #30]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1ea      	bne.n	8006a14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	372c      	adds	r7, #44	; 0x2c
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d12c      	bne.n	8006ac2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	db12      	blt.n	8006aa0 <USB_EPSetStall+0x54>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00f      	beq.n	8006aa0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	e02b      	b.n	8006b1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	db12      	blt.n	8006afa <USB_EPSetStall+0xae>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00f      	beq.n	8006afa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006af8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d128      	bne.n	8006b96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	78db      	ldrb	r3, [r3, #3]
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d003      	beq.n	8006b74 <USB_EPClearStall+0x4c>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	78db      	ldrb	r3, [r3, #3]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d138      	bne.n	8006be6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	e027      	b.n	8006be6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	78db      	ldrb	r3, [r3, #3]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d003      	beq.n	8006bc6 <USB_EPClearStall+0x9e>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	78db      	ldrb	r3, [r3, #3]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d10f      	bne.n	8006be6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c28:	68f9      	ldr	r1, [r7, #12]
 8006c2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c6e:	f023 0302 	bic.w	r3, r3, #2
 8006c72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c9c:	f023 0303 	bic.w	r3, r3, #3
 8006ca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cb0:	f043 0302 	orr.w	r3, r3, #2
 8006cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	0c1b      	lsrs	r3, r3, #16
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	b29b      	uxth	r3, r3
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d80:	68bb      	ldr	r3, [r7, #8]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b087      	sub	sp, #28
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbe:	01db      	lsls	r3, r3, #7
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0301 	and.w	r3, r3, #1
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e24:	f023 0307 	bic.w	r3, r3, #7
 8006e28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	333c      	adds	r3, #60	; 0x3c
 8006e5e:	3304      	adds	r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <USB_EP0_OutStart+0x8c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d90a      	bls.n	8006e82 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e7c:	d101      	bne.n	8006e82 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e024      	b.n	8006ecc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb0:	f043 0318 	orr.w	r3, r3, #24
 8006eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ec8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	4f54300a 	.word	0x4f54300a

08006edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <USB_CoreReset+0x60>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d901      	bls.n	8006ef8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e01a      	b.n	8006f2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	daf3      	bge.n	8006ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f043 0201 	orr.w	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <USB_CoreReset+0x60>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d901      	bls.n	8006f20 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e006      	b.n	8006f2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d0f1      	beq.n	8006f10 <USB_CoreReset+0x34>

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	00030d40 	.word	0x00030d40

08006f40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006f44:	4904      	ldr	r1, [pc, #16]	; (8006f58 <MX_FATFS_Init+0x18>)
 8006f46:	4805      	ldr	r0, [pc, #20]	; (8006f5c <MX_FATFS_Init+0x1c>)
 8006f48:	f003 f804 	bl	8009f54 <FATFS_LinkDriver>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <MX_FATFS_Init+0x20>)
 8006f52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006f54:	bf00      	nop
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200005c8 	.word	0x200005c8
 8006f5c:	2000000c 	.word	0x2000000c
 8006f60:	200005cc 	.word	0x200005cc

08006f64 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_init(pdrv);
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7f9 fded 	bl	8000b50 <SD_init>
 8006f76:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_status(pdrv);
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7f9 fe45 	bl	8000c1c <SD_status>
 8006f92:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_read(pdrv, buff, sector, count);
 8006fac:	7bf8      	ldrb	r0, [r7, #15]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	f7f9 fe51 	bl	8000c5a <SD_read>
 8006fb8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_write(pdrv, buff, sector, count);
 8006fd2:	7bf8      	ldrb	r0, [r7, #15]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	f7f9 fe85 	bl	8000ce8 <SD_write>
 8006fde:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	603a      	str	r2, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_ioctl(pdrv, cmd, buff);
 8006ff8:	79b9      	ldrb	r1, [r7, #6]
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7f9 fecb 	bl	8000d9a <SD_ioctl>
 8007004:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800701a:	f44f 701d 	mov.w	r0, #628	; 0x274
 800701e:	f003 fdbb 	bl	800ab98 <USBD_static_malloc>
 8007022:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d105      	bne.n	8007036 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007032:	2302      	movs	r3, #2
 8007034:	e034      	b.n	80070a0 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7c1b      	ldrb	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d115      	bne.n	8007072 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800704a:	2202      	movs	r2, #2
 800704c:	2101      	movs	r1, #1
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f003 fb58 	bl	800a704 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800705c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007060:	2202      	movs	r2, #2
 8007062:	2181      	movs	r1, #129	; 0x81
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f003 fb4d 	bl	800a704 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	871a      	strh	r2, [r3, #56]	; 0x38
 8007070:	e012      	b.n	8007098 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007072:	2340      	movs	r3, #64	; 0x40
 8007074:	2202      	movs	r2, #2
 8007076:	2101      	movs	r1, #1
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f003 fb43 	bl	800a704 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007086:	2340      	movs	r3, #64	; 0x40
 8007088:	2202      	movs	r2, #2
 800708a:	2181      	movs	r1, #129	; 0x81
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f003 fb39 	bl	800a704 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f998 	bl	80073ce <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80070b4:	2101      	movs	r1, #1
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f003 fb62 	bl	800a780 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80070c4:	2181      	movs	r1, #129	; 0x81
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f003 fb5a 	bl	800a780 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00c      	beq.n	80070f6 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9d4 	bl	800748a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070e8:	4618      	mov	r0, r3
 80070ea:	f003 fd63 	bl	800abb4 <USBD_static_free>
    pdev->pClassData = NULL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007110:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	e0db      	b.n	80072dc <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800712c:	2b00      	cmp	r3, #0
 800712e:	d04e      	beq.n	80071ce <USBD_MSC_Setup+0xce>
 8007130:	2b20      	cmp	r3, #32
 8007132:	f040 80cb 	bne.w	80072cc <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	785b      	ldrb	r3, [r3, #1]
 800713a:	2bfe      	cmp	r3, #254	; 0xfe
 800713c:	d002      	beq.n	8007144 <USBD_MSC_Setup+0x44>
 800713e:	2bff      	cmp	r3, #255	; 0xff
 8007140:	d025      	beq.n	800718e <USBD_MSC_Setup+0x8e>
 8007142:	e03c      	b.n	80071be <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	885b      	ldrh	r3, [r3, #2]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d119      	bne.n	8007180 <USBD_MSC_Setup+0x80>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	88db      	ldrh	r3, [r3, #6]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d115      	bne.n	8007180 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800715a:	2b00      	cmp	r3, #0
 800715c:	da10      	bge.n	8007180 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	4798      	blx	r3
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2201      	movs	r2, #1
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f002 fe3d 	bl	8009df6 <USBD_CtlSendData>
 800717c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800717e:	e025      	b.n	80071cc <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f002 fdc6 	bl	8009d14 <USBD_CtlError>
            ret = USBD_FAIL;
 8007188:	2303      	movs	r3, #3
 800718a:	75fb      	strb	r3, [r7, #23]
          break;
 800718c:	e01e      	b.n	80071cc <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10c      	bne.n	80071b0 <USBD_MSC_Setup+0xb0>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	88db      	ldrh	r3, [r3, #6]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d108      	bne.n	80071b0 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	db03      	blt.n	80071b0 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f948 	bl	800743e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071ae:	e00d      	b.n	80071cc <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f002 fdae 	bl	8009d14 <USBD_CtlError>
            ret = USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	75fb      	strb	r3, [r7, #23]
          break;
 80071bc:	e006      	b.n	80071cc <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f002 fda7 	bl	8009d14 <USBD_CtlError>
          ret = USBD_FAIL;
 80071c6:	2303      	movs	r3, #3
 80071c8:	75fb      	strb	r3, [r7, #23]
          break;
 80071ca:	bf00      	nop
      }
      break;
 80071cc:	e085      	b.n	80072da <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b0b      	cmp	r3, #11
 80071d4:	d871      	bhi.n	80072ba <USBD_MSC_Setup+0x1ba>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <USBD_MSC_Setup+0xdc>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	0800720d 	.word	0x0800720d
 80071e0:	08007289 	.word	0x08007289
 80071e4:	080072bb 	.word	0x080072bb
 80071e8:	080072bb 	.word	0x080072bb
 80071ec:	080072bb 	.word	0x080072bb
 80071f0:	080072bb 	.word	0x080072bb
 80071f4:	080072bb 	.word	0x080072bb
 80071f8:	080072bb 	.word	0x080072bb
 80071fc:	080072bb 	.word	0x080072bb
 8007200:	080072bb 	.word	0x080072bb
 8007204:	08007237 	.word	0x08007237
 8007208:	08007261 	.word	0x08007261
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b03      	cmp	r3, #3
 8007216:	d107      	bne.n	8007228 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007218:	f107 030e 	add.w	r3, r7, #14
 800721c:	2202      	movs	r2, #2
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f002 fde8 	bl	8009df6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007226:	e050      	b.n	80072ca <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f002 fd72 	bl	8009d14 <USBD_CtlError>
            ret = USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	75fb      	strb	r3, [r7, #23]
          break;
 8007234:	e049      	b.n	80072ca <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d107      	bne.n	8007252 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	3304      	adds	r3, #4
 8007246:	2201      	movs	r2, #1
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f002 fdd3 	bl	8009df6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007250:	e03b      	b.n	80072ca <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f002 fd5d 	bl	8009d14 <USBD_CtlError>
            ret = USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	75fb      	strb	r3, [r7, #23]
          break;
 800725e:	e034      	b.n	80072ca <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b03      	cmp	r3, #3
 800726a:	d106      	bne.n	800727a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	885b      	ldrh	r3, [r3, #2]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007278:	e027      	b.n	80072ca <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f002 fd49 	bl	8009d14 <USBD_CtlError>
            ret = USBD_FAIL;
 8007282:	2303      	movs	r3, #3
 8007284:	75fb      	strb	r3, [r7, #23]
          break;
 8007286:	e020      	b.n	80072ca <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b03      	cmp	r3, #3
 8007292:	d119      	bne.n	80072c8 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	885b      	ldrh	r3, [r3, #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d115      	bne.n	80072c8 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	889b      	ldrh	r3, [r3, #4]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f003 faa1 	bl	800a7ec <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	889b      	ldrh	r3, [r3, #4]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa82 	bl	80077bc <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80072b8:	e006      	b.n	80072c8 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f002 fd29 	bl	8009d14 <USBD_CtlError>
          ret = USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	75fb      	strb	r3, [r7, #23]
          break;
 80072c6:	e000      	b.n	80072ca <USBD_MSC_Setup+0x1ca>
          break;
 80072c8:	bf00      	nop
      }
      break;
 80072ca:	e006      	b.n	80072da <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f002 fd20 	bl	8009d14 <USBD_CtlError>
      ret = USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	75fb      	strb	r3, [r7, #23]
      break;
 80072d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80072da:	7dfb      	ldrb	r3, [r7, #23]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f8dc 	bl	80074b2 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f902 	bl	800751e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8007332:	4b03      	ldr	r3, [pc, #12]	; (8007340 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	20000058 	.word	0x20000058

08007344 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8007352:	4b03      	ldr	r3, [pc, #12]	; (8007360 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	20000078 	.word	0x20000078

08007364 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8007372:	4b03      	ldr	r3, [pc, #12]	; (8007380 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20000098 	.word	0x20000098

08007384 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	220a      	movs	r2, #10
 8007390:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8007392:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	200000b8 	.word	0x200000b8

080073a4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e004      	b.n	80073c2 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073dc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d028      	beq.n	8007436 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2000      	movs	r0, #0
 8007412:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007414:	2101      	movs	r1, #1
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f003 f9e8 	bl	800a7ec <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800741c:	2181      	movs	r1, #129	; 0x81
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f003 f9e4 	bl	800a7ec <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800742a:	231f      	movs	r3, #31
 800742c:	2101      	movs	r1, #1
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f003 fb18 	bl	800aa64 <USBD_LL_PrepareReceive>
 8007434:	e000      	b.n	8007438 <MSC_BOT_Init+0x6a>
    return;
 8007436:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800744c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d016      	beq.n	8007482 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8007460:	2181      	movs	r1, #129	; 0x81
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f003 fa2e 	bl	800a8c4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8007468:	2101      	movs	r1, #1
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f003 fa2a 	bl	800a8c4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007476:	231f      	movs	r3, #31
 8007478:	2101      	movs	r1, #1
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f003 faf2 	bl	800aa64 <USBD_LL_PrepareReceive>
 8007480:	e000      	b.n	8007484 <MSC_BOT_Reset+0x46>
    return;
 8007482:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007498:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	721a      	strb	r2, [r3, #8]
  }
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d020      	beq.n	800750e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	7a1b      	ldrb	r3, [r3, #8]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d005      	beq.n	80074e0 <MSC_BOT_DataIn+0x2e>
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	db1c      	blt.n	8007512 <MSC_BOT_DataIn+0x60>
 80074d8:	3b03      	subs	r3, #3
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d819      	bhi.n	8007512 <MSC_BOT_DataIn+0x60>
 80074de:	e011      	b.n	8007504 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80074ec:	461a      	mov	r2, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f992 	bl	8007818 <SCSI_ProcessCmd>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	da0d      	bge.n	8007516 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80074fa:	2101      	movs	r1, #1
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f8fb 	bl	80076f8 <MSC_BOT_SendCSW>
      }
      break;
 8007502:	e008      	b.n	8007516 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007504:	2100      	movs	r1, #0
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f8f6 	bl	80076f8 <MSC_BOT_SendCSW>
      break;
 800750c:	e004      	b.n	8007518 <MSC_BOT_DataIn+0x66>
    return;
 800750e:	bf00      	nop
 8007510:	e002      	b.n	8007518 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <MSC_BOT_DataIn+0x66>
      break;
 8007516:	bf00      	nop
  }
}
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007530:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01c      	beq.n	8007572 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	7a1b      	ldrb	r3, [r3, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <MSC_BOT_DataOut+0x28>
 8007540:	2b01      	cmp	r3, #1
 8007542:	d004      	beq.n	800754e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007544:	e018      	b.n	8007578 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f81a 	bl	8007580 <MSC_BOT_CBW_Decode>
      break;
 800754c:	e014      	b.n	8007578 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800755a:	461a      	mov	r2, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f95b 	bl	8007818 <SCSI_ProcessCmd>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	da06      	bge.n	8007576 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007568:	2101      	movs	r1, #1
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f8c4 	bl	80076f8 <MSC_BOT_SendCSW>
      break;
 8007570:	e001      	b.n	8007576 <MSC_BOT_DataOut+0x58>
    return;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <MSC_BOT_DataOut+0x5a>
      break;
 8007576:	bf00      	nop
  }
}
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800758e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d077      	beq.n	8007686 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80075ae:	2101      	movs	r1, #1
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f003 fa8f 	bl	800aad4 <USBD_LL_GetRxDataSize>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b1f      	cmp	r3, #31
 80075ba:	d114      	bne.n	80075e6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80075c2:	4a34      	ldr	r2, [pc, #208]	; (8007694 <MSC_BOT_CBW_Decode+0x114>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d10e      	bne.n	80075e6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d809      	bhi.n	80075e6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d004      	beq.n	80075e6 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d90e      	bls.n	8007604 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80075ec:	2320      	movs	r3, #32
 80075ee:	2205      	movs	r2, #5
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fdbc 	bl	800816e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2202      	movs	r2, #2
 80075fa:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8ab 	bl	8007758 <MSC_BOT_Abort>
 8007602:	e043      	b.n	800768c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007610:	461a      	mov	r2, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f900 	bl	8007818 <SCSI_ProcessCmd>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	da0c      	bge.n	8007638 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	7a1b      	ldrb	r3, [r3, #8]
 8007622:	2b05      	cmp	r3, #5
 8007624:	d104      	bne.n	8007630 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007626:	2101      	movs	r1, #1
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f865 	bl	80076f8 <MSC_BOT_SendCSW>
 800762e:	e02d      	b.n	800768c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f891 	bl	8007758 <MSC_BOT_Abort>
 8007636:	e029      	b.n	800768c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	7a1b      	ldrb	r3, [r3, #8]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d024      	beq.n	800768a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007644:	2b01      	cmp	r3, #1
 8007646:	d020      	beq.n	800768a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800764c:	2b03      	cmp	r3, #3
 800764e:	d01c      	beq.n	800768a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d009      	beq.n	800766c <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f103 0110 	add.w	r1, r3, #16
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	461a      	mov	r2, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f817 	bl	8007698 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800766a:	e00f      	b.n	800768c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d104      	bne.n	800767e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f83e 	bl	80076f8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800767c:	e006      	b.n	800768c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f86a 	bl	8007758 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007684:	e002      	b.n	800768c <MSC_BOT_CBW_Decode+0x10c>
    return;
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 800768a:	bf00      	nop
    }
  }
}
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	43425355 	.word	0x43425355

08007698 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076aa:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	4293      	cmp	r3, r2
 80076b6:	bf28      	it	cs
 80076b8:	4613      	movcs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d015      	beq.n	80076ee <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	1ad2      	subs	r2, r2, r3
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2204      	movs	r2, #4
 80076de:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	2181      	movs	r1, #129	; 0x81
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f003 f984 	bl	800a9f4 <USBD_LL_Transmit>
 80076ec:	e000      	b.n	80076f0 <MSC_BOT_SendData+0x58>
    return;
 80076ee:	bf00      	nop
}
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800770a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d01b      	beq.n	800774a <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a0f      	ldr	r2, [pc, #60]	; (8007754 <MSC_BOT_SendCSW+0x5c>)
 8007716:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800772e:	230d      	movs	r3, #13
 8007730:	2181      	movs	r1, #129	; 0x81
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f003 f95e 	bl	800a9f4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800773e:	231f      	movs	r3, #31
 8007740:	2101      	movs	r1, #1
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f003 f98e 	bl	800aa64 <USBD_LL_PrepareReceive>
 8007748:	e000      	b.n	800774c <MSC_BOT_SendCSW+0x54>
    return;
 800774a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	53425355 	.word	0x53425355

08007758 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007766:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d022      	beq.n	80077b4 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10c      	bne.n	8007792 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007786:	2b00      	cmp	r3, #0
 8007788:	d103      	bne.n	8007792 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800778a:	2101      	movs	r1, #1
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f003 f863 	bl	800a858 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007792:	2181      	movs	r1, #129	; 0x81
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f003 f85f 	bl	800a858 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	7a5b      	ldrb	r3, [r3, #9]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d109      	bne.n	80077b6 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80077a2:	2181      	movs	r1, #129	; 0x81
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f003 f857 	bl	800a858 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80077aa:	2101      	movs	r1, #1
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f003 f853 	bl	800a858 <USBD_LL_StallEP>
 80077b2:	e000      	b.n	80077b6 <MSC_BOT_Abort+0x5e>
    return;
 80077b4:	bf00      	nop
  }
}
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ce:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d019      	beq.n	800780a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	7a5b      	ldrb	r3, [r3, #9]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d108      	bne.n	80077f0 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80077de:	2181      	movs	r1, #129	; 0x81
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f003 f839 	bl	800a858 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80077e6:	2101      	movs	r1, #1
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f003 f835 	bl	800a858 <USBD_LL_StallEP>
 80077ee:	e00f      	b.n	8007810 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80077f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da0a      	bge.n	800780e <MSC_BOT_CplClrFeature+0x52>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	7a5b      	ldrb	r3, [r3, #9]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d006      	beq.n	800780e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007800:	2101      	movs	r1, #1
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff ff78 	bl	80076f8 <MSC_BOT_SendCSW>
 8007808:	e002      	b.n	8007810 <MSC_BOT_CplClrFeature+0x54>
    return;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800780e:	bf00      	nop
  }
}
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	460b      	mov	r3, r1
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8007834:	f04f 33ff 	mov.w	r3, #4294967295
 8007838:	e168      	b.n	8007b0c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2baa      	cmp	r3, #170	; 0xaa
 8007840:	f000 8144 	beq.w	8007acc <SCSI_ProcessCmd+0x2b4>
 8007844:	2baa      	cmp	r3, #170	; 0xaa
 8007846:	f300 8153 	bgt.w	8007af0 <SCSI_ProcessCmd+0x2d8>
 800784a:	2ba8      	cmp	r3, #168	; 0xa8
 800784c:	f000 812c 	beq.w	8007aa8 <SCSI_ProcessCmd+0x290>
 8007850:	2ba8      	cmp	r3, #168	; 0xa8
 8007852:	f300 814d 	bgt.w	8007af0 <SCSI_ProcessCmd+0x2d8>
 8007856:	2b5a      	cmp	r3, #90	; 0x5a
 8007858:	f300 80c0 	bgt.w	80079dc <SCSI_ProcessCmd+0x1c4>
 800785c:	2b00      	cmp	r3, #0
 800785e:	f2c0 8147 	blt.w	8007af0 <SCSI_ProcessCmd+0x2d8>
 8007862:	2b5a      	cmp	r3, #90	; 0x5a
 8007864:	f200 8144 	bhi.w	8007af0 <SCSI_ProcessCmd+0x2d8>
 8007868:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <SCSI_ProcessCmd+0x58>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	080079e3 	.word	0x080079e3
 8007874:	08007af1 	.word	0x08007af1
 8007878:	08007af1 	.word	0x08007af1
 800787c:	080079f5 	.word	0x080079f5
 8007880:	08007af1 	.word	0x08007af1
 8007884:	08007af1 	.word	0x08007af1
 8007888:	08007af1 	.word	0x08007af1
 800788c:	08007af1 	.word	0x08007af1
 8007890:	08007af1 	.word	0x08007af1
 8007894:	08007af1 	.word	0x08007af1
 8007898:	08007af1 	.word	0x08007af1
 800789c:	08007af1 	.word	0x08007af1
 80078a0:	08007af1 	.word	0x08007af1
 80078a4:	08007af1 	.word	0x08007af1
 80078a8:	08007af1 	.word	0x08007af1
 80078ac:	08007af1 	.word	0x08007af1
 80078b0:	08007af1 	.word	0x08007af1
 80078b4:	08007af1 	.word	0x08007af1
 80078b8:	08007a07 	.word	0x08007a07
 80078bc:	08007af1 	.word	0x08007af1
 80078c0:	08007af1 	.word	0x08007af1
 80078c4:	08007af1 	.word	0x08007af1
 80078c8:	08007af1 	.word	0x08007af1
 80078cc:	08007af1 	.word	0x08007af1
 80078d0:	08007af1 	.word	0x08007af1
 80078d4:	08007af1 	.word	0x08007af1
 80078d8:	08007a3d 	.word	0x08007a3d
 80078dc:	08007a19 	.word	0x08007a19
 80078e0:	08007af1 	.word	0x08007af1
 80078e4:	08007af1 	.word	0x08007af1
 80078e8:	08007a2b 	.word	0x08007a2b
 80078ec:	08007af1 	.word	0x08007af1
 80078f0:	08007af1 	.word	0x08007af1
 80078f4:	08007af1 	.word	0x08007af1
 80078f8:	08007af1 	.word	0x08007af1
 80078fc:	08007a61 	.word	0x08007a61
 8007900:	08007af1 	.word	0x08007af1
 8007904:	08007a73 	.word	0x08007a73
 8007908:	08007af1 	.word	0x08007af1
 800790c:	08007af1 	.word	0x08007af1
 8007910:	08007a97 	.word	0x08007a97
 8007914:	08007af1 	.word	0x08007af1
 8007918:	08007abb 	.word	0x08007abb
 800791c:	08007af1 	.word	0x08007af1
 8007920:	08007af1 	.word	0x08007af1
 8007924:	08007af1 	.word	0x08007af1
 8007928:	08007af1 	.word	0x08007af1
 800792c:	08007adf 	.word	0x08007adf
 8007930:	08007af1 	.word	0x08007af1
 8007934:	08007af1 	.word	0x08007af1
 8007938:	08007af1 	.word	0x08007af1
 800793c:	08007af1 	.word	0x08007af1
 8007940:	08007af1 	.word	0x08007af1
 8007944:	08007af1 	.word	0x08007af1
 8007948:	08007af1 	.word	0x08007af1
 800794c:	08007af1 	.word	0x08007af1
 8007950:	08007af1 	.word	0x08007af1
 8007954:	08007af1 	.word	0x08007af1
 8007958:	08007af1 	.word	0x08007af1
 800795c:	08007af1 	.word	0x08007af1
 8007960:	08007af1 	.word	0x08007af1
 8007964:	08007af1 	.word	0x08007af1
 8007968:	08007af1 	.word	0x08007af1
 800796c:	08007af1 	.word	0x08007af1
 8007970:	08007af1 	.word	0x08007af1
 8007974:	08007af1 	.word	0x08007af1
 8007978:	08007af1 	.word	0x08007af1
 800797c:	08007af1 	.word	0x08007af1
 8007980:	08007af1 	.word	0x08007af1
 8007984:	08007af1 	.word	0x08007af1
 8007988:	08007af1 	.word	0x08007af1
 800798c:	08007af1 	.word	0x08007af1
 8007990:	08007af1 	.word	0x08007af1
 8007994:	08007af1 	.word	0x08007af1
 8007998:	08007af1 	.word	0x08007af1
 800799c:	08007af1 	.word	0x08007af1
 80079a0:	08007af1 	.word	0x08007af1
 80079a4:	08007af1 	.word	0x08007af1
 80079a8:	08007af1 	.word	0x08007af1
 80079ac:	08007af1 	.word	0x08007af1
 80079b0:	08007af1 	.word	0x08007af1
 80079b4:	08007af1 	.word	0x08007af1
 80079b8:	08007af1 	.word	0x08007af1
 80079bc:	08007af1 	.word	0x08007af1
 80079c0:	08007af1 	.word	0x08007af1
 80079c4:	08007af1 	.word	0x08007af1
 80079c8:	08007af1 	.word	0x08007af1
 80079cc:	08007af1 	.word	0x08007af1
 80079d0:	08007af1 	.word	0x08007af1
 80079d4:	08007af1 	.word	0x08007af1
 80079d8:	08007a4f 	.word	0x08007a4f
 80079dc:	2b9e      	cmp	r3, #158	; 0x9e
 80079de:	d051      	beq.n	8007a84 <SCSI_ProcessCmd+0x26c>
 80079e0:	e086      	b.n	8007af0 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4619      	mov	r1, r3
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f893 	bl	8007b14 <SCSI_TestUnitReady>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]
      break;
 80079f2:	e089      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4619      	mov	r1, r3
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fb38 	bl	8008070 <SCSI_RequestSense>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	e080      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f8d1 	bl	8007bb4 <SCSI_Inquiry>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]
      break;
 8007a16:	e077      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fbec 	bl	80081fc <SCSI_StartStopUnit>
 8007a24:	4603      	mov	r3, r0
 8007a26:	75fb      	strb	r3, [r7, #23]
      break;
 8007a28:	e06e      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fc34 	bl	800829e <SCSI_AllowPreventRemovable>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3a:	e065      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	4619      	mov	r1, r3
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 fabc 	bl	8007fc0 <SCSI_ModeSense6>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a4c:	e05c      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4619      	mov	r1, r3
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fadf 	bl	8008018 <SCSI_ModeSense10>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5e:	e053      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007a60:	7afb      	ldrb	r3, [r7, #11]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4619      	mov	r1, r3
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fa37 	bl	8007eda <SCSI_ReadFormatCapacity>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a70:	e04a      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f90f 	bl	8007c9c <SCSI_ReadCapacity10>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
      break;
 8007a82:	e041      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f97b 	bl	8007d86 <SCSI_ReadCapacity16>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]
      break;
 8007a94:	e038      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 fc27 	bl	80082f0 <SCSI_Read10>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa6:	e02f      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4619      	mov	r1, r3
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fcbe 	bl	8008430 <SCSI_Read12>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab8:	e026      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8007aba:	7afb      	ldrb	r3, [r7, #11]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fd60 	bl	8008586 <SCSI_Write10>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aca:	e01d      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fe1c 	bl	8008710 <SCSI_Write12>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75fb      	strb	r3, [r7, #23]
      break;
 8007adc:	e014      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 fee8 	bl	80088ba <SCSI_Verify10>
 8007aea:	4603      	mov	r3, r0
 8007aec:	75fb      	strb	r3, [r7, #23]
      break;
 8007aee:	e00b      	b.n	8007b08 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007af0:	7af9      	ldrb	r1, [r7, #11]
 8007af2:	2320      	movs	r3, #32
 8007af4:	2205      	movs	r2, #5
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 fb39 	bl	800816e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2202      	movs	r2, #2
 8007b00:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8007b02:	23ff      	movs	r3, #255	; 0xff
 8007b04:	75fb      	strb	r3, [r7, #23]
      break;
 8007b06:	bf00      	nop
  }

  return ret;
 8007b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b28:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8007b30:	f04f 33ff 	mov.w	r3, #4294967295
 8007b34:	e03a      	b.n	8007bac <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007b46:	2320      	movs	r3, #32
 8007b48:	2205      	movs	r2, #5
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fb0f 	bl	800816e <SCSI_SenseCode>

    return -1;
 8007b50:	f04f 33ff 	mov.w	r3, #4294967295
 8007b54:	e02a      	b.n	8007bac <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d10b      	bne.n	8007b78 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b60:	7af9      	ldrb	r1, [r7, #11]
 8007b62:	233a      	movs	r3, #58	; 0x3a
 8007b64:	2202      	movs	r2, #2
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fb01 	bl	800816e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2205      	movs	r2, #5
 8007b70:	721a      	strb	r2, [r3, #8]
    return -1;
 8007b72:	f04f 33ff 	mov.w	r3, #4294967295
 8007b76:	e019      	b.n	8007bac <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	7afa      	ldrb	r2, [r7, #11]
 8007b82:	4610      	mov	r0, r2
 8007b84:	4798      	blx	r3
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b8c:	7af9      	ldrb	r1, [r7, #11]
 8007b8e:	233a      	movs	r3, #58	; 0x3a
 8007b90:	2202      	movs	r2, #2
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 faeb 	bl	800816e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2205      	movs	r2, #5
 8007b9c:	721a      	strb	r2, [r3, #8]

    return -1;
 8007b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba2:	e003      	b.n	8007bac <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	60da      	str	r2, [r3, #12]

  return 0;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bc8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <SCSI_Inquiry+0x22>
  {
    return -1;
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd4:	e05a      	b.n	8007c8c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007be6:	2320      	movs	r3, #32
 8007be8:	2205      	movs	r2, #5
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fabf 	bl	800816e <SCSI_SenseCode>
    return -1;
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf4:	e04a      	b.n	8007c8c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d020      	beq.n	8007c46 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3302      	adds	r3, #2
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d105      	bne.n	8007c1a <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007c0e:	2206      	movs	r2, #6
 8007c10:	4920      	ldr	r1, [pc, #128]	; (8007c94 <SCSI_Inquiry+0xe0>)
 8007c12:	69b8      	ldr	r0, [r7, #24]
 8007c14:	f000 ffb4 	bl	8008b80 <SCSI_UpdateBotData>
 8007c18:	e037      	b.n	8007c8a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b80      	cmp	r3, #128	; 0x80
 8007c22:	d105      	bne.n	8007c30 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007c24:	2208      	movs	r2, #8
 8007c26:	491c      	ldr	r1, [pc, #112]	; (8007c98 <SCSI_Inquiry+0xe4>)
 8007c28:	69b8      	ldr	r0, [r7, #24]
 8007c2a:	f000 ffa9 	bl	8008b80 <SCSI_UpdateBotData>
 8007c2e:	e02c      	b.n	8007c8a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c36:	2324      	movs	r3, #36	; 0x24
 8007c38:	2205      	movs	r2, #5
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fa97 	bl	800816e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295
 8007c44:	e022      	b.n	8007c8c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c4c:	69d9      	ldr	r1, [r3, #28]
 8007c4e:	7afa      	ldrb	r2, [r7, #11]
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3305      	adds	r3, #5
 8007c66:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8bfa      	ldrh	r2, [r7, #30]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d303      	bcc.n	8007c7e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007c7e:	8bfb      	ldrh	r3, [r7, #30]
 8007c80:	461a      	mov	r2, r3
 8007c82:	6979      	ldr	r1, [r7, #20]
 8007c84:	69b8      	ldr	r0, [r7, #24]
 8007c86:	f000 ff7b 	bl	8008b80 <SCSI_UpdateBotData>
  }

  return 0;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	200000c4 	.word	0x200000c4
 8007c98:	200000cc 	.word	0x200000cc

08007c9c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbc:	e05f      	b.n	8007d7e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8007cd2:	7af8      	ldrb	r0, [r7, #11]
 8007cd4:	4798      	blx	r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007cda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d104      	bne.n	8007cec <SCSI_ReadCapacity10+0x50>
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d108      	bne.n	8007cfe <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007cec:	7af9      	ldrb	r1, [r7, #11]
 8007cee:	233a      	movs	r3, #58	; 0x3a
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fa3b 	bl	800816e <SCSI_SenseCode>
    return -1;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfc:	e03f      	b.n	8007d7e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d04:	3b01      	subs	r3, #1
 8007d06:	0e1b      	lsrs	r3, r3, #24
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d14:	3b01      	subs	r3, #1
 8007d16:	0c1b      	lsrs	r3, r3, #16
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d24:	3b01      	subs	r3, #1
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	3b01      	subs	r3, #1
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007d44:	161b      	asrs	r3, r3, #24
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007d52:	141b      	asrs	r3, r3, #16
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007d60:	0a1b      	lsrs	r3, r3, #8
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2208      	movs	r2, #8
 8007d7a:	60da      	str	r2, [r3, #12]

  return 0;
 8007d7c:	2300      	movs	r3, #0

}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b088      	sub	sp, #32
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d9a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8007da2:	f04f 33ff 	mov.w	r3, #4294967295
 8007da6:	e094      	b.n	8007ed2 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8007dbc:	7af8      	ldrb	r0, [r7, #11]
 8007dbe:	4798      	blx	r3
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <SCSI_ReadCapacity16+0x50>
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d108      	bne.n	8007de8 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007dd6:	7af9      	ldrb	r1, [r7, #11]
 8007dd8:	233a      	movs	r3, #58	; 0x3a
 8007dda:	2202      	movs	r2, #2
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f9c6 	bl	800816e <SCSI_SenseCode>
    return -1;
 8007de2:	f04f 33ff 	mov.w	r3, #4294967295
 8007de6:	e074      	b.n	8007ed2 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	330a      	adds	r3, #10
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	330b      	adds	r3, #11
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007df8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007e02:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	320d      	adds	r2, #13
 8007e08:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007e0a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007e10:	2300      	movs	r3, #0
 8007e12:	77fb      	strb	r3, [r7, #31]
 8007e14:	e007      	b.n	8007e26 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8007e16:	7ffb      	ldrb	r3, [r7, #31]
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007e20:	7ffb      	ldrb	r3, [r7, #31]
 8007e22:	3301      	adds	r3, #1
 8007e24:	77fb      	strb	r3, [r7, #31]
 8007e26:	7ffa      	ldrb	r2, [r7, #31]
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d3f2      	bcc.n	8007e16 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e36:	3b01      	subs	r3, #1
 8007e38:	0e1b      	lsrs	r3, r3, #24
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e46:	3b01      	subs	r3, #1
 8007e48:	0c1b      	lsrs	r3, r3, #16
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e56:	3b01      	subs	r3, #1
 8007e58:	0a1b      	lsrs	r3, r3, #8
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007e76:	161b      	asrs	r3, r3, #24
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007e84:	141b      	asrs	r3, r3, #16
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007e92:	0a1b      	lsrs	r3, r3, #8
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	330a      	adds	r3, #10
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	330b      	adds	r3, #11
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007eb8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007ec2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	320d      	adds	r2, #13
 8007ec8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007eca:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	60da      	str	r2, [r3, #12]

  return 0;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3720      	adds	r7, #32
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b088      	sub	sp, #32
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	607a      	str	r2, [r7, #4]
 8007ee6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eee:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8007ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8007efa:	e05c      	b.n	8007fb6 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f107 0214 	add.w	r2, r7, #20
 8007f08:	f107 0110 	add.w	r1, r7, #16
 8007f0c:	7af8      	ldrb	r0, [r7, #11]
 8007f0e:	4798      	blx	r3
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <SCSI_ReadFormatCapacity+0x4c>
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d108      	bne.n	8007f38 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f26:	7af9      	ldrb	r1, [r7, #11]
 8007f28:	233a      	movs	r3, #58	; 0x3a
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f91e 	bl	800816e <SCSI_SenseCode>
    return -1;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295
 8007f36:	e03e      	b.n	8007fb6 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	83fb      	strh	r3, [r7, #30]
 8007f3c:	e007      	b.n	8007f4e <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8007f3e:	8bfb      	ldrh	r3, [r7, #30]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	4413      	add	r3, r2
 8007f44:	2200      	movs	r2, #0
 8007f46:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007f48:	8bfb      	ldrh	r3, [r7, #30]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	83fb      	strh	r3, [r7, #30]
 8007f4e:	8bfb      	ldrh	r3, [r7, #30]
 8007f50:	2b0b      	cmp	r3, #11
 8007f52:	d9f4      	bls.n	8007f3e <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2208      	movs	r2, #8
 8007f58:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	0e1b      	lsrs	r3, r3, #24
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	0c1b      	lsrs	r3, r3, #16
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007f90:	8abb      	ldrh	r3, [r7, #20]
 8007f92:	141b      	asrs	r3, r3, #16
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007f9a:	8abb      	ldrh	r3, [r7, #20]
 8007f9c:	0a1b      	lsrs	r3, r3, #8
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007fa6:	8abb      	ldrh	r3, [r7, #20]
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	220c      	movs	r2, #12
 8007fb2:	60da      	str	r2, [r3, #12]

  return 0;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3720      	adds	r7, #32
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007fd6:	2317      	movs	r3, #23
 8007fd8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8007fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe4:	e011      	b.n	800800a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	8afa      	ldrh	r2, [r7, #22]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d303      	bcc.n	8007ffc <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007ffc:	8afb      	ldrh	r3, [r7, #22]
 8007ffe:	461a      	mov	r2, r3
 8008000:	4904      	ldr	r1, [pc, #16]	; (8008014 <SCSI_ModeSense6+0x54>)
 8008002:	6938      	ldr	r0, [r7, #16]
 8008004:	f000 fdbc 	bl	8008b80 <SCSI_UpdateBotData>

  return 0;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200000d4 	.word	0x200000d4

08008018 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	460b      	mov	r3, r1
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800802e:	231b      	movs	r3, #27
 8008030:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <SCSI_ModeSense10+0x26>
  {
    return -1;
 8008038:	f04f 33ff 	mov.w	r3, #4294967295
 800803c:	e011      	b.n	8008062 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3308      	adds	r3, #8
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	8afa      	ldrh	r2, [r7, #22]
 8008048:	429a      	cmp	r2, r3
 800804a:	d303      	bcc.n	8008054 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3308      	adds	r3, #8
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8008054:	8afb      	ldrh	r3, [r7, #22]
 8008056:	461a      	mov	r2, r3
 8008058:	4904      	ldr	r1, [pc, #16]	; (800806c <SCSI_ModeSense10+0x54>)
 800805a:	6938      	ldr	r0, [r7, #16]
 800805c:	f000 fd90 	bl	8008b80 <SCSI_UpdateBotData>

  return 0;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	200000ec 	.word	0x200000ec

08008070 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	460b      	mov	r3, r1
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008084:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <SCSI_RequestSense+0x22>
  {
    return -1;
 800808c:	f04f 33ff 	mov.w	r3, #4294967295
 8008090:	e069      	b.n	8008166 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80080a2:	2320      	movs	r3, #32
 80080a4:	2205      	movs	r2, #5
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f861 	bl	800816e <SCSI_SenseCode>
    return -1;
 80080ac:	f04f 33ff 	mov.w	r3, #4294967295
 80080b0:	e059      	b.n	8008166 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
 80080b6:	e007      	b.n	80080c8 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4413      	add	r3, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	3301      	adds	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b11      	cmp	r3, #17
 80080cc:	d9f4      	bls.n	80080b8 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2270      	movs	r2, #112	; 0x70
 80080d2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	220c      	movs	r2, #12
 80080d8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d02e      	beq.n	8008148 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80080f0:	461a      	mov	r2, r3
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3248      	adds	r2, #72	; 0x48
 80080f6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	3348      	adds	r3, #72	; 0x48
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	4413      	add	r3, r2
 800810c:	791a      	ldrb	r2, [r3, #4]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	3348      	adds	r3, #72	; 0x48
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	4413      	add	r3, r2
 8008120:	795a      	ldrb	r2, [r3, #5]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800812c:	3301      	adds	r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800813c:	2b04      	cmp	r3, #4
 800813e:	d103      	bne.n	8008148 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2212      	movs	r2, #18
 800814c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b12      	cmp	r3, #18
 8008156:	d805      	bhi.n	8008164 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3304      	adds	r3, #4
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800816e:	b480      	push	{r7}
 8008170:	b085      	sub	sp, #20
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	461a      	mov	r2, r3
 800817c:	4603      	mov	r3, r0
 800817e:	70fb      	strb	r3, [r7, #3]
 8008180:	460b      	mov	r3, r1
 8008182:	70bb      	strb	r3, [r7, #2]
 8008184:	4613      	mov	r3, r2
 8008186:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800818e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d02c      	beq.n	80081f0 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800819c:	461a      	mov	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3248      	adds	r2, #72	; 0x48
 80081a2:	78b9      	ldrb	r1, [r7, #2]
 80081a4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	3348      	adds	r3, #72	; 0x48
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	4413      	add	r3, r2
 80081b6:	787a      	ldrb	r2, [r7, #1]
 80081b8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	3348      	adds	r3, #72	; 0x48
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	2200      	movs	r2, #0
 80081ca:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d105      	bne.n	80081f2 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80081ee:	e000      	b.n	80081f2 <SCSI_SenseCode+0x84>
    return;
 80081f0:	bf00      	nop
  }
}
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	460b      	mov	r3, r1
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008210:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d102      	bne.n	800821e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8008218:	f04f 33ff 	mov.w	r3, #4294967295
 800821c:	e03b      	b.n	8008296 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008224:	2b01      	cmp	r3, #1
 8008226:	d10f      	bne.n	8008248 <SCSI_StartStopUnit+0x4c>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d108      	bne.n	8008248 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008236:	7af9      	ldrb	r1, [r7, #11]
 8008238:	2324      	movs	r3, #36	; 0x24
 800823a:	2205      	movs	r2, #5
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff ff96 	bl	800816e <SCSI_SenseCode>

    return -1;
 8008242:	f04f 33ff 	mov.w	r3, #4294967295
 8008246:	e026      	b.n	8008296 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b01      	cmp	r3, #1
 8008254:	d104      	bne.n	8008260 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800825e:	e016      	b.n	800828e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3304      	adds	r3, #4
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d104      	bne.n	8008278 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2202      	movs	r2, #2
 8008272:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8008276:	e00a      	b.n	800828e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	2b03      	cmp	r3, #3
 8008284:	d103      	bne.n	800828e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2200      	movs	r2, #0
 8008292:	60da      	str	r2, [r3, #12]

  return 0;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800829e:	b480      	push	{r7}
 80082a0:	b087      	sub	sp, #28
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	460b      	mov	r3, r1
 80082a8:	607a      	str	r2, [r7, #4]
 80082aa:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082b2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80082ba:	f04f 33ff 	mov.w	r3, #4294967295
 80082be:	e011      	b.n	80082e4 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3304      	adds	r3, #4
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80082d2:	e003      	b.n	80082dc <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2200      	movs	r2, #0
 80082e0:	60da      	str	r2, [r3, #12]

  return 0;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	460b      	mov	r3, r1
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008304:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d102      	bne.n	8008312 <SCSI_Read10+0x22>
  {
    return -1;
 800830c:	f04f 33ff 	mov.w	r3, #4294967295
 8008310:	e08a      	b.n	8008428 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	7a1b      	ldrb	r3, [r3, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d17c      	bne.n	8008414 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008320:	b25b      	sxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	db0a      	blt.n	800833c <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800832c:	2320      	movs	r3, #32
 800832e:	2205      	movs	r2, #5
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff ff1c 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008336:	f04f 33ff 	mov.w	r3, #4294967295
 800833a:	e075      	b.n	8008428 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008342:	2b02      	cmp	r3, #2
 8008344:	d108      	bne.n	8008358 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008346:	7af9      	ldrb	r1, [r7, #11]
 8008348:	233a      	movs	r3, #58	; 0x3a
 800834a:	2202      	movs	r2, #2
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff ff0e 	bl	800816e <SCSI_SenseCode>

      return -1;
 8008352:	f04f 33ff 	mov.w	r3, #4294967295
 8008356:	e067      	b.n	8008428 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	7afa      	ldrb	r2, [r7, #11]
 8008362:	4610      	mov	r0, r2
 8008364:	4798      	blx	r3
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d008      	beq.n	800837e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800836c:	7af9      	ldrb	r1, [r7, #11]
 800836e:	233a      	movs	r3, #58	; 0x3a
 8008370:	2202      	movs	r2, #2
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f7ff fefb 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008378:	f04f 33ff 	mov.w	r3, #4294967295
 800837c:	e054      	b.n	8008428 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3302      	adds	r3, #2
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3303      	adds	r3, #3
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800838e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3304      	adds	r3, #4
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008398:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	3205      	adds	r2, #5
 800839e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80083a0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3307      	adds	r3, #7
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	021b      	lsls	r3, r3, #8
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	3208      	adds	r2, #8
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80083ca:	7af9      	ldrb	r1, [r7, #11]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 faad 	bl	800892c <SCSI_CheckAddressRange>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	da02      	bge.n	80083de <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295
 80083dc:	e024      	b.n	8008428 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80083ea:	6979      	ldr	r1, [r7, #20]
 80083ec:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80083f0:	fb01 f303 	mul.w	r3, r1, r3
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d00a      	beq.n	800840e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80083fe:	2320      	movs	r3, #32
 8008400:	2205      	movs	r2, #5
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7ff feb3 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008408:	f04f 33ff 	mov.w	r3, #4294967295
 800840c:	e00c      	b.n	8008428 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2202      	movs	r2, #2
 8008412:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800841a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	4619      	mov	r1, r3
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 faab 	bl	800897c <SCSI_ProcessRead>
 8008426:	4603      	mov	r3, r0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	460b      	mov	r3, r1
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008444:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <SCSI_Read12+0x22>
  {
    return -1;
 800844c:	f04f 33ff 	mov.w	r3, #4294967295
 8008450:	e095      	b.n	800857e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	7a1b      	ldrb	r3, [r3, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f040 8087 	bne.w	800856a <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008462:	b25b      	sxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	db0a      	blt.n	800847e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800846e:	2320      	movs	r3, #32
 8008470:	2205      	movs	r2, #5
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7ff fe7b 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008478:	f04f 33ff 	mov.w	r3, #4294967295
 800847c:	e07f      	b.n	800857e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008484:	2b02      	cmp	r3, #2
 8008486:	d108      	bne.n	800849a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008488:	7af9      	ldrb	r1, [r7, #11]
 800848a:	233a      	movs	r3, #58	; 0x3a
 800848c:	2202      	movs	r2, #2
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff fe6d 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008494:	f04f 33ff 	mov.w	r3, #4294967295
 8008498:	e071      	b.n	800857e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	7afa      	ldrb	r2, [r7, #11]
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d008      	beq.n	80084c0 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80084ae:	7af9      	ldrb	r1, [r7, #11]
 80084b0:	233a      	movs	r3, #58	; 0x3a
 80084b2:	2202      	movs	r2, #2
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f7ff fe5a 	bl	800816e <SCSI_SenseCode>
      return -1;
 80084ba:	f04f 33ff 	mov.w	r3, #4294967295
 80084be:	e05e      	b.n	800857e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3302      	adds	r3, #2
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3303      	adds	r3, #3
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80084d0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3304      	adds	r3, #4
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80084da:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	3205      	adds	r2, #5
 80084e0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80084e2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3306      	adds	r3, #6
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3307      	adds	r3, #7
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084fa:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3308      	adds	r3, #8
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008504:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	3209      	adds	r2, #9
 800850a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800850c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008520:	7af9      	ldrb	r1, [r7, #11]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fa02 	bl	800892c <SCSI_CheckAddressRange>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	da02      	bge.n	8008534 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800852e:	f04f 33ff 	mov.w	r3, #4294967295
 8008532:	e024      	b.n	800857e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008540:	6979      	ldr	r1, [r7, #20]
 8008542:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8008546:	fb01 f303 	mul.w	r3, r1, r3
 800854a:	429a      	cmp	r2, r3
 800854c:	d00a      	beq.n	8008564 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008554:	2320      	movs	r3, #32
 8008556:	2205      	movs	r2, #5
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f7ff fe08 	bl	800816e <SCSI_SenseCode>
      return -1;
 800855e:	f04f 33ff 	mov.w	r3, #4294967295
 8008562:	e00c      	b.n	800857e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2202      	movs	r2, #2
 8008568:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008570:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008572:	7afb      	ldrb	r3, [r7, #11]
 8008574:	4619      	mov	r1, r3
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fa00 	bl	800897c <SCSI_ProcessRead>
 800857c:	4603      	mov	r3, r0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	460b      	mov	r3, r1
 8008590:	607a      	str	r2, [r7, #4]
 8008592:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800859a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <SCSI_Write10+0x22>
  {
    return -1;
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295
 80085a6:	e0af      	b.n	8008708 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	7a1b      	ldrb	r3, [r3, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 80a5 	bne.w	80086fc <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80085c2:	2320      	movs	r3, #32
 80085c4:	2205      	movs	r2, #5
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7ff fdd1 	bl	800816e <SCSI_SenseCode>
      return -1;
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295
 80085d0:	e09a      	b.n	8008708 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80085d8:	b25b      	sxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	da0a      	bge.n	80085f4 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80085e4:	2320      	movs	r3, #32
 80085e6:	2205      	movs	r2, #5
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7ff fdc0 	bl	800816e <SCSI_SenseCode>
      return -1;
 80085ee:	f04f 33ff 	mov.w	r3, #4294967295
 80085f2:	e089      	b.n	8008708 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	7afa      	ldrb	r2, [r7, #11]
 80085fe:	4610      	mov	r0, r2
 8008600:	4798      	blx	r3
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d008      	beq.n	800861a <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008608:	7af9      	ldrb	r1, [r7, #11]
 800860a:	233a      	movs	r3, #58	; 0x3a
 800860c:	2202      	movs	r2, #2
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff fdad 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008614:	f04f 33ff 	mov.w	r3, #4294967295
 8008618:	e076      	b.n	8008708 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	7afa      	ldrb	r2, [r7, #11]
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800862e:	7af9      	ldrb	r1, [r7, #11]
 8008630:	2327      	movs	r3, #39	; 0x27
 8008632:	2202      	movs	r2, #2
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff fd9a 	bl	800816e <SCSI_SenseCode>
      return -1;
 800863a:	f04f 33ff 	mov.w	r3, #4294967295
 800863e:	e063      	b.n	8008708 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3302      	adds	r3, #2
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3303      	adds	r3, #3
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008650:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3304      	adds	r3, #4
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800865a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	3205      	adds	r2, #5
 8008660:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008662:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3307      	adds	r3, #7
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	3208      	adds	r2, #8
 8008676:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008678:	431a      	orrs	r2, r3
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800868c:	7af9      	ldrb	r1, [r7, #11]
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 f94c 	bl	800892c <SCSI_CheckAddressRange>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	da02      	bge.n	80086a0 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800869a:	f04f 33ff 	mov.w	r3, #4294967295
 800869e:	e033      	b.n	8008708 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80086ac:	fb02 f303 	mul.w	r3, r2, r3
 80086b0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d00a      	beq.n	80086d4 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80086c4:	2320      	movs	r3, #32
 80086c6:	2205      	movs	r2, #5
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fd50 	bl	800816e <SCSI_SenseCode>
      return -1;
 80086ce:	f04f 33ff 	mov.w	r3, #4294967295
 80086d2:	e019      	b.n	8008708 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086da:	bf28      	it	cs
 80086dc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80086e0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2201      	movs	r2, #1
 80086e6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f103 0210 	add.w	r2, r3, #16
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2101      	movs	r1, #1
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f002 f9b6 	bl	800aa64 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	e005      	b.n	8008708 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	4619      	mov	r1, r3
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f9b4 	bl	8008a6e <SCSI_ProcessWrite>
 8008706:	4603      	mov	r3, r0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	460b      	mov	r3, r1
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008724:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <SCSI_Write12+0x22>
  {
    return -1;
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
 8008730:	e0bf      	b.n	80088b2 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	7a1b      	ldrb	r3, [r3, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f040 80b5 	bne.w	80088a6 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10a      	bne.n	800875c <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800874c:	2320      	movs	r3, #32
 800874e:	2205      	movs	r2, #5
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff fd0c 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008756:	f04f 33ff 	mov.w	r3, #4294967295
 800875a:	e0aa      	b.n	80088b2 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008762:	b25b      	sxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	da0a      	bge.n	800877e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800876e:	2320      	movs	r3, #32
 8008770:	2205      	movs	r2, #5
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7ff fcfb 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008778:	f04f 33ff 	mov.w	r3, #4294967295
 800877c:	e099      	b.n	80088b2 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	7afa      	ldrb	r2, [r7, #11]
 8008788:	4610      	mov	r0, r2
 800878a:	4798      	blx	r3
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008792:	7af9      	ldrb	r1, [r7, #11]
 8008794:	233a      	movs	r3, #58	; 0x3a
 8008796:	2202      	movs	r2, #2
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f7ff fce8 	bl	800816e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2205      	movs	r2, #5
 80087a2:	721a      	strb	r2, [r3, #8]
      return -1;
 80087a4:	f04f 33ff 	mov.w	r3, #4294967295
 80087a8:	e083      	b.n	80088b2 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	7afa      	ldrb	r2, [r7, #11]
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80087be:	7af9      	ldrb	r1, [r7, #11]
 80087c0:	2327      	movs	r3, #39	; 0x27
 80087c2:	2202      	movs	r2, #2
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fcd2 	bl	800816e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2205      	movs	r2, #5
 80087ce:	721a      	strb	r2, [r3, #8]
      return -1;
 80087d0:	f04f 33ff 	mov.w	r3, #4294967295
 80087d4:	e06d      	b.n	80088b2 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3302      	adds	r3, #2
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3303      	adds	r3, #3
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80087e6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3304      	adds	r3, #4
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80087f0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	3205      	adds	r2, #5
 80087f6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80087f8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3306      	adds	r3, #6
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3307      	adds	r3, #7
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008810:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3308      	adds	r3, #8
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800881a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	3209      	adds	r2, #9
 8008820:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008822:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008836:	7af9      	ldrb	r1, [r7, #11]
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 f877 	bl	800892c <SCSI_CheckAddressRange>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	da02      	bge.n	800884a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008844:	f04f 33ff 	mov.w	r3, #4294967295
 8008848:	e033      	b.n	80088b2 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d00a      	beq.n	800887e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800886e:	2320      	movs	r3, #32
 8008870:	2205      	movs	r2, #5
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f7ff fc7b 	bl	800816e <SCSI_SenseCode>
      return -1;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	e019      	b.n	80088b2 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008884:	bf28      	it	cs
 8008886:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800888a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2201      	movs	r2, #1
 8008890:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f103 0210 	add.w	r2, r3, #16
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2101      	movs	r1, #1
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f002 f8e1 	bl	800aa64 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	e005      	b.n	80088b2 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	4619      	mov	r1, r3
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 f8df 	bl	8008a6e <SCSI_ProcessWrite>
 80088b0:	4603      	mov	r3, r0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	460b      	mov	r3, r1
 80088c4:	607a      	str	r2, [r7, #4]
 80088c6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ce:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d102      	bne.n	80088dc <SCSI_Verify10+0x22>
  {
    return -1;
 80088d6:	f04f 33ff 	mov.w	r3, #4294967295
 80088da:	e023      	b.n	8008924 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3301      	adds	r3, #1
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d008      	beq.n	80088fc <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80088ea:	7af9      	ldrb	r1, [r7, #11]
 80088ec:	2324      	movs	r3, #36	; 0x24
 80088ee:	2205      	movs	r2, #5
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff fc3c 	bl	800816e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	e013      	b.n	8008924 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008908:	7af9      	ldrb	r1, [r7, #11]
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 f80e 	bl	800892c <SCSI_CheckAddressRange>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	da02      	bge.n	800891c <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8008916:	f04f 33ff 	mov.w	r3, #4294967295
 800891a:	e003      	b.n	8008924 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2200      	movs	r2, #0
 8008920:	60da      	str	r2, [r3, #12]

  return 0;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	460b      	mov	r3, r1
 800893a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008942:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d102      	bne.n	8008950 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800894a:	f04f 33ff 	mov.w	r3, #4294967295
 800894e:	e011      	b.n	8008974 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	441a      	add	r2, r3
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800895c:	429a      	cmp	r2, r3
 800895e:	d908      	bls.n	8008972 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008960:	7af9      	ldrb	r1, [r7, #11]
 8008962:	2321      	movs	r3, #33	; 0x21
 8008964:	2205      	movs	r2, #5
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f7ff fc01 	bl	800816e <SCSI_SenseCode>
    return -1;
 800896c:	f04f 33ff 	mov.w	r3, #4294967295
 8008970:	e000      	b.n	8008974 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800897c:	b590      	push	{r4, r7, lr}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800898e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800899c:	fb02 f303 	mul.w	r3, r2, r3
 80089a0:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <SCSI_ProcessRead+0x32>
  {
    return -1;
 80089a8:	f04f 33ff 	mov.w	r3, #4294967295
 80089ac:	e05b      	b.n	8008a66 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089b4:	bf28      	it	cs
 80089b6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80089ba:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089c2:	691c      	ldr	r4, [r3, #16]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f103 0110 	add.w	r1, r3, #16
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80089d6:	4618      	mov	r0, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80089de:	b29b      	uxth	r3, r3
 80089e0:	78f8      	ldrb	r0, [r7, #3]
 80089e2:	47a0      	blx	r4
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da08      	bge.n	80089fc <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80089ea:	78f9      	ldrb	r1, [r7, #3]
 80089ec:	2311      	movs	r3, #17
 80089ee:	2204      	movs	r2, #4
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fbbc 	bl	800816e <SCSI_SenseCode>
    return -1;
 80089f6:	f04f 33ff 	mov.w	r3, #4294967295
 80089fa:	e034      	b.n	8008a66 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f103 0210 	add.w	r2, r3, #16
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2181      	movs	r1, #129	; 0x81
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 fff4 	bl	800a9f4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008a18:	4619      	mov	r1, r3
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a20:	441a      	add	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008a34:	4619      	mov	r1, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a3c:	1ad2      	subs	r2, r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	1ad2      	subs	r2, r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2203      	movs	r2, #3
 8008a62:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd90      	pop	{r4, r7, pc}

08008a6e <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008a6e:	b590      	push	{r4, r7, lr}
 8008a70:	b085      	sub	sp, #20
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a80:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8008a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9e:	e06b      	b.n	8008b78 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa6:	bf28      	it	cs
 8008aa8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008aac:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ab4:	695c      	ldr	r4, [r3, #20]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f103 0110 	add.w	r1, r3, #16
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008ac8:	4618      	mov	r0, r3
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	78f8      	ldrb	r0, [r7, #3]
 8008ad4:	47a0      	blx	r4
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da08      	bge.n	8008aee <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008adc:	78f9      	ldrb	r1, [r7, #3]
 8008ade:	2303      	movs	r3, #3
 8008ae0:	2204      	movs	r2, #4
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff fb43 	bl	800816e <SCSI_SenseCode>
    return -1;
 8008ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aec:	e044      	b.n	8008b78 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008afa:	4619      	mov	r1, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b02:	441a      	add	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008b16:	4619      	mov	r1, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b1e:	1ad2      	subs	r2, r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d104      	bne.n	8008b4a <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008b40:	2100      	movs	r1, #0
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fe fdd8 	bl	80076f8 <MSC_BOT_SendCSW>
 8008b48:	e015      	b.n	8008b76 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008b56:	fb02 f303 	mul.w	r3, r2, r3
 8008b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5e:	bf28      	it	cs
 8008b60:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008b64:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f103 0210 	add.w	r2, r3, #16
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2101      	movs	r1, #1
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 ff77 	bl	800aa64 <USBD_LL_PrepareReceive>
  }

  return 0;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd90      	pop	{r4, r7, pc}

08008b80 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008b98:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9c:	e013      	b.n	8008bc6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8008b9e:	8afa      	ldrh	r2, [r7, #22]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008ba4:	e00b      	b.n	8008bbe <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008ba6:	8afb      	ldrh	r3, [r7, #22]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008bac:	8afb      	ldrh	r3, [r7, #22]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	441a      	add	r2, r3
 8008bb2:	8afb      	ldrh	r3, [r7, #22]
 8008bb4:	7811      	ldrb	r1, [r2, #0]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	460a      	mov	r2, r1
 8008bbc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008bbe:	8afb      	ldrh	r3, [r7, #22]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1f0      	bne.n	8008ba6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e01f      	b.n	8008c2a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	79fa      	ldrb	r2, [r7, #7]
 8008c1c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f001 fcf4 	bl	800a60c <USBD_LL_Init>
 8008c24:	4603      	mov	r3, r0
 8008c26:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e016      	b.n	8008c78 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	f107 020e 	add.w	r2, r7, #14
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4798      	blx	r3
 8008c6e:	4602      	mov	r2, r0
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 fd09 	bl	800a6a0 <USBD_LL_Start>
 8008c8e:	4603      	mov	r3, r0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d007      	beq.n	8008d0c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	78fa      	ldrb	r2, [r7, #3]
 8008d06:	4611      	mov	r1, r2
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	4798      	blx	r3
  }

  return USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 ffb9 	bl	8009ca0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d4a:	f003 031f 	and.w	r3, r3, #31
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d01a      	beq.n	8008d88 <USBD_LL_SetupStage+0x72>
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d822      	bhi.n	8008d9c <USBD_LL_SetupStage+0x86>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <USBD_LL_SetupStage+0x4a>
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d00a      	beq.n	8008d74 <USBD_LL_SetupStage+0x5e>
 8008d5e:	e01d      	b.n	8008d9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fa61 	bl	8009230 <USBD_StdDevReq>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]
      break;
 8008d72:	e020      	b.n	8008db6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fac5 	bl	800930c <USBD_StdItfReq>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]
      break;
 8008d86:	e016      	b.n	8008db6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fb04 	bl	800939e <USBD_StdEPReq>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]
      break;
 8008d9a:	e00c      	b.n	8008db6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008da2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 fd54 	bl	800a858 <USBD_LL_StallEP>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]
      break;
 8008db4:	bf00      	nop
  }

  return ret;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d138      	bne.n	8008e46 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d14a      	bne.n	8008e7c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	689a      	ldr	r2, [r3, #8]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d913      	bls.n	8008e1a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	1ad2      	subs	r2, r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	bf28      	it	cs
 8008e0c:	4613      	movcs	r3, r2
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f001 f81b 	bl	8009e4e <USBD_CtlContinueRx>
 8008e18:	e030      	b.n	8008e7c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d10b      	bne.n	8008e3e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f001 f816 	bl	8009e70 <USBD_CtlSendStatus>
 8008e44:	e01a      	b.n	8008e7c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d114      	bne.n	8008e7c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00e      	beq.n	8008e7c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	7afa      	ldrb	r2, [r7, #11]
 8008e68:	4611      	mov	r1, r2
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	e000      	b.n	8008e7e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	607a      	str	r2, [r7, #4]
 8008e92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e94:	7afb      	ldrb	r3, [r7, #11]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d16b      	bne.n	8008f72 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3314      	adds	r3, #20
 8008e9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d156      	bne.n	8008f58 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d914      	bls.n	8008ee0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	689a      	ldr	r2, [r3, #8]
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	6879      	ldr	r1, [r7, #4]
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 ffad 	bl	8009e2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f001 fdc3 	bl	800aa64 <USBD_LL_PrepareReceive>
 8008ede:	e03b      	b.n	8008f58 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	68da      	ldr	r2, [r3, #12]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d11c      	bne.n	8008f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d316      	bcc.n	8008f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d20f      	bcs.n	8008f26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f06:	2200      	movs	r2, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 ff8e 	bl	8009e2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f18:	2300      	movs	r3, #0
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f001 fda0 	bl	800aa64 <USBD_LL_PrepareReceive>
 8008f24:	e018      	b.n	8008f58 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d10b      	bne.n	8008f4a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f4a:	2180      	movs	r1, #128	; 0x80
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f001 fc83 	bl	800a858 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 ff9f 	bl	8009e96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d122      	bne.n	8008fa8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff fe98 	bl	8008c98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f70:	e01a      	b.n	8008fa8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d114      	bne.n	8008fa8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00e      	beq.n	8008fa8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	7afa      	ldrb	r2, [r7, #11]
 8008f94:	4611      	mov	r1, r2
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	4798      	blx	r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
 8008fa6:	e000      	b.n	8008faa <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e02f      	b.n	8009046 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00f      	beq.n	8009010 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d009      	beq.n	8009010 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	6852      	ldr	r2, [r2, #4]
 8009008:	b2d2      	uxtb	r2, r2
 800900a:	4611      	mov	r1, r2
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009010:	2340      	movs	r3, #64	; 0x40
 8009012:	2200      	movs	r2, #0
 8009014:	2100      	movs	r1, #0
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 fb74 	bl	800a704 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2240      	movs	r2, #64	; 0x40
 8009028:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	2200      	movs	r2, #0
 8009030:	2180      	movs	r1, #128	; 0x80
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fb66 	bl	800a704 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2240      	movs	r2, #64	; 0x40
 8009042:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	78fa      	ldrb	r2, [r7, #3]
 800905e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907c:	b2da      	uxtb	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2204      	movs	r2, #4
 8009088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d106      	bne.n	80090bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80090dc:	2303      	movs	r3, #3
 80090de:	e012      	b.n	8009106 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d10b      	bne.n	8009104 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	e014      	b.n	8009152 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b03      	cmp	r3, #3
 8009132:	d10d      	bne.n	8009150 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	4611      	mov	r1, r2
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009170:	2303      	movs	r3, #3
 8009172:	e014      	b.n	800919e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b03      	cmp	r3, #3
 800917e:	d10d      	bne.n	800919c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	2b00      	cmp	r3, #0
 800918a:	d007      	beq.n	800919c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	78fa      	ldrb	r2, [r7, #3]
 8009196:	4611      	mov	r1, r2
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6852      	ldr	r2, [r2, #4]
 80091e2:	b2d2      	uxtb	r2, r2
 80091e4:	4611      	mov	r1, r2
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	4798      	blx	r3
  }

  return USBD_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	3301      	adds	r3, #1
 800920a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009212:	8a3b      	ldrh	r3, [r7, #16]
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	b21a      	sxth	r2, r3
 8009218:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800921c:	4313      	orrs	r3, r2
 800921e:	b21b      	sxth	r3, r3
 8009220:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009222:	89fb      	ldrh	r3, [r7, #14]
}
 8009224:	4618      	mov	r0, r3
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009246:	2b40      	cmp	r3, #64	; 0x40
 8009248:	d005      	beq.n	8009256 <USBD_StdDevReq+0x26>
 800924a:	2b40      	cmp	r3, #64	; 0x40
 800924c:	d853      	bhi.n	80092f6 <USBD_StdDevReq+0xc6>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <USBD_StdDevReq+0x3a>
 8009252:	2b20      	cmp	r3, #32
 8009254:	d14f      	bne.n	80092f6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	4798      	blx	r3
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]
      break;
 8009268:	e04a      	b.n	8009300 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	785b      	ldrb	r3, [r3, #1]
 800926e:	2b09      	cmp	r3, #9
 8009270:	d83b      	bhi.n	80092ea <USBD_StdDevReq+0xba>
 8009272:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <USBD_StdDevReq+0x48>)
 8009274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009278:	080092cd 	.word	0x080092cd
 800927c:	080092e1 	.word	0x080092e1
 8009280:	080092eb 	.word	0x080092eb
 8009284:	080092d7 	.word	0x080092d7
 8009288:	080092eb 	.word	0x080092eb
 800928c:	080092ab 	.word	0x080092ab
 8009290:	080092a1 	.word	0x080092a1
 8009294:	080092eb 	.word	0x080092eb
 8009298:	080092c3 	.word	0x080092c3
 800929c:	080092b5 	.word	0x080092b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f9de 	bl	8009664 <USBD_GetDescriptor>
          break;
 80092a8:	e024      	b.n	80092f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fb6d 	bl	800998c <USBD_SetAddress>
          break;
 80092b2:	e01f      	b.n	80092f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fbac 	bl	8009a14 <USBD_SetConfig>
 80092bc:	4603      	mov	r3, r0
 80092be:	73fb      	strb	r3, [r7, #15]
          break;
 80092c0:	e018      	b.n	80092f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fc4b 	bl	8009b60 <USBD_GetConfig>
          break;
 80092ca:	e013      	b.n	80092f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fc7c 	bl	8009bcc <USBD_GetStatus>
          break;
 80092d4:	e00e      	b.n	80092f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fcab 	bl	8009c34 <USBD_SetFeature>
          break;
 80092de:	e009      	b.n	80092f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fcba 	bl	8009c5c <USBD_ClrFeature>
          break;
 80092e8:	e004      	b.n	80092f4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fd11 	bl	8009d14 <USBD_CtlError>
          break;
 80092f2:	bf00      	nop
      }
      break;
 80092f4:	e004      	b.n	8009300 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fd0b 	bl	8009d14 <USBD_CtlError>
      break;
 80092fe:	bf00      	nop
  }

  return ret;
 8009300:	7bfb      	ldrb	r3, [r7, #15]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop

0800930c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	d005      	beq.n	8009332 <USBD_StdItfReq+0x26>
 8009326:	2b40      	cmp	r3, #64	; 0x40
 8009328:	d82f      	bhi.n	800938a <USBD_StdItfReq+0x7e>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <USBD_StdItfReq+0x26>
 800932e:	2b20      	cmp	r3, #32
 8009330:	d12b      	bne.n	800938a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009338:	b2db      	uxtb	r3, r3
 800933a:	3b01      	subs	r3, #1
 800933c:	2b02      	cmp	r3, #2
 800933e:	d81d      	bhi.n	800937c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	889b      	ldrh	r3, [r3, #4]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b01      	cmp	r3, #1
 8009348:	d813      	bhi.n	8009372 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	88db      	ldrh	r3, [r3, #6]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d110      	bne.n	8009386 <USBD_StdItfReq+0x7a>
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10d      	bne.n	8009386 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fd80 	bl	8009e70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009370:	e009      	b.n	8009386 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fccd 	bl	8009d14 <USBD_CtlError>
          break;
 800937a:	e004      	b.n	8009386 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fcc8 	bl	8009d14 <USBD_CtlError>
          break;
 8009384:	e000      	b.n	8009388 <USBD_StdItfReq+0x7c>
          break;
 8009386:	bf00      	nop
      }
      break;
 8009388:	e004      	b.n	8009394 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fcc1 	bl	8009d14 <USBD_CtlError>
      break;
 8009392:	bf00      	nop
  }

  return ret;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	889b      	ldrh	r3, [r3, #4]
 80093b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093ba:	2b40      	cmp	r3, #64	; 0x40
 80093bc:	d007      	beq.n	80093ce <USBD_StdEPReq+0x30>
 80093be:	2b40      	cmp	r3, #64	; 0x40
 80093c0:	f200 8145 	bhi.w	800964e <USBD_StdEPReq+0x2b0>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00c      	beq.n	80093e2 <USBD_StdEPReq+0x44>
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	f040 8140 	bne.w	800964e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	4798      	blx	r3
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]
      break;
 80093e0:	e13a      	b.n	8009658 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d007      	beq.n	80093fa <USBD_StdEPReq+0x5c>
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	f300 8129 	bgt.w	8009642 <USBD_StdEPReq+0x2a4>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d07f      	beq.n	80094f4 <USBD_StdEPReq+0x156>
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d03c      	beq.n	8009472 <USBD_StdEPReq+0xd4>
 80093f8:	e123      	b.n	8009642 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d002      	beq.n	800940c <USBD_StdEPReq+0x6e>
 8009406:	2b03      	cmp	r3, #3
 8009408:	d016      	beq.n	8009438 <USBD_StdEPReq+0x9a>
 800940a:	e02c      	b.n	8009466 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00d      	beq.n	800942e <USBD_StdEPReq+0x90>
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b80      	cmp	r3, #128	; 0x80
 8009416:	d00a      	beq.n	800942e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 fa1b 	bl	800a858 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009422:	2180      	movs	r1, #128	; 0x80
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 fa17 	bl	800a858 <USBD_LL_StallEP>
 800942a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800942c:	e020      	b.n	8009470 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fc6f 	bl	8009d14 <USBD_CtlError>
              break;
 8009436:	e01b      	b.n	8009470 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	885b      	ldrh	r3, [r3, #2]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10e      	bne.n	800945e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00b      	beq.n	800945e <USBD_StdEPReq+0xc0>
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	2b80      	cmp	r3, #128	; 0x80
 800944a:	d008      	beq.n	800945e <USBD_StdEPReq+0xc0>
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	88db      	ldrh	r3, [r3, #6]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009454:	7bbb      	ldrb	r3, [r7, #14]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 f9fd 	bl	800a858 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fd06 	bl	8009e70 <USBD_CtlSendStatus>

              break;
 8009464:	e004      	b.n	8009470 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fc53 	bl	8009d14 <USBD_CtlError>
              break;
 800946e:	bf00      	nop
          }
          break;
 8009470:	e0ec      	b.n	800964c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b02      	cmp	r3, #2
 800947c:	d002      	beq.n	8009484 <USBD_StdEPReq+0xe6>
 800947e:	2b03      	cmp	r3, #3
 8009480:	d016      	beq.n	80094b0 <USBD_StdEPReq+0x112>
 8009482:	e030      	b.n	80094e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00d      	beq.n	80094a6 <USBD_StdEPReq+0x108>
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b80      	cmp	r3, #128	; 0x80
 800948e:	d00a      	beq.n	80094a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 f9df 	bl	800a858 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800949a:	2180      	movs	r1, #128	; 0x80
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 f9db 	bl	800a858 <USBD_LL_StallEP>
 80094a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094a4:	e025      	b.n	80094f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fc33 	bl	8009d14 <USBD_CtlError>
              break;
 80094ae:	e020      	b.n	80094f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	885b      	ldrh	r3, [r3, #2]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d11b      	bne.n	80094f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 f9fc 	bl	800a8c4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fccf 	bl	8009e70 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	4798      	blx	r3
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80094e4:	e004      	b.n	80094f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fc13 	bl	8009d14 <USBD_CtlError>
              break;
 80094ee:	e000      	b.n	80094f2 <USBD_StdEPReq+0x154>
              break;
 80094f0:	bf00      	nop
          }
          break;
 80094f2:	e0ab      	b.n	800964c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d002      	beq.n	8009506 <USBD_StdEPReq+0x168>
 8009500:	2b03      	cmp	r3, #3
 8009502:	d032      	beq.n	800956a <USBD_StdEPReq+0x1cc>
 8009504:	e097      	b.n	8009636 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d007      	beq.n	800951c <USBD_StdEPReq+0x17e>
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b80      	cmp	r3, #128	; 0x80
 8009510:	d004      	beq.n	800951c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fbfd 	bl	8009d14 <USBD_CtlError>
                break;
 800951a:	e091      	b.n	8009640 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800951c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009520:	2b00      	cmp	r3, #0
 8009522:	da0b      	bge.n	800953c <USBD_StdEPReq+0x19e>
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	3310      	adds	r3, #16
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	4413      	add	r3, r2
 8009538:	3304      	adds	r3, #4
 800953a:	e00b      	b.n	8009554 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009542:	4613      	mov	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	3304      	adds	r3, #4
 8009554:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2202      	movs	r2, #2
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fc47 	bl	8009df6 <USBD_CtlSendData>
              break;
 8009568:	e06a      	b.n	8009640 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800956a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800956e:	2b00      	cmp	r3, #0
 8009570:	da11      	bge.n	8009596 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	f003 020f 	and.w	r2, r3, #15
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	440b      	add	r3, r1
 8009584:	3324      	adds	r3, #36	; 0x24
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d117      	bne.n	80095bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fbc0 	bl	8009d14 <USBD_CtlError>
                  break;
 8009594:	e054      	b.n	8009640 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	f003 020f 	and.w	r2, r3, #15
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	440b      	add	r3, r1
 80095a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d104      	bne.n	80095bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fbad 	bl	8009d14 <USBD_CtlError>
                  break;
 80095ba:	e041      	b.n	8009640 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	da0b      	bge.n	80095dc <USBD_StdEPReq+0x23e>
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	3310      	adds	r3, #16
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	4413      	add	r3, r2
 80095d8:	3304      	adds	r3, #4
 80095da:	e00b      	b.n	80095f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	3304      	adds	r3, #4
 80095f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <USBD_StdEPReq+0x264>
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	2b80      	cmp	r3, #128	; 0x80
 8009600:	d103      	bne.n	800960a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2200      	movs	r2, #0
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	e00e      	b.n	8009628 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800960a:	7bbb      	ldrb	r3, [r7, #14]
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 f98e 	bl	800a930 <USBD_LL_IsStallEP>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2201      	movs	r2, #1
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e002      	b.n	8009628 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2202      	movs	r2, #2
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fbe1 	bl	8009df6 <USBD_CtlSendData>
              break;
 8009634:	e004      	b.n	8009640 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fb6b 	bl	8009d14 <USBD_CtlError>
              break;
 800963e:	bf00      	nop
          }
          break;
 8009640:	e004      	b.n	800964c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fb65 	bl	8009d14 <USBD_CtlError>
          break;
 800964a:	bf00      	nop
      }
      break;
 800964c:	e004      	b.n	8009658 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fb5f 	bl	8009d14 <USBD_CtlError>
      break;
 8009656:	bf00      	nop
  }

  return ret;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	885b      	ldrh	r3, [r3, #2]
 800967e:	0a1b      	lsrs	r3, r3, #8
 8009680:	b29b      	uxth	r3, r3
 8009682:	3b01      	subs	r3, #1
 8009684:	2b0e      	cmp	r3, #14
 8009686:	f200 8152 	bhi.w	800992e <USBD_GetDescriptor+0x2ca>
 800968a:	a201      	add	r2, pc, #4	; (adr r2, 8009690 <USBD_GetDescriptor+0x2c>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	08009701 	.word	0x08009701
 8009694:	08009719 	.word	0x08009719
 8009698:	08009759 	.word	0x08009759
 800969c:	0800992f 	.word	0x0800992f
 80096a0:	0800992f 	.word	0x0800992f
 80096a4:	080098cf 	.word	0x080098cf
 80096a8:	080098fb 	.word	0x080098fb
 80096ac:	0800992f 	.word	0x0800992f
 80096b0:	0800992f 	.word	0x0800992f
 80096b4:	0800992f 	.word	0x0800992f
 80096b8:	0800992f 	.word	0x0800992f
 80096bc:	0800992f 	.word	0x0800992f
 80096c0:	0800992f 	.word	0x0800992f
 80096c4:	0800992f 	.word	0x0800992f
 80096c8:	080096cd 	.word	0x080096cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	7c12      	ldrb	r2, [r2, #16]
 80096e4:	f107 0108 	add.w	r1, r7, #8
 80096e8:	4610      	mov	r0, r2
 80096ea:	4798      	blx	r3
 80096ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096ee:	e126      	b.n	800993e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fb0e 	bl	8009d14 <USBD_CtlError>
        err++;
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	3301      	adds	r3, #1
 80096fc:	72fb      	strb	r3, [r7, #11]
      break;
 80096fe:	e11e      	b.n	800993e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	7c12      	ldrb	r2, [r2, #16]
 800970c:	f107 0108 	add.w	r1, r7, #8
 8009710:	4610      	mov	r0, r2
 8009712:	4798      	blx	r3
 8009714:	60f8      	str	r0, [r7, #12]
      break;
 8009716:	e112      	b.n	800993e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	7c1b      	ldrb	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10d      	bne.n	800973c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009728:	f107 0208 	add.w	r2, r7, #8
 800972c:	4610      	mov	r0, r2
 800972e:	4798      	blx	r3
 8009730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3301      	adds	r3, #1
 8009736:	2202      	movs	r2, #2
 8009738:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800973a:	e100      	b.n	800993e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	f107 0208 	add.w	r2, r7, #8
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	2202      	movs	r2, #2
 8009754:	701a      	strb	r2, [r3, #0]
      break;
 8009756:	e0f2      	b.n	800993e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	885b      	ldrh	r3, [r3, #2]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b05      	cmp	r3, #5
 8009760:	f200 80ac 	bhi.w	80098bc <USBD_GetDescriptor+0x258>
 8009764:	a201      	add	r2, pc, #4	; (adr r2, 800976c <USBD_GetDescriptor+0x108>)
 8009766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976a:	bf00      	nop
 800976c:	08009785 	.word	0x08009785
 8009770:	080097b9 	.word	0x080097b9
 8009774:	080097ed 	.word	0x080097ed
 8009778:	08009821 	.word	0x08009821
 800977c:	08009855 	.word	0x08009855
 8009780:	08009889 	.word	0x08009889
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e091      	b.n	80098cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fab2 	bl	8009d14 <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e089      	b.n	80098cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e077      	b.n	80098cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa98 	bl	8009d14 <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e06f      	b.n	80098cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e05d      	b.n	80098cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa7e 	bl	8009d14 <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e055      	b.n	80098cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e043      	b.n	80098cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa64 	bl	8009d14 <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e03b      	b.n	80098cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009876:	e029      	b.n	80098cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa4a 	bl	8009d14 <USBD_CtlError>
            err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
          break;
 8009886:	e021      	b.n	80098cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	7c12      	ldrb	r2, [r2, #16]
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098aa:	e00f      	b.n	80098cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa30 	bl	8009d14 <USBD_CtlError>
            err++;
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	3301      	adds	r3, #1
 80098b8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ba:	e007      	b.n	80098cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa28 	bl	8009d14 <USBD_CtlError>
          err++;
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	3301      	adds	r3, #1
 80098c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80098ca:	bf00      	nop
      }
      break;
 80098cc:	e037      	b.n	800993e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7c1b      	ldrb	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098de:	f107 0208 	add.w	r2, r7, #8
 80098e2:	4610      	mov	r0, r2
 80098e4:	4798      	blx	r3
 80098e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098e8:	e029      	b.n	800993e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fa11 	bl	8009d14 <USBD_CtlError>
        err++;
 80098f2:	7afb      	ldrb	r3, [r7, #11]
 80098f4:	3301      	adds	r3, #1
 80098f6:	72fb      	strb	r3, [r7, #11]
      break;
 80098f8:	e021      	b.n	800993e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7c1b      	ldrb	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10d      	bne.n	800991e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990a:	f107 0208 	add.w	r2, r7, #8
 800990e:	4610      	mov	r0, r2
 8009910:	4798      	blx	r3
 8009912:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3301      	adds	r3, #1
 8009918:	2207      	movs	r2, #7
 800991a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800991c:	e00f      	b.n	800993e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f9f7 	bl	8009d14 <USBD_CtlError>
        err++;
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	3301      	adds	r3, #1
 800992a:	72fb      	strb	r3, [r7, #11]
      break;
 800992c:	e007      	b.n	800993e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f9ef 	bl	8009d14 <USBD_CtlError>
      err++;
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	3301      	adds	r3, #1
 800993a:	72fb      	strb	r3, [r7, #11]
      break;
 800993c:	bf00      	nop
  }

  if (err != 0U)
 800993e:	7afb      	ldrb	r3, [r7, #11]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d11e      	bne.n	8009982 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	88db      	ldrh	r3, [r3, #6]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d016      	beq.n	800997a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800994c:	893b      	ldrh	r3, [r7, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00e      	beq.n	8009970 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	88da      	ldrh	r2, [r3, #6]
 8009956:	893b      	ldrh	r3, [r7, #8]
 8009958:	4293      	cmp	r3, r2
 800995a:	bf28      	it	cs
 800995c:	4613      	movcs	r3, r2
 800995e:	b29b      	uxth	r3, r3
 8009960:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009962:	893b      	ldrh	r3, [r7, #8]
 8009964:	461a      	mov	r2, r3
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fa44 	bl	8009df6 <USBD_CtlSendData>
 800996e:	e009      	b.n	8009984 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f9ce 	bl	8009d14 <USBD_CtlError>
 8009978:	e004      	b.n	8009984 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa78 	bl	8009e70 <USBD_CtlSendStatus>
 8009980:	e000      	b.n	8009984 <USBD_GetDescriptor+0x320>
    return;
 8009982:	bf00      	nop
  }
}
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop

0800998c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	889b      	ldrh	r3, [r3, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d131      	bne.n	8009a02 <USBD_SetAddress+0x76>
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	88db      	ldrh	r3, [r3, #6]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d12d      	bne.n	8009a02 <USBD_SetAddress+0x76>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	885b      	ldrh	r3, [r3, #2]
 80099aa:	2b7f      	cmp	r3, #127	; 0x7f
 80099ac:	d829      	bhi.n	8009a02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	885b      	ldrh	r3, [r3, #2]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d104      	bne.n	80099d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f9a3 	bl	8009d14 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ce:	e01d      	b.n	8009a0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	7bfa      	ldrb	r2, [r7, #15]
 80099d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 ffd3 	bl	800a988 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa44 	bl	8009e70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d004      	beq.n	80099f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2202      	movs	r2, #2
 80099f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f6:	e009      	b.n	8009a0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a00:	e004      	b.n	8009a0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f985 	bl	8009d14 <USBD_CtlError>
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	885b      	ldrh	r3, [r3, #2]
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	4b4c      	ldr	r3, [pc, #304]	; (8009b5c <USBD_SetConfig+0x148>)
 8009a2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a2c:	4b4b      	ldr	r3, [pc, #300]	; (8009b5c <USBD_SetConfig+0x148>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d905      	bls.n	8009a40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f96c 	bl	8009d14 <USBD_CtlError>
    return USBD_FAIL;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e088      	b.n	8009b52 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d002      	beq.n	8009a52 <USBD_SetConfig+0x3e>
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	d025      	beq.n	8009a9c <USBD_SetConfig+0x88>
 8009a50:	e071      	b.n	8009b36 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a52:	4b42      	ldr	r3, [pc, #264]	; (8009b5c <USBD_SetConfig+0x148>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d01c      	beq.n	8009a94 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009a5a:	4b40      	ldr	r3, [pc, #256]	; (8009b5c <USBD_SetConfig+0x148>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a64:	4b3d      	ldr	r3, [pc, #244]	; (8009b5c <USBD_SetConfig+0x148>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff f91f 	bl	8008cae <USBD_SetClassConfig>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d004      	beq.n	8009a84 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f949 	bl	8009d14 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a82:	e065      	b.n	8009b50 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f9f3 	bl	8009e70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a92:	e05d      	b.n	8009b50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f9eb 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009a9a:	e059      	b.n	8009b50 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a9c:	4b2f      	ldr	r3, [pc, #188]	; (8009b5c <USBD_SetConfig+0x148>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d112      	bne.n	8009aca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009aac:	4b2b      	ldr	r3, [pc, #172]	; (8009b5c <USBD_SetConfig+0x148>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ab6:	4b29      	ldr	r3, [pc, #164]	; (8009b5c <USBD_SetConfig+0x148>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff f912 	bl	8008ce6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9d4 	bl	8009e70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ac8:	e042      	b.n	8009b50 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009aca:	4b24      	ldr	r3, [pc, #144]	; (8009b5c <USBD_SetConfig+0x148>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d02a      	beq.n	8009b2e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff f900 	bl	8008ce6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ae6:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <USBD_SetConfig+0x148>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009af0:	4b1a      	ldr	r3, [pc, #104]	; (8009b5c <USBD_SetConfig+0x148>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff f8d9 	bl	8008cae <USBD_SetClassConfig>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00f      	beq.n	8009b26 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f903 	bl	8009d14 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff f8e5 	bl	8008ce6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b24:	e014      	b.n	8009b50 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f9a2 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009b2c:	e010      	b.n	8009b50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f99e 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009b34:	e00c      	b.n	8009b50 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f8eb 	bl	8009d14 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b3e:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <USBD_SetConfig+0x148>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff f8ce 	bl	8008ce6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b4e:	bf00      	nop
  }

  return ret;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	200001a4 	.word	0x200001a4

08009b60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	88db      	ldrh	r3, [r3, #6]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d004      	beq.n	8009b7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f8cd 	bl	8009d14 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b7a:	e023      	b.n	8009bc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	dc02      	bgt.n	8009b8e <USBD_GetConfig+0x2e>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dc03      	bgt.n	8009b94 <USBD_GetConfig+0x34>
 8009b8c:	e015      	b.n	8009bba <USBD_GetConfig+0x5a>
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d00b      	beq.n	8009baa <USBD_GetConfig+0x4a>
 8009b92:	e012      	b.n	8009bba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	3308      	adds	r3, #8
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f927 	bl	8009df6 <USBD_CtlSendData>
        break;
 8009ba8:	e00c      	b.n	8009bc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3304      	adds	r3, #4
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f91f 	bl	8009df6 <USBD_CtlSendData>
        break;
 8009bb8:	e004      	b.n	8009bc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f8a9 	bl	8009d14 <USBD_CtlError>
        break;
 8009bc2:	bf00      	nop
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	3b01      	subs	r3, #1
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d81e      	bhi.n	8009c22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	88db      	ldrh	r3, [r3, #6]
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d004      	beq.n	8009bf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f890 	bl	8009d14 <USBD_CtlError>
        break;
 8009bf4:	e01a      	b.n	8009c2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	f043 0202 	orr.w	r2, r3, #2
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	330c      	adds	r3, #12
 8009c16:	2202      	movs	r2, #2
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f8eb 	bl	8009df6 <USBD_CtlSendData>
      break;
 8009c20:	e004      	b.n	8009c2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f875 	bl	8009d14 <USBD_CtlError>
      break;
 8009c2a:	bf00      	nop
  }
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	885b      	ldrh	r3, [r3, #2]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d106      	bne.n	8009c54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f90e 	bl	8009e70 <USBD_CtlSendStatus>
  }
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d80b      	bhi.n	8009c8c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	885b      	ldrh	r3, [r3, #2]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d10c      	bne.n	8009c96 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f8f3 	bl	8009e70 <USBD_CtlSendStatus>
      }
      break;
 8009c8a:	e004      	b.n	8009c96 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f840 	bl	8009d14 <USBD_CtlError>
      break;
 8009c94:	e000      	b.n	8009c98 <USBD_ClrFeature+0x3c>
      break;
 8009c96:	bf00      	nop
  }
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	781a      	ldrb	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	781a      	ldrb	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f7ff fa92 	bl	80091f4 <SWAPBYTE>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f7ff fa85 	bl	80091f4 <SWAPBYTE>
 8009cea:	4603      	mov	r3, r0
 8009cec:	461a      	mov	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff fa78 	bl	80091f4 <SWAPBYTE>
 8009d04:	4603      	mov	r3, r0
 8009d06:	461a      	mov	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	80da      	strh	r2, [r3, #6]
}
 8009d0c:	bf00      	nop
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d1e:	2180      	movs	r1, #128	; 0x80
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fd99 	bl	800a858 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d26:	2100      	movs	r1, #0
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fd95 	bl	800a858 <USBD_LL_StallEP>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b086      	sub	sp, #24
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	60b9      	str	r1, [r7, #8]
 8009d40:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d036      	beq.n	8009dba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d50:	6938      	ldr	r0, [r7, #16]
 8009d52:	f000 f836 	bl	8009dc2 <USBD_GetLen>
 8009d56:	4603      	mov	r3, r0
 8009d58:	3301      	adds	r3, #1
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	4413      	add	r3, r2
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	7812      	ldrb	r2, [r2, #0]
 8009d6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
 8009d72:	3301      	adds	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
 8009d82:	3301      	adds	r3, #1
 8009d84:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d86:	e013      	b.n	8009db0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	7812      	ldrb	r2, [r2, #0]
 8009d92:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	3301      	adds	r3, #1
 8009d98:	613b      	str	r3, [r7, #16]
    idx++;
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	4413      	add	r3, r2
 8009da6:	2200      	movs	r2, #0
 8009da8:	701a      	strb	r2, [r3, #0]
    idx++;
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	3301      	adds	r3, #1
 8009dae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1e7      	bne.n	8009d88 <USBD_GetString+0x52>
 8009db8:	e000      	b.n	8009dbc <USBD_GetString+0x86>
    return;
 8009dba:	bf00      	nop
  }
}
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009dd2:	e005      	b.n	8009de0 <USBD_GetLen+0x1e>
  {
    len++;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1f5      	bne.n	8009dd4 <USBD_GetLen+0x12>
  }

  return len;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b084      	sub	sp, #16
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2202      	movs	r2, #2
 8009e06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fde9 	bl	800a9f4 <USBD_LL_Transmit>

  return USBD_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 fdd8 	bl	800a9f4 <USBD_LL_Transmit>

  return USBD_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	60f8      	str	r0, [r7, #12]
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	2100      	movs	r1, #0
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 fdff 	bl	800aa64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e80:	2300      	movs	r3, #0
 8009e82:	2200      	movs	r2, #0
 8009e84:	2100      	movs	r1, #0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fdb4 	bl	800a9f4 <USBD_LL_Transmit>

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	2100      	movs	r1, #0
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fdd9 	bl	800aa64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009ed2:	4b1f      	ldr	r3, [pc, #124]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009ed4:	7a5b      	ldrb	r3, [r3, #9]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d131      	bne.n	8009f40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009edc:	4b1c      	ldr	r3, [pc, #112]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009ede:	7a5b      	ldrb	r3, [r3, #9]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009eea:	4b19      	ldr	r3, [pc, #100]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009eec:	7a5b      	ldrb	r3, [r3, #9]
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	4a17      	ldr	r2, [pc, #92]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009efc:	7a5b      	ldrb	r3, [r3, #9]
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	461a      	mov	r2, r3
 8009f02:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009f04:	4413      	add	r3, r2
 8009f06:	79fa      	ldrb	r2, [r7, #7]
 8009f08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009f0a:	4b11      	ldr	r3, [pc, #68]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009f0c:	7a5b      	ldrb	r3, [r3, #9]
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	1c5a      	adds	r2, r3, #1
 8009f12:	b2d1      	uxtb	r1, r2
 8009f14:	4a0e      	ldr	r2, [pc, #56]	; (8009f50 <FATFS_LinkDriverEx+0x94>)
 8009f16:	7251      	strb	r1, [r2, #9]
 8009f18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009f1a:	7dbb      	ldrb	r3, [r7, #22]
 8009f1c:	3330      	adds	r3, #48	; 0x30
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	3301      	adds	r3, #1
 8009f28:	223a      	movs	r2, #58	; 0x3a
 8009f2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	3302      	adds	r3, #2
 8009f30:	222f      	movs	r2, #47	; 0x2f
 8009f32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	3303      	adds	r3, #3
 8009f38:	2200      	movs	r2, #0
 8009f3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	200001a8 	.word	0x200001a8

08009f54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f5e:	2200      	movs	r2, #0
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff ffaa 	bl	8009ebc <FATFS_LinkDriverEx>
 8009f68:	4603      	mov	r3, r0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4912      	ldr	r1, [pc, #72]	; (8009fc4 <MX_USB_DEVICE_Init+0x50>)
 8009f7c:	4812      	ldr	r0, [pc, #72]	; (8009fc8 <MX_USB_DEVICE_Init+0x54>)
 8009f7e:	f7fe fe28 	bl	8008bd2 <USBD_Init>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f88:	f7f6 fd0a 	bl	80009a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8009f8c:	490f      	ldr	r1, [pc, #60]	; (8009fcc <MX_USB_DEVICE_Init+0x58>)
 8009f8e:	480e      	ldr	r0, [pc, #56]	; (8009fc8 <MX_USB_DEVICE_Init+0x54>)
 8009f90:	f7fe fe4f 	bl	8008c32 <USBD_RegisterClass>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f9a:	f7f6 fd01 	bl	80009a0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8009f9e:	490c      	ldr	r1, [pc, #48]	; (8009fd0 <MX_USB_DEVICE_Init+0x5c>)
 8009fa0:	4809      	ldr	r0, [pc, #36]	; (8009fc8 <MX_USB_DEVICE_Init+0x54>)
 8009fa2:	f7fd f9ff 	bl	80073a4 <USBD_MSC_RegisterStorage>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009fac:	f7f6 fcf8 	bl	80009a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009fb0:	4805      	ldr	r0, [pc, #20]	; (8009fc8 <MX_USB_DEVICE_Init+0x54>)
 8009fb2:	f7fe fe65 	bl	8008c80 <USBD_Start>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009fbc:	f7f6 fcf0 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009fc0:	bf00      	nop
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	20000108 	.word	0x20000108
 8009fc8:	20002638 	.word	0x20002638
 8009fcc:	20000020 	.word	0x20000020
 8009fd0:	20000168 	.word	0x20000168

08009fd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2212      	movs	r2, #18
 8009fe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fe6:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	20000128 	.word	0x20000128

08009ff8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2204      	movs	r2, #4
 800a008:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a00a:	4b03      	ldr	r3, [pc, #12]	; (800a018 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	20000148 	.word	0x20000148

0800a01c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	4603      	mov	r3, r0
 800a024:	6039      	str	r1, [r7, #0]
 800a026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d105      	bne.n	800a03a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	4907      	ldr	r1, [pc, #28]	; (800a050 <USBD_FS_ProductStrDescriptor+0x34>)
 800a032:	4808      	ldr	r0, [pc, #32]	; (800a054 <USBD_FS_ProductStrDescriptor+0x38>)
 800a034:	f7ff fe7f 	bl	8009d36 <USBD_GetString>
 800a038:	e004      	b.n	800a044 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	4904      	ldr	r1, [pc, #16]	; (800a050 <USBD_FS_ProductStrDescriptor+0x34>)
 800a03e:	4805      	ldr	r0, [pc, #20]	; (800a054 <USBD_FS_ProductStrDescriptor+0x38>)
 800a040:	f7ff fe79 	bl	8009d36 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a044:	4b02      	ldr	r3, [pc, #8]	; (800a050 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a046:	4618      	mov	r0, r3
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20002908 	.word	0x20002908
 800a054:	0800ac44 	.word	0x0800ac44

0800a058 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	6039      	str	r1, [r7, #0]
 800a062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	4904      	ldr	r1, [pc, #16]	; (800a078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a068:	4804      	ldr	r0, [pc, #16]	; (800a07c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a06a:	f7ff fe64 	bl	8009d36 <USBD_GetString>
  return USBD_StrDesc;
 800a06e:	4b02      	ldr	r3, [pc, #8]	; (800a078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	20002908 	.word	0x20002908
 800a07c:	0800ac58 	.word	0x0800ac58

0800a080 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	6039      	str	r1, [r7, #0]
 800a08a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	221a      	movs	r2, #26
 800a090:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a092:	f000 f855 	bl	800a140 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a096:	4b02      	ldr	r3, [pc, #8]	; (800a0a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	2000014c 	.word	0x2000014c

0800a0a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	6039      	str	r1, [r7, #0]
 800a0ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d105      	bne.n	800a0c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	4907      	ldr	r1, [pc, #28]	; (800a0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0ba:	4808      	ldr	r0, [pc, #32]	; (800a0dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0bc:	f7ff fe3b 	bl	8009d36 <USBD_GetString>
 800a0c0:	e004      	b.n	800a0cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	4904      	ldr	r1, [pc, #16]	; (800a0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0c6:	4805      	ldr	r0, [pc, #20]	; (800a0dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0c8:	f7ff fe35 	bl	8009d36 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0cc:	4b02      	ldr	r3, [pc, #8]	; (800a0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20002908 	.word	0x20002908
 800a0dc:	0800ac6c 	.word	0x0800ac6c

0800a0e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	6039      	str	r1, [r7, #0]
 800a0ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d105      	bne.n	800a0fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	4907      	ldr	r1, [pc, #28]	; (800a114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0f6:	4808      	ldr	r0, [pc, #32]	; (800a118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0f8:	f7ff fe1d 	bl	8009d36 <USBD_GetString>
 800a0fc:	e004      	b.n	800a108 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	4904      	ldr	r1, [pc, #16]	; (800a114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a102:	4805      	ldr	r0, [pc, #20]	; (800a118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a104:	f7ff fe17 	bl	8009d36 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a108:	4b02      	ldr	r3, [pc, #8]	; (800a114 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20002908 	.word	0x20002908
 800a118:	0800ac78 	.word	0x0800ac78

0800a11c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	220c      	movs	r2, #12
 800a12c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a12e:	4b03      	ldr	r3, [pc, #12]	; (800a13c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a130:	4618      	mov	r0, r3
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	2000013c 	.word	0x2000013c

0800a140 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a146:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <Get_SerialNum+0x44>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a14c:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <Get_SerialNum+0x48>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a152:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <Get_SerialNum+0x4c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d009      	beq.n	800a17a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a166:	2208      	movs	r2, #8
 800a168:	4909      	ldr	r1, [pc, #36]	; (800a190 <Get_SerialNum+0x50>)
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 f814 	bl	800a198 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a170:	2204      	movs	r2, #4
 800a172:	4908      	ldr	r1, [pc, #32]	; (800a194 <Get_SerialNum+0x54>)
 800a174:	68b8      	ldr	r0, [r7, #8]
 800a176:	f000 f80f 	bl	800a198 <IntToUnicode>
  }
}
 800a17a:	bf00      	nop
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	1fff7590 	.word	0x1fff7590
 800a188:	1fff7594 	.word	0x1fff7594
 800a18c:	1fff7598 	.word	0x1fff7598
 800a190:	2000014e 	.word	0x2000014e
 800a194:	2000015e 	.word	0x2000015e

0800a198 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	75fb      	strb	r3, [r7, #23]
 800a1ae:	e027      	b.n	800a200 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	0f1b      	lsrs	r3, r3, #28
 800a1b4:	2b09      	cmp	r3, #9
 800a1b6:	d80b      	bhi.n	800a1d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	0f1b      	lsrs	r3, r3, #28
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	440b      	add	r3, r1
 800a1c8:	3230      	adds	r2, #48	; 0x30
 800a1ca:	b2d2      	uxtb	r2, r2
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	e00a      	b.n	800a1e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	0f1b      	lsrs	r3, r3, #28
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	4619      	mov	r1, r3
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	440b      	add	r3, r1
 800a1e0:	3237      	adds	r2, #55	; 0x37
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	75fb      	strb	r3, [r7, #23]
 800a200:	7dfa      	ldrb	r2, [r7, #23]
 800a202:	79fb      	ldrb	r3, [r7, #7]
 800a204:	429a      	cmp	r2, r3
 800a206:	d3d3      	bcc.n	800a1b0 <IntToUnicode+0x18>
  }
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	4603      	mov	r3, r0
 800a21e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800a220:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	4603      	mov	r3, r0
 800a236:	60b9      	str	r1, [r7, #8]
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a242:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a24a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800a24c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	4603      	mov	r3, r0
 800a262:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a264:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a266:	4618      	mov	r0, r3
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800a272:	b480      	push	{r7}
 800a274:	b083      	sub	sp, #12
 800a276:	af00      	add	r7, sp, #0
 800a278:	4603      	mov	r3, r0
 800a27a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a27c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a27e:	4618      	mov	r0, r3
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b085      	sub	sp, #20
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	461a      	mov	r2, r3
 800a296:	4603      	mov	r3, r0
 800a298:	73fb      	strb	r3, [r7, #15]
 800a29a:	4613      	mov	r3, r2
 800a29c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800a29e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800a2c0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800a2d2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b0b0      	sub	sp, #192	; 0xc0
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	605a      	str	r2, [r3, #4]
 800a2f2:	609a      	str	r2, [r3, #8]
 800a2f4:	60da      	str	r2, [r3, #12]
 800a2f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a2f8:	f107 0318 	add.w	r3, r7, #24
 800a2fc:	2294      	movs	r2, #148	; 0x94
 800a2fe:	2100      	movs	r1, #0
 800a300:	4618      	mov	r0, r3
 800a302:	f000 fc8b 	bl	800ac1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a30e:	d174      	bne.n	800a3fa <HAL_PCD_MspInit+0x11a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a314:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a316:	2300      	movs	r3, #0
 800a318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a31c:	f107 0318 	add.w	r3, r7, #24
 800a320:	4618      	mov	r0, r3
 800a322:	f7f9 fb0b 	bl	800393c <HAL_RCCEx_PeriphCLKConfig>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a32c:	f7f6 fb38 	bl	80009a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a330:	4b34      	ldr	r3, [pc, #208]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a334:	4a33      	ldr	r2, [pc, #204]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a336:	f043 0301 	orr.w	r3, r3, #1
 800a33a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a33c:	4b31      	ldr	r3, [pc, #196]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a33e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	617b      	str	r3, [r7, #20]
 800a346:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a348:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a34c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a350:	2302      	movs	r3, #2
 800a352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a356:	2300      	movs	r3, #0
 800a358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a35c:	2303      	movs	r3, #3
 800a35e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a362:	230a      	movs	r3, #10
 800a364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a368:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a36c:	4619      	mov	r1, r3
 800a36e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a372:	f7f7 f8a1 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a37a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a37e:	2300      	movs	r3, #0
 800a380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a384:	2300      	movs	r3, #0
 800a386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a38a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a38e:	4619      	mov	r1, r3
 800a390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a394:	f7f7 f890 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a398:	4b1a      	ldr	r3, [pc, #104]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a39a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39c:	4a19      	ldr	r2, [pc, #100]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a39e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3a4:	4b17      	ldr	r3, [pc, #92]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3ac:	613b      	str	r3, [r7, #16]
 800a3ae:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3b0:	4b14      	ldr	r3, [pc, #80]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d114      	bne.n	800a3e6 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3bc:	4b11      	ldr	r3, [pc, #68]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a3be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c0:	4a10      	ldr	r2, [pc, #64]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a3c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a3c8:	4b0e      	ldr	r3, [pc, #56]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3d0:	60fb      	str	r3, [r7, #12]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800a3d4:	f7f8 fbba 	bl	8002b4c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3dc:	4a09      	ldr	r2, [pc, #36]	; (800a404 <HAL_PCD_MspInit+0x124>)
 800a3de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3e2:	6593      	str	r3, [r2, #88]	; 0x58
 800a3e4:	e001      	b.n	800a3ea <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a3e6:	f7f8 fbb1 	bl	8002b4c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	2043      	movs	r0, #67	; 0x43
 800a3f0:	f7f7 f82b 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3f4:	2043      	movs	r0, #67	; 0x43
 800a3f6:	f7f7 f844 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3fa:	bf00      	nop
 800a3fc:	37c0      	adds	r7, #192	; 0xc0
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40021000 	.word	0x40021000

0800a408 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f7fe fc79 	bl	8008d16 <USBD_LL_SetupStage>
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	6879      	ldr	r1, [r7, #4]
 800a442:	4613      	mov	r3, r2
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	440b      	add	r3, r1
 800a44c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	78fb      	ldrb	r3, [r7, #3]
 800a454:	4619      	mov	r1, r3
 800a456:	f7fe fcb3 	bl	8008dc0 <USBD_LL_DataOutStage>
}
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a474:	78fa      	ldrb	r2, [r7, #3]
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	4613      	mov	r3, r2
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	1a9b      	subs	r3, r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	440b      	add	r3, r1
 800a482:	3348      	adds	r3, #72	; 0x48
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	78fb      	ldrb	r3, [r7, #3]
 800a488:	4619      	mov	r1, r3
 800a48a:	f7fe fcfc 	bl	8008e86 <USBD_LL_DataInStage>
}
 800a48e:	bf00      	nop
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b082      	sub	sp, #8
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fe10 	bl	80090ca <USBD_LL_SOF>
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d001      	beq.n	800a4ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a4c6:	f7f6 fa6b 	bl	80009a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4d0:	7bfa      	ldrb	r2, [r7, #15]
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe fdba 	bl	800904e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fd66 	bl	8008fb2 <USBD_LL_Reset>
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a50a:	f043 0301 	orr.w	r3, r3, #1
 800a50e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fda9 	bl	800906e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d005      	beq.n	800a530 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a524:	4b04      	ldr	r3, [pc, #16]	; (800a538 <HAL_PCD_SuspendCallback+0x48>)
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	4a03      	ldr	r2, [pc, #12]	; (800a538 <HAL_PCD_SuspendCallback+0x48>)
 800a52a:	f043 0306 	orr.w	r3, r3, #6
 800a52e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	e000ed00 	.word	0xe000ed00

0800a53c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6812      	ldr	r2, [r2, #0]
 800a552:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a556:	f023 0301 	bic.w	r3, r3, #1
 800a55a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d007      	beq.n	800a574 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a564:	4b08      	ldr	r3, [pc, #32]	; (800a588 <HAL_PCD_ResumeCallback+0x4c>)
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	4a07      	ldr	r2, [pc, #28]	; (800a588 <HAL_PCD_ResumeCallback+0x4c>)
 800a56a:	f023 0306 	bic.w	r3, r3, #6
 800a56e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a570:	f000 fb2a 	bl	800abc8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fd8d 	bl	800909a <USBD_LL_Resume>
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	e000ed00 	.word	0xe000ed00

0800a58c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a59e:	78fa      	ldrb	r2, [r7, #3]
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe fdd9 	bl	800915a <USBD_LL_IsoOUTIncomplete>
}
 800a5a8:	bf00      	nop
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5c2:	78fa      	ldrb	r2, [r7, #3]
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe fda1 	bl	800910e <USBD_LL_IsoINIncomplete>
}
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe fddf 	bl	80091a6 <USBD_LL_DevConnected>
}
 800a5e8:	bf00      	nop
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fddc 	bl	80091bc <USBD_LL_DevDisconnected>
}
 800a604:	bf00      	nop
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d139      	bne.n	800a690 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a61c:	4a1f      	ldr	r2, [pc, #124]	; (800a69c <USBD_LL_Init+0x90>)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a1d      	ldr	r2, [pc, #116]	; (800a69c <USBD_LL_Init+0x90>)
 800a628:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a62c:	4b1b      	ldr	r3, [pc, #108]	; (800a69c <USBD_LL_Init+0x90>)
 800a62e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a632:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a634:	4b19      	ldr	r3, [pc, #100]	; (800a69c <USBD_LL_Init+0x90>)
 800a636:	2206      	movs	r2, #6
 800a638:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a63a:	4b18      	ldr	r3, [pc, #96]	; (800a69c <USBD_LL_Init+0x90>)
 800a63c:	2202      	movs	r2, #2
 800a63e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a640:	4b16      	ldr	r3, [pc, #88]	; (800a69c <USBD_LL_Init+0x90>)
 800a642:	2201      	movs	r2, #1
 800a644:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a646:	4b15      	ldr	r3, [pc, #84]	; (800a69c <USBD_LL_Init+0x90>)
 800a648:	2200      	movs	r2, #0
 800a64a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a64c:	4b13      	ldr	r3, [pc, #76]	; (800a69c <USBD_LL_Init+0x90>)
 800a64e:	2200      	movs	r2, #0
 800a650:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800a652:	4b12      	ldr	r3, [pc, #72]	; (800a69c <USBD_LL_Init+0x90>)
 800a654:	2201      	movs	r2, #1
 800a656:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a658:	4b10      	ldr	r3, [pc, #64]	; (800a69c <USBD_LL_Init+0x90>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a65e:	4b0f      	ldr	r3, [pc, #60]	; (800a69c <USBD_LL_Init+0x90>)
 800a660:	2201      	movs	r2, #1
 800a662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a664:	480d      	ldr	r0, [pc, #52]	; (800a69c <USBD_LL_Init+0x90>)
 800a666:	f7f7 f8eb 	bl	8001840 <HAL_PCD_Init>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800a670:	f7f6 f996 	bl	80009a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a674:	2180      	movs	r1, #128	; 0x80
 800a676:	4809      	ldr	r0, [pc, #36]	; (800a69c <USBD_LL_Init+0x90>)
 800a678:	f7f8 f96f 	bl	800295a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a67c:	2240      	movs	r2, #64	; 0x40
 800a67e:	2100      	movs	r1, #0
 800a680:	4806      	ldr	r0, [pc, #24]	; (800a69c <USBD_LL_Init+0x90>)
 800a682:	f7f8 f923 	bl	80028cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a686:	2280      	movs	r2, #128	; 0x80
 800a688:	2101      	movs	r1, #1
 800a68a:	4804      	ldr	r0, [pc, #16]	; (800a69c <USBD_LL_Init+0x90>)
 800a68c:	f7f8 f91e 	bl	80028cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20002b08 	.word	0x20002b08

0800a6a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f7 f9e6 	bl	8001a88 <HAL_PCD_Start>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d816      	bhi.n	800a6f4 <USBD_LL_Start+0x54>
 800a6c6:	a201      	add	r2, pc, #4	; (adr r2, 800a6cc <USBD_LL_Start+0x2c>)
 800a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6cc:	0800a6dd 	.word	0x0800a6dd
 800a6d0:	0800a6e3 	.word	0x0800a6e3
 800a6d4:	0800a6e9 	.word	0x0800a6e9
 800a6d8:	0800a6ef 	.word	0x0800a6ef
    case HAL_OK :
      usb_status = USBD_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e0:	e00b      	b.n	800a6fa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e6:	e008      	b.n	800a6fa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a6ec:	e005      	b.n	800a6fa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f2:	e002      	b.n	800a6fa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f8:	bf00      	nop
  }
  return usb_status;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	4608      	mov	r0, r1
 800a70e:	4611      	mov	r1, r2
 800a710:	461a      	mov	r2, r3
 800a712:	4603      	mov	r3, r0
 800a714:	70fb      	strb	r3, [r7, #3]
 800a716:	460b      	mov	r3, r1
 800a718:	70bb      	strb	r3, [r7, #2]
 800a71a:	4613      	mov	r3, r2
 800a71c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a72c:	78bb      	ldrb	r3, [r7, #2]
 800a72e:	883a      	ldrh	r2, [r7, #0]
 800a730:	78f9      	ldrb	r1, [r7, #3]
 800a732:	f7f7 fd96 	bl	8002262 <HAL_PCD_EP_Open>
 800a736:	4603      	mov	r3, r0
 800a738:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d817      	bhi.n	800a770 <USBD_LL_OpenEP+0x6c>
 800a740:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <USBD_LL_OpenEP+0x44>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a759 	.word	0x0800a759
 800a74c:	0800a75f 	.word	0x0800a75f
 800a750:	0800a765 	.word	0x0800a765
 800a754:	0800a76b 	.word	0x0800a76b
    case HAL_OK :
      usb_status = USBD_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
    break;
 800a75c:	e00b      	b.n	800a776 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a75e:	2303      	movs	r3, #3
 800a760:	73fb      	strb	r3, [r7, #15]
    break;
 800a762:	e008      	b.n	800a776 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a764:	2301      	movs	r3, #1
 800a766:	73fb      	strb	r3, [r7, #15]
    break;
 800a768:	e005      	b.n	800a776 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a76a:	2303      	movs	r3, #3
 800a76c:	73fb      	strb	r3, [r7, #15]
    break;
 800a76e:	e002      	b.n	800a776 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a770:	2303      	movs	r3, #3
 800a772:	73fb      	strb	r3, [r7, #15]
    break;
 800a774:	bf00      	nop
  }
  return usb_status;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a79a:	78fa      	ldrb	r2, [r7, #3]
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7f7 fdc7 	bl	8002332 <HAL_PCD_EP_Close>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d816      	bhi.n	800a7dc <USBD_LL_CloseEP+0x5c>
 800a7ae:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <USBD_LL_CloseEP+0x34>)
 800a7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a7cb 	.word	0x0800a7cb
 800a7bc:	0800a7d1 	.word	0x0800a7d1
 800a7c0:	0800a7d7 	.word	0x0800a7d7
    case HAL_OK :
      usb_status = USBD_OK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c8:	e00b      	b.n	800a7e2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ce:	e008      	b.n	800a7e2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d4:	e005      	b.n	800a7e2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7da:	e002      	b.n	800a7e2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e0:	bf00      	nop
  }
  return usb_status;
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a806:	78fa      	ldrb	r2, [r7, #3]
 800a808:	4611      	mov	r1, r2
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7f7 ff26 	bl	800265c <HAL_PCD_EP_Flush>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2b03      	cmp	r3, #3
 800a818:	d816      	bhi.n	800a848 <USBD_LL_FlushEP+0x5c>
 800a81a:	a201      	add	r2, pc, #4	; (adr r2, 800a820 <USBD_LL_FlushEP+0x34>)
 800a81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a820:	0800a831 	.word	0x0800a831
 800a824:	0800a837 	.word	0x0800a837
 800a828:	0800a83d 	.word	0x0800a83d
 800a82c:	0800a843 	.word	0x0800a843
    case HAL_OK :
      usb_status = USBD_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]
    break;
 800a834:	e00b      	b.n	800a84e <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a836:	2303      	movs	r3, #3
 800a838:	73fb      	strb	r3, [r7, #15]
    break;
 800a83a:	e008      	b.n	800a84e <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a83c:	2301      	movs	r3, #1
 800a83e:	73fb      	strb	r3, [r7, #15]
    break;
 800a840:	e005      	b.n	800a84e <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a842:	2303      	movs	r3, #3
 800a844:	73fb      	strb	r3, [r7, #15]
    break;
 800a846:	e002      	b.n	800a84e <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a848:	2303      	movs	r3, #3
 800a84a:	73fb      	strb	r3, [r7, #15]
    break;
 800a84c:	bf00      	nop
  }
  return usb_status;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a872:	78fa      	ldrb	r2, [r7, #3]
 800a874:	4611      	mov	r1, r2
 800a876:	4618      	mov	r0, r3
 800a878:	f7f7 fe38 	bl	80024ec <HAL_PCD_EP_SetStall>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b03      	cmp	r3, #3
 800a884:	d816      	bhi.n	800a8b4 <USBD_LL_StallEP+0x5c>
 800a886:	a201      	add	r2, pc, #4	; (adr r2, 800a88c <USBD_LL_StallEP+0x34>)
 800a888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88c:	0800a89d 	.word	0x0800a89d
 800a890:	0800a8a3 	.word	0x0800a8a3
 800a894:	0800a8a9 	.word	0x0800a8a9
 800a898:	0800a8af 	.word	0x0800a8af
    case HAL_OK :
      usb_status = USBD_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a0:	e00b      	b.n	800a8ba <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a6:	e008      	b.n	800a8ba <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ac:	e005      	b.n	800a8ba <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b2:	e002      	b.n	800a8ba <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b8:	bf00      	nop
  }
  return usb_status;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8de:	78fa      	ldrb	r2, [r7, #3]
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7f7 fe64 	bl	80025b0 <HAL_PCD_EP_ClrStall>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d816      	bhi.n	800a920 <USBD_LL_ClearStallEP+0x5c>
 800a8f2:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <USBD_LL_ClearStallEP+0x34>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a909 	.word	0x0800a909
 800a8fc:	0800a90f 	.word	0x0800a90f
 800a900:	0800a915 	.word	0x0800a915
 800a904:	0800a91b 	.word	0x0800a91b
    case HAL_OK :
      usb_status = USBD_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]
    break;
 800a90c:	e00b      	b.n	800a926 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a90e:	2303      	movs	r3, #3
 800a910:	73fb      	strb	r3, [r7, #15]
    break;
 800a912:	e008      	b.n	800a926 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a914:	2301      	movs	r3, #1
 800a916:	73fb      	strb	r3, [r7, #15]
    break;
 800a918:	e005      	b.n	800a926 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a91a:	2303      	movs	r3, #3
 800a91c:	73fb      	strb	r3, [r7, #15]
    break;
 800a91e:	e002      	b.n	800a926 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	73fb      	strb	r3, [r7, #15]
    break;
 800a924:	bf00      	nop
  }
  return usb_status;
 800a926:	7bfb      	ldrb	r3, [r7, #15]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	460b      	mov	r3, r1
 800a93a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a942:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	da0b      	bge.n	800a964 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a94c:	78fb      	ldrb	r3, [r7, #3]
 800a94e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a952:	68f9      	ldr	r1, [r7, #12]
 800a954:	4613      	mov	r3, r2
 800a956:	00db      	lsls	r3, r3, #3
 800a958:	1a9b      	subs	r3, r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	440b      	add	r3, r1
 800a95e:	333e      	adds	r3, #62	; 0x3e
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	e00b      	b.n	800a97c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a96a:	68f9      	ldr	r1, [r7, #12]
 800a96c:	4613      	mov	r3, r2
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	440b      	add	r3, r1
 800a976:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a97a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	460b      	mov	r3, r1
 800a992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9a2:	78fa      	ldrb	r2, [r7, #3]
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7f7 fc36 	bl	8002218 <HAL_PCD_SetAddress>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d816      	bhi.n	800a9e4 <USBD_LL_SetUSBAddress+0x5c>
 800a9b6:	a201      	add	r2, pc, #4	; (adr r2, 800a9bc <USBD_LL_SetUSBAddress+0x34>)
 800a9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9bc:	0800a9cd 	.word	0x0800a9cd
 800a9c0:	0800a9d3 	.word	0x0800a9d3
 800a9c4:	0800a9d9 	.word	0x0800a9d9
 800a9c8:	0800a9df 	.word	0x0800a9df
    case HAL_OK :
      usb_status = USBD_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d0:	e00b      	b.n	800a9ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d6:	e008      	b.n	800a9ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]
    break;
 800a9dc:	e005      	b.n	800a9ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e2:	e002      	b.n	800a9ea <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e8:	bf00      	nop
  }
  return usb_status;
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	460b      	mov	r3, r1
 800aa02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa12:	7af9      	ldrb	r1, [r7, #11]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	f7f7 fd2b 	bl	8002472 <HAL_PCD_EP_Transmit>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa20:	7dbb      	ldrb	r3, [r7, #22]
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d816      	bhi.n	800aa54 <USBD_LL_Transmit+0x60>
 800aa26:	a201      	add	r2, pc, #4	; (adr r2, 800aa2c <USBD_LL_Transmit+0x38>)
 800aa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2c:	0800aa3d 	.word	0x0800aa3d
 800aa30:	0800aa43 	.word	0x0800aa43
 800aa34:	0800aa49 	.word	0x0800aa49
 800aa38:	0800aa4f 	.word	0x0800aa4f
    case HAL_OK :
      usb_status = USBD_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	75fb      	strb	r3, [r7, #23]
    break;
 800aa40:	e00b      	b.n	800aa5a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa42:	2303      	movs	r3, #3
 800aa44:	75fb      	strb	r3, [r7, #23]
    break;
 800aa46:	e008      	b.n	800aa5a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	75fb      	strb	r3, [r7, #23]
    break;
 800aa4c:	e005      	b.n	800aa5a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	75fb      	strb	r3, [r7, #23]
    break;
 800aa52:	e002      	b.n	800aa5a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800aa54:	2303      	movs	r3, #3
 800aa56:	75fb      	strb	r3, [r7, #23]
    break;
 800aa58:	bf00      	nop
  }
  return usb_status;
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	607a      	str	r2, [r7, #4]
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	460b      	mov	r3, r1
 800aa72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa82:	7af9      	ldrb	r1, [r7, #11]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	f7f7 fc9d 	bl	80023c6 <HAL_PCD_EP_Receive>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa90:	7dbb      	ldrb	r3, [r7, #22]
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d816      	bhi.n	800aac4 <USBD_LL_PrepareReceive+0x60>
 800aa96:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <USBD_LL_PrepareReceive+0x38>)
 800aa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9c:	0800aaad 	.word	0x0800aaad
 800aaa0:	0800aab3 	.word	0x0800aab3
 800aaa4:	0800aab9 	.word	0x0800aab9
 800aaa8:	0800aabf 	.word	0x0800aabf
    case HAL_OK :
      usb_status = USBD_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	75fb      	strb	r3, [r7, #23]
    break;
 800aab0:	e00b      	b.n	800aaca <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aab2:	2303      	movs	r3, #3
 800aab4:	75fb      	strb	r3, [r7, #23]
    break;
 800aab6:	e008      	b.n	800aaca <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aab8:	2301      	movs	r3, #1
 800aaba:	75fb      	strb	r3, [r7, #23]
    break;
 800aabc:	e005      	b.n	800aaca <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aabe:	2303      	movs	r3, #3
 800aac0:	75fb      	strb	r3, [r7, #23]
    break;
 800aac2:	e002      	b.n	800aaca <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800aac4:	2303      	movs	r3, #3
 800aac6:	75fb      	strb	r3, [r7, #23]
    break;
 800aac8:	bf00      	nop
  }
  return usb_status;
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aae6:	78fa      	ldrb	r2, [r7, #3]
 800aae8:	4611      	mov	r1, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7f7 fca9 	bl	8002442 <HAL_PCD_EP_GetRxCount>
 800aaf0:	4603      	mov	r3, r0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ab08:	78fb      	ldrb	r3, [r7, #3]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <HAL_PCDEx_LPM_Callback+0x18>
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d01f      	beq.n	800ab52 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ab12:	e03b      	b.n	800ab8c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a1b      	ldr	r3, [r3, #32]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d007      	beq.n	800ab2c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ab1c:	f000 f854 	bl	800abc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab20:	4b1c      	ldr	r3, [pc, #112]	; (800ab94 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	4a1b      	ldr	r2, [pc, #108]	; (800ab94 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab26:	f023 0306 	bic.w	r3, r3, #6
 800ab2a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	6812      	ldr	r2, [r2, #0]
 800ab3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab3e:	f023 0301 	bic.w	r3, r3, #1
 800ab42:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fe faa5 	bl	800909a <USBD_LL_Resume>
    break;
 800ab50:	e01c      	b.n	800ab8c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	6812      	ldr	r2, [r2, #0]
 800ab60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab64:	f043 0301 	orr.w	r3, r3, #1
 800ab68:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fe fa7c 	bl	800906e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d005      	beq.n	800ab8a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	4a04      	ldr	r2, [pc, #16]	; (800ab94 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab84:	f043 0306 	orr.w	r3, r3, #6
 800ab88:	6113      	str	r3, [r2, #16]
    break;
 800ab8a:	bf00      	nop
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	e000ed00 	.word	0xe000ed00

0800ab98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aba0:	4b03      	ldr	r3, [pc, #12]	; (800abb0 <USBD_static_malloc+0x18>)
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	200001b4 	.word	0x200001b4

0800abb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]

}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800abcc:	f7f5 fd1a 	bl	8000604 <SystemClock_Config>
}
 800abd0:	bf00      	nop
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <__libc_init_array>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4d0d      	ldr	r5, [pc, #52]	; (800ac0c <__libc_init_array+0x38>)
 800abd8:	4c0d      	ldr	r4, [pc, #52]	; (800ac10 <__libc_init_array+0x3c>)
 800abda:	1b64      	subs	r4, r4, r5
 800abdc:	10a4      	asrs	r4, r4, #2
 800abde:	2600      	movs	r6, #0
 800abe0:	42a6      	cmp	r6, r4
 800abe2:	d109      	bne.n	800abf8 <__libc_init_array+0x24>
 800abe4:	4d0b      	ldr	r5, [pc, #44]	; (800ac14 <__libc_init_array+0x40>)
 800abe6:	4c0c      	ldr	r4, [pc, #48]	; (800ac18 <__libc_init_array+0x44>)
 800abe8:	f000 f820 	bl	800ac2c <_init>
 800abec:	1b64      	subs	r4, r4, r5
 800abee:	10a4      	asrs	r4, r4, #2
 800abf0:	2600      	movs	r6, #0
 800abf2:	42a6      	cmp	r6, r4
 800abf4:	d105      	bne.n	800ac02 <__libc_init_array+0x2e>
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfc:	4798      	blx	r3
 800abfe:	3601      	adds	r6, #1
 800ac00:	e7ee      	b.n	800abe0 <__libc_init_array+0xc>
 800ac02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac06:	4798      	blx	r3
 800ac08:	3601      	adds	r6, #1
 800ac0a:	e7f2      	b.n	800abf2 <__libc_init_array+0x1e>
 800ac0c:	0800ad24 	.word	0x0800ad24
 800ac10:	0800ad24 	.word	0x0800ad24
 800ac14:	0800ad24 	.word	0x0800ad24
 800ac18:	0800ad28 	.word	0x0800ad28

0800ac1c <memset>:
 800ac1c:	4402      	add	r2, r0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d100      	bne.n	800ac26 <memset+0xa>
 800ac24:	4770      	bx	lr
 800ac26:	f803 1b01 	strb.w	r1, [r3], #1
 800ac2a:	e7f9      	b.n	800ac20 <memset+0x4>

0800ac2c <_init>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	bf00      	nop
 800ac30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac32:	bc08      	pop	{r3}
 800ac34:	469e      	mov	lr, r3
 800ac36:	4770      	bx	lr

0800ac38 <_fini>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	bf00      	nop
 800ac3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3e:	bc08      	pop	{r3}
 800ac40:	469e      	mov	lr, r3
 800ac42:	4770      	bx	lr
